                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _InitValues
                             13 	.globl _StartMenu
                             14 	.globl _PrintObjInfo
                             15 	.globl _PrintStartMenu
                             16 	.globl _EnemyLoop
                             17 	.globl _CheckEnemyCollision
                             18 	.globl _SetEnemies
                             19 	.globl _SetEnemyParams
                             20 	.globl _MoveEnemy
                             21 	.globl _MakeWizardAnim
                             22 	.globl _WizardAnim
                             23 	.globl _PrintWizard
                             24 	.globl _MoveShot
                             25 	.globl _PrintShot
                             26 	.globl _DeleteShot
                             27 	.globl _MakeShot
                             28 	.globl _CheckDuel
                             29 	.globl _ExplodePlayerInDuel
                             30 	.globl _PlayerLoop
                             31 	.globl _RunStatus
                             32 	.globl _Walk
                             33 	.globl _WalkAnim
                             34 	.globl _Stop
                             35 	.globl _WalkIn
                             36 	.globl _MoveRight
                             37 	.globl _MoveLeft
                             38 	.globl _MoveDown
                             39 	.globl _MoveUp
                             40 	.globl _ExplodeSprite
                             41 	.globl _PrintExplosion
                             42 	.globl _SelectFrame
                             43 	.globl _AssignFrame
                             44 	.globl _DeleteSprite
                             45 	.globl _CheckActiveTile
                             46 	.globl _CompareKeys
                             47 	.globl _PrintKey
                             48 	.globl _AddObjectToScoreboard
                             49 	.globl _SetObject
                             50 	.globl _ReprintObject
                             51 	.globl _ObjectCollision
                             52 	.globl _CheckObject
                             53 	.globl _PrintObjectInStore
                             54 	.globl _DeleteObjectInStore
                             55 	.globl _PrintCoin
                             56 	.globl _PrintDust
                             57 	.globl _DeleteObject
                             58 	.globl _ResetObjData
                             59 	.globl _RefreshScoreboard
                             60 	.globl _InitScoreboard
                             61 	.globl _RefreshHighScore
                             62 	.globl _RedefineKey
                             63 	.globl _Wait4Key
                             64 	.globl _ReturnKeyPressed
                             65 	.globl _PrintTip
                             66 	.globl _PrintEndGame
                             67 	.globl _PrintLevelInfo
                             68 	.globl _PrintSmallBlueBox
                             69 	.globl _PrintFrame
                             70 	.globl _PrintText
                             71 	.globl _PrintNumber
                             72 	.globl _PrintMap
                             73 	.globl _OnBackground
                             74 	.globl _GetTileNum
                             75 	.globl _ClearScreen
                             76 	.globl _Interrupt
                             77 	.globl _Pause
                             78 	.globl _Itoa
                             79 	.globl _Strlen
                             80 	.globl _Abs
                             81 	.globl _cpct_zx7b_decrunch_s
                             82 	.globl _cpct_etm_setTileset2x4
                             83 	.globl _cpct_etm_drawTileBox2x4
                             84 	.globl _cpct_setSeed_lcg_u8
                             85 	.globl _cpct_getRandom_lcg_u8
                             86 	.globl _cpct_getScreenPtr
                             87 	.globl _cpct_setPALColour
                             88 	.globl _cpct_setPalette
                             89 	.globl _cpct_waitVSYNC
                             90 	.globl _cpct_setVideoMode
                             91 	.globl _cpct_drawSpriteMaskedAlignedTable
                             92 	.globl _cpct_drawSprite
                             93 	.globl _cpct_drawSolidBox
                             94 	.globl _cpct_px2byteM0
                             95 	.globl _cpct_isAnyKeyPressed
                             96 	.globl _cpct_isKeyPressed
                             97 	.globl _cpct_scanKeyboard_if
                             98 	.globl _cpct_scanKeyboard_f
                             99 	.globl _cpct_scanKeyboard
                            100 	.globl _cpct_memset
                            101 	.globl _cpct_setInterruptHandler
                            102 	.globl _cpct_disableFirmware
                            103 	.globl _enum_mov
                            104 	.globl _enum_sta
                            105 	.globl _enum_dir
                            106 	.globl _nPObj
                            107 	.globl _objY
                            108 	.globl _objX
                            109 	.globl _nObj
                            110 	.globl _sht
                            111 	.globl _spr
                            112 	.globl _ctlPause
                            113 	.globl _ctlMusic
                            114 	.globl _ctlAbort
                            115 	.globl _ctlRight
                            116 	.globl _ctlLeft
                            117 	.globl _ctlDown
                            118 	.globl _ctlUp
                            119 	.globl _ctMainLoop
                            120 	.globl _ctWizardAnim
                            121 	.globl _nTip
                            122 	.globl _turboMode
                            123 	.globl _ctInactivity
                            124 	.globl _enemyTurn
                            125 	.globl _storeY
                            126 	.globl _storeX
                            127 	.globl _playerKey
                            128 	.globl _doorKey
                            129 	.globl _coinScore
                            130 	.globl _potScore
                            131 	.globl _highScore
                            132 	.globl _score
                            133 	.globl _TwoPlayers
                            134 	.globl _lName
                            135 	.globl _lastNMap
                            136 	.globl _nMap
                            137 	.globl _animRight_Witch
                            138 	.globl _animLeft_Witch
                            139 	.globl _frmWitch
                            140 	.globl _anim_Bat
                            141 	.globl _frmBat
                            142 	.globl _animRight_Ghost
                            143 	.globl _animLeft_Ghost
                            144 	.globl _animDown_Ghost
                            145 	.globl _animUp_Ghost
                            146 	.globl _frmGhost
                            147 	.globl _animRight_Knight
                            148 	.globl _animLeft_Knight
                            149 	.globl _animDown_Knight
                            150 	.globl _animUp_Knight
                            151 	.globl _frmKnight
                            152 	.globl _animRight_Sentinel
                            153 	.globl _animLeft_Sentinel
                            154 	.globl _animDown_Sentinel
                            155 	.globl _animUp_Sentinel
                            156 	.globl _frmSentinel
                            157 	.globl _animRight_Sorcerer2
                            158 	.globl _animLeft_Sorcerer2
                            159 	.globl _animDown_Sorcerer2
                            160 	.globl _animUp_Sorcerer2
                            161 	.globl _frmSorcerer2
                            162 	.globl _animRight_Sorcerer1
                            163 	.globl _animLeft_Sorcerer1
                            164 	.globl _animDown_Sorcerer1
                            165 	.globl _animUp_Sorcerer1
                            166 	.globl _frmSorcerer1
                            167 	.globl _PrintObject
                            168 	.globl _PrintSprite
                            169 	.globl _SpriteCollision
                            170 	.globl _MakeDuel
                            171 	.globl _ResetData
                            172 	.globl _InitGame
                            173 	.globl _GameOver
                            174 ;--------------------------------------------------------
                            175 ; special function registers
                            176 ;--------------------------------------------------------
                            177 ;--------------------------------------------------------
                            178 ; ram data
                            179 ;--------------------------------------------------------
                            180 	.area _DATA
   0000                     181 _nMap::
   0000                     182 	.ds 1
   0001                     183 _lastNMap::
   0001                     184 	.ds 1
   0002                     185 _lName::
   0002                     186 	.ds 2
   0004                     187 _TwoPlayers::
   0004                     188 	.ds 1
   0005                     189 _score::
   0005                     190 	.ds 4
   0009                     191 _highScore::
   0009                     192 	.ds 2
   000B                     193 _potScore::
   000B                     194 	.ds 2
   000D                     195 _coinScore::
   000D                     196 	.ds 2
   000F                     197 _doorKey::
   000F                     198 	.ds 5
   0014                     199 _playerKey::
   0014                     200 	.ds 5
   0019                     201 _storeX::
   0019                     202 	.ds 1
   001A                     203 _storeY::
   001A                     204 	.ds 1
   001B                     205 _enemyTurn::
   001B                     206 	.ds 1
   001C                     207 _ctInactivity::
   001C                     208 	.ds 2
   001E                     209 _turboMode::
   001E                     210 	.ds 1
   001F                     211 _nTip::
   001F                     212 	.ds 1
   0020                     213 _ctWizardAnim::
   0020                     214 	.ds 1
   0021                     215 _ctMainLoop::
   0021                     216 	.ds 2
   0023                     217 _ctlUp::
   0023                     218 	.ds 4
   0027                     219 _ctlDown::
   0027                     220 	.ds 4
   002B                     221 _ctlLeft::
   002B                     222 	.ds 4
   002F                     223 _ctlRight::
   002F                     224 	.ds 4
   0033                     225 _ctlAbort::
   0033                     226 	.ds 2
   0035                     227 _ctlMusic::
   0035                     228 	.ds 2
   0037                     229 _ctlPause::
   0037                     230 	.ds 2
   0039                     231 _spr::
   0039                     232 	.ds 105
   00A2                     233 _sht::
   00A2                     234 	.ds 5
   00A7                     235 _nObj::
   00A7                     236 	.ds 2
   00A9                     237 _objX::
   00A9                     238 	.ds 2
   00AB                     239 _objY::
   00AB                     240 	.ds 2
   00AD                     241 _nPObj::
   00AD                     242 	.ds 1
   00AE                     243 _enum_dir::
   00AE                     244 	.ds 1
   00AF                     245 _enum_sta::
   00AF                     246 	.ds 1
   00B0                     247 _enum_mov::
   00B0                     248 	.ds 1
   00B1                     249 _Interrupt_nInt_1_147:
   00B1                     250 	.ds 1
                            251 ;--------------------------------------------------------
                            252 ; ram data
                            253 ;--------------------------------------------------------
                            254 	.area _INITIALIZED
                            255 ;--------------------------------------------------------
                            256 ; absolute external ram data
                            257 ;--------------------------------------------------------
                            258 	.area _DABS (ABS)
                            259 ;--------------------------------------------------------
                            260 ; global & static initialisations
                            261 ;--------------------------------------------------------
                            262 	.area _HOME
                            263 	.area _GSINIT
                            264 	.area _GSFINAL
                            265 	.area _GSINIT
                            266 ;--------------------------------------------------------
                            267 ; Home
                            268 ;--------------------------------------------------------
                            269 	.area _HOME
                            270 	.area _HOME
                            271 ;--------------------------------------------------------
                            272 ; code
                            273 ;--------------------------------------------------------
                            274 	.area _CODE
                            275 ;src/main.c:329: cpctm_createTransparentMaskTable(g_maskTable, 0x100, M0, 0);
                            276 ;	---------------------------------
                            277 ; Function dummy_cpct_transparentMaskTable0M0_container
                            278 ; ---------------------------------
   0000                     279 _dummy_cpct_transparentMaskTable0M0_container::
                            280 	.area _g_maskTable_ (ABS) 
   0100                     281 	.org 0x100 
   0100                     282 	 _g_maskTable::
   0100 FF AA 55 00 AA AA   283 	.db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0108 55 00 55 00 00 00   284 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0110 AA AA 00 00 AA AA   285 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0118 00 00 00 00 00 00   286 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0120 55 00 55 00 00 00   287 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0128 55 00 55 00 00 00   288 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0130 00 00 00 00 00 00   289 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0138 00 00 00 00 00 00   290 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0140 AA AA 00 00 AA AA   291 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0148 00 00 00 00 00 00   292 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0150 AA AA 00 00 AA AA   293 	.db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
        00 00
   0158 00 00 00 00 00 00   294 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0160 00 00 00 00 00 00   295 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0168 00 00 00 00 00 00   296 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0170 00 00 00 00 00 00   297 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0178 00 00 00 00 00 00   298 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0180 55 00 55 00 00 00   299 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0188 55 00 55 00 00 00   300 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0190 00 00 00 00 00 00   301 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   0198 00 00 00 00 00 00   302 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A0 55 00 55 00 00 00   303 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01A8 55 00 55 00 00 00   304 	.db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B0 00 00 00 00 00 00   305 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01B8 00 00 00 00 00 00   306 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C0 00 00 00 00 00 00   307 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01C8 00 00 00 00 00 00   308 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D0 00 00 00 00 00 00   309 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01D8 00 00 00 00 00 00   310 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E0 00 00 00 00 00 00   311 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01E8 00 00 00 00 00 00   312 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F0 00 00 00 00 00 00   313 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
   01F8 00 00 00 00 00 00   314 	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        00 00
                            315 	.area _CSEG (REL, CON) 
                            316 ;src/main.c:366: i16 Abs(i16 number) __z88dk_fastcall {
                            317 ;	---------------------------------
                            318 ; Function Abs
                            319 ; ---------------------------------
   0000                     320 _Abs::
                            321 ;src/main.c:367: if (number < 0)
   0000 CB 7C         [ 8]  322 	bit	7, h
   0002 C8            [11]  323 	ret	Z
                            324 ;src/main.c:368: number *= -1;
   0003 AF            [ 4]  325 	xor	a, a
   0004 95            [ 4]  326 	sub	a, l
   0005 6F            [ 4]  327 	ld	l, a
   0006 3E 00         [ 7]  328 	ld	a, #0x00
   0008 9C            [ 4]  329 	sbc	a, h
   0009 67            [ 4]  330 	ld	h, a
                            331 ;src/main.c:369: return (number);
   000A C9            [10]  332 	ret
   000B                     333 _frmSorcerer1:
   000Br00r00               334 	.dw _g_sorcerer1_00
   000Dr00r00               335 	.dw _g_sorcerer1_01
   000Fr00r00               336 	.dw _g_sorcerer1_02
   0011r00r00               337 	.dw _g_sorcerer1_03
   0013r00r00               338 	.dw _g_sorcerer1_04
   0015r00r00               339 	.dw _g_sorcerer1_05
   0017r00r00               340 	.dw _g_sorcerer1_06
   0019r00r00               341 	.dw _g_sorcerer1_07
   001B                     342 _animUp_Sorcerer1:
   001Br0Br00               343 	.dw (_frmSorcerer1 + 0)
   001Dr0Dr00               344 	.dw (_frmSorcerer1 + 2)
   001F                     345 _animDown_Sorcerer1:
   001Fr0Fr00               346 	.dw (_frmSorcerer1 + 4)
   0021r11r00               347 	.dw (_frmSorcerer1 + 6)
   0023                     348 _animLeft_Sorcerer1:
   0023r13r00               349 	.dw (_frmSorcerer1 + 8)
   0025r15r00               350 	.dw (_frmSorcerer1 + 10)
   0027                     351 _animRight_Sorcerer1:
   0027r17r00               352 	.dw (_frmSorcerer1 + 12)
   0029r19r00               353 	.dw (_frmSorcerer1 + 14)
   002B                     354 _frmSorcerer2:
   002Br00r00               355 	.dw _g_sorcerer2_00
   002Dr00r00               356 	.dw _g_sorcerer2_01
   002Fr00r00               357 	.dw _g_sorcerer2_02
   0031r00r00               358 	.dw _g_sorcerer2_03
   0033r00r00               359 	.dw _g_sorcerer2_04
   0035r00r00               360 	.dw _g_sorcerer2_05
   0037r00r00               361 	.dw _g_sorcerer2_06
   0039r00r00               362 	.dw _g_sorcerer2_07
   003B                     363 _animUp_Sorcerer2:
   003Br2Br00               364 	.dw (_frmSorcerer2 + 0)
   003Dr2Dr00               365 	.dw (_frmSorcerer2 + 2)
   003F                     366 _animDown_Sorcerer2:
   003Fr2Fr00               367 	.dw (_frmSorcerer2 + 4)
   0041r31r00               368 	.dw (_frmSorcerer2 + 6)
   0043                     369 _animLeft_Sorcerer2:
   0043r33r00               370 	.dw (_frmSorcerer2 + 8)
   0045r35r00               371 	.dw (_frmSorcerer2 + 10)
   0047                     372 _animRight_Sorcerer2:
   0047r37r00               373 	.dw (_frmSorcerer2 + 12)
   0049r39r00               374 	.dw (_frmSorcerer2 + 14)
   004B                     375 _frmSentinel:
   004Br00r00               376 	.dw _g_sentinel_0
   004Dr00r00               377 	.dw _g_sentinel_1
   004Fr00r00               378 	.dw _g_sentinel_2
   0051r00r00               379 	.dw _g_sentinel_3
   0053r00r00               380 	.dw _g_sentinel_4
   0055r00r00               381 	.dw _g_sentinel_5
   0057r00r00               382 	.dw _g_sentinel_6
   0059r00r00               383 	.dw _g_sentinel_7
   005B                     384 _animUp_Sentinel:
   005Br4Br00               385 	.dw (_frmSentinel + 0)
   005Dr4Dr00               386 	.dw (_frmSentinel + 2)
   005F                     387 _animDown_Sentinel:
   005Fr4Fr00               388 	.dw (_frmSentinel + 4)
   0061r51r00               389 	.dw (_frmSentinel + 6)
   0063                     390 _animLeft_Sentinel:
   0063r53r00               391 	.dw (_frmSentinel + 8)
   0065r55r00               392 	.dw (_frmSentinel + 10)
   0067                     393 _animRight_Sentinel:
   0067r57r00               394 	.dw (_frmSentinel + 12)
   0069r59r00               395 	.dw (_frmSentinel + 14)
   006B                     396 _frmKnight:
   006Br00r00               397 	.dw _g_knight_0
   006Dr00r00               398 	.dw _g_knight_1
   006Fr00r00               399 	.dw _g_knight_2
   0071r00r00               400 	.dw _g_knight_3
   0073r00r00               401 	.dw _g_knight_4
   0075r00r00               402 	.dw _g_knight_5
   0077r00r00               403 	.dw _g_knight_6
   0079r00r00               404 	.dw _g_knight_7
   007B                     405 _animUp_Knight:
   007Br6Br00               406 	.dw (_frmKnight + 0)
   007Dr6Dr00               407 	.dw (_frmKnight + 2)
   007F                     408 _animDown_Knight:
   007Fr6Fr00               409 	.dw (_frmKnight + 4)
   0081r71r00               410 	.dw (_frmKnight + 6)
   0083                     411 _animLeft_Knight:
   0083r73r00               412 	.dw (_frmKnight + 8)
   0085r75r00               413 	.dw (_frmKnight + 10)
   0087                     414 _animRight_Knight:
   0087r77r00               415 	.dw (_frmKnight + 12)
   0089r79r00               416 	.dw (_frmKnight + 14)
   008B                     417 _frmGhost:
   008Br00r00               418 	.dw _g_ghost_0
   008Dr00r00               419 	.dw _g_ghost_1
   008Fr00r00               420 	.dw _g_ghost_2
   0091r00r00               421 	.dw _g_ghost_3
   0093r00r00               422 	.dw _g_ghost_4
   0095r00r00               423 	.dw _g_ghost_5
   0097r00r00               424 	.dw _g_ghost_6
   0099r00r00               425 	.dw _g_ghost_7
   009B                     426 _animUp_Ghost:
   009Br8Br00               427 	.dw (_frmGhost + 0)
   009Dr8Dr00               428 	.dw (_frmGhost + 2)
   009F                     429 _animDown_Ghost:
   009Fr8Fr00               430 	.dw (_frmGhost + 4)
   00A1r91r00               431 	.dw (_frmGhost + 6)
   00A3                     432 _animLeft_Ghost:
   00A3r93r00               433 	.dw (_frmGhost + 8)
   00A5r95r00               434 	.dw (_frmGhost + 10)
   00A7                     435 _animRight_Ghost:
   00A7r97r00               436 	.dw (_frmGhost + 12)
   00A9r99r00               437 	.dw (_frmGhost + 14)
   00AB                     438 _frmBat:
   00ABr00r00               439 	.dw _g_bat_0
   00ADr00r00               440 	.dw _g_bat_1
   00AF                     441 _anim_Bat:
   00AFrABr00               442 	.dw (_frmBat + 0)
   00B1rADr00               443 	.dw (_frmBat + 2)
   00B3                     444 _frmWitch:
   00B3r00r00               445 	.dw _g_witch_0
   00B5r00r00               446 	.dw _g_witch_1
   00B7r00r00               447 	.dw _g_witch_2
   00B9r00r00               448 	.dw _g_witch_3
   00BB                     449 _animLeft_Witch:
   00BBrB3r00               450 	.dw (_frmWitch + 0)
   00BDrB5r00               451 	.dw (_frmWitch + 2)
   00BF                     452 _animRight_Witch:
   00BFrB7r00               453 	.dw (_frmWitch + 4)
   00C1rB9r00               454 	.dw (_frmWitch + 6)
                            455 ;src/main.c:374: u8 Strlen(const unsigned char *str) __z88dk_fastcall {
                            456 ;	---------------------------------
                            457 ; Function Strlen
                            458 ; ---------------------------------
   00C3                     459 _Strlen::
                            460 ;src/main.c:376: for (s = str; *s; ++s);
   00C3 4D            [ 4]  461 	ld	c,l
   00C4 44            [ 4]  462 	ld	b,h
   00C5                     463 00103$:
   00C5 7E            [ 7]  464 	ld	a, (hl)
   00C6 B7            [ 4]  465 	or	a, a
   00C7 28 03         [12]  466 	jr	Z,00101$
   00C9 23            [ 6]  467 	inc	hl
   00CA 18 F9         [12]  468 	jr	00103$
   00CC                     469 00101$:
                            470 ;src/main.c:377: return (s - str);
   00CC BF            [ 4]  471 	cp	a, a
   00CD ED 42         [15]  472 	sbc	hl, bc
   00CF C9            [10]  473 	ret
                            474 ;src/main.c:382: char* Itoa(u16 value, char* result, int base) {    
                            475 ;	---------------------------------
                            476 ; Function Itoa
                            477 ; ---------------------------------
   00D0                     478 _Itoa::
   00D0 DD E5         [15]  479 	push	ix
   00D2 DD 21 00 00   [14]  480 	ld	ix,#0
   00D6 DD 39         [15]  481 	add	ix,sp
   00D8 21 F9 FF      [10]  482 	ld	hl, #-7
   00DB 39            [11]  483 	add	hl, sp
   00DC F9            [ 6]  484 	ld	sp, hl
                            485 ;src/main.c:384: char* ptr = result, *ptr1 = result, tmp_char;
   00DD DD 5E 06      [19]  486 	ld	e,6 (ix)
   00E0 DD 56 07      [19]  487 	ld	d,7 (ix)
   00E3 DD 73 FA      [19]  488 	ld	-6 (ix), e
   00E6 DD 72 FB      [19]  489 	ld	-5 (ix), d
                            490 ;src/main.c:386: if (base < 2 || base > 36) { 
   00E9 DD 7E 08      [19]  491 	ld	a, 8 (ix)
   00EC D6 02         [ 7]  492 	sub	a, #0x02
   00EE DD 7E 09      [19]  493 	ld	a, 9 (ix)
   00F1 17            [ 4]  494 	rla
   00F2 3F            [ 4]  495 	ccf
   00F3 1F            [ 4]  496 	rra
   00F4 DE 80         [ 7]  497 	sbc	a, #0x80
   00F6 38 12         [12]  498 	jr	C,00101$
   00F8 3E 24         [ 7]  499 	ld	a, #0x24
   00FA DD BE 08      [19]  500 	cp	a, 8 (ix)
   00FD 3E 00         [ 7]  501 	ld	a, #0x00
   00FF DD 9E 09      [19]  502 	sbc	a, 9 (ix)
   0102 E2r07r01      [10]  503 	jp	PO, 00140$
   0105 EE 80         [ 7]  504 	xor	a, #0x80
   0107                     505 00140$:
   0107 F2r10r01      [10]  506 	jp	P, 00115$
   010A                     507 00101$:
                            508 ;src/main.c:387: *result = '\0'; 
   010A AF            [ 4]  509 	xor	a, a
   010B 12            [ 7]  510 	ld	(de), a
                            511 ;src/main.c:388: return result; 
   010C EB            [ 4]  512 	ex	de,hl
   010D C3rB1r01      [10]  513 	jp	00112$
                            514 ;src/main.c:391: do {
   0110                     515 00115$:
   0110 DD 73 FE      [19]  516 	ld	-2 (ix), e
   0113 DD 72 FF      [19]  517 	ld	-1 (ix), d
   0116                     518 00104$:
                            519 ;src/main.c:392: tmp_value = value;
   0116 DD 7E 04      [19]  520 	ld	a, 4 (ix)
   0119 DD 77 FC      [19]  521 	ld	-4 (ix), a
   011C DD 7E 05      [19]  522 	ld	a, 5 (ix)
   011F DD 77 FD      [19]  523 	ld	-3 (ix), a
                            524 ;src/main.c:393: value /= base;
   0122 DD 4E 08      [19]  525 	ld	c,8 (ix)
   0125 DD 46 09      [19]  526 	ld	b,9 (ix)
   0128 C5            [11]  527 	push	bc
   0129 DD 6E 04      [19]  528 	ld	l,4 (ix)
   012C DD 66 05      [19]  529 	ld	h,5 (ix)
   012F E5            [11]  530 	push	hl
   0130 CDr00r00      [17]  531 	call	__divuint
   0133 F1            [10]  532 	pop	af
   0134 F1            [10]  533 	pop	af
   0135 DD 75 04      [19]  534 	ld	4 (ix), l
   0138 DD 74 05      [19]  535 	ld	5 (ix), h
                            536 ;src/main.c:394: *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
   013B DD 4E FC      [19]  537 	ld	c, -4 (ix)
   013E DD 5E 04      [19]  538 	ld	e, 4 (ix)
   0141 DD 66 08      [19]  539 	ld	h, 8 (ix)
   0144 2E 00         [ 7]  540 	ld	l, #0x00
   0146 55            [ 4]  541 	ld	d, l
   0147 06 08         [ 7]  542 	ld	b, #0x08
   0149                     543 00141$:
   0149 29            [11]  544 	add	hl, hl
   014A 30 01         [12]  545 	jr	NC,00142$
   014C 19            [11]  546 	add	hl, de
   014D                     547 00142$:
   014D 10 FA         [13]  548 	djnz	00141$
   014F 79            [ 4]  549 	ld	a, c
   0150 95            [ 4]  550 	sub	a, l
   0151 C6 23         [ 7]  551 	add	a, #0x23
   0153 4F            [ 4]  552 	ld	c, a
   0154 17            [ 4]  553 	rla
   0155 9F            [ 4]  554 	sbc	a, a
   0156 47            [ 4]  555 	ld	b, a
   0157 21rB6r01      [10]  556 	ld	hl, #___str_0
   015A 09            [11]  557 	add	hl, bc
   015B 4E            [ 7]  558 	ld	c, (hl)
   015C DD 6E FE      [19]  559 	ld	l,-2 (ix)
   015F DD 66 FF      [19]  560 	ld	h,-1 (ix)
   0162 71            [ 7]  561 	ld	(hl), c
   0163 DD 34 FE      [23]  562 	inc	-2 (ix)
   0166 20 03         [12]  563 	jr	NZ,00143$
   0168 DD 34 FF      [23]  564 	inc	-1 (ix)
   016B                     565 00143$:
                            566 ;src/main.c:395: } while (value);
   016B DD 7E 05      [19]  567 	ld	a, 5 (ix)
   016E DD B6 04      [19]  568 	or	a,4 (ix)
   0171 20 A3         [12]  569 	jr	NZ,00104$
                            570 ;src/main.c:397: if (tmp_value < 0) 
   0173 DD 4E FE      [19]  571 	ld	c,-2 (ix)
   0176 DD 46 FF      [19]  572 	ld	b,-1 (ix)
   0179 DD CB FD 7E   [20]  573 	bit	7, -3 (ix)
   017D 28 0F         [12]  574 	jr	Z,00108$
                            575 ;src/main.c:398: *ptr++ = '-';
   017F DD 6E FE      [19]  576 	ld	l,-2 (ix)
   0182 DD 66 FF      [19]  577 	ld	h,-1 (ix)
   0185 36 2D         [10]  578 	ld	(hl), #0x2d
   0187 DD 4E FE      [19]  579 	ld	c,-2 (ix)
   018A DD 46 FF      [19]  580 	ld	b,-1 (ix)
   018D 03            [ 6]  581 	inc	bc
   018E                     582 00108$:
                            583 ;src/main.c:399: *ptr-- = '\0';
   018E AF            [ 4]  584 	xor	a, a
   018F 02            [ 7]  585 	ld	(bc), a
   0190 0B            [ 6]  586 	dec	bc
                            587 ;src/main.c:401: while(ptr1 < ptr) {
   0191 DD 5E FA      [19]  588 	ld	e,-6 (ix)
   0194 DD 56 FB      [19]  589 	ld	d,-5 (ix)
   0197                     590 00109$:
   0197 7B            [ 4]  591 	ld	a, e
   0198 91            [ 4]  592 	sub	a, c
   0199 7A            [ 4]  593 	ld	a, d
   019A 98            [ 4]  594 	sbc	a, b
   019B 30 0E         [12]  595 	jr	NC,00111$
                            596 ;src/main.c:402: tmp_char = *ptr;
   019D 0A            [ 7]  597 	ld	a, (bc)
   019E DD 77 F9      [19]  598 	ld	-7 (ix), a
                            599 ;src/main.c:403: *ptr--= *ptr1;
   01A1 1A            [ 7]  600 	ld	a, (de)
   01A2 02            [ 7]  601 	ld	(bc), a
   01A3 0B            [ 6]  602 	dec	bc
                            603 ;src/main.c:404: *ptr1++ = tmp_char;
   01A4 DD 7E F9      [19]  604 	ld	a, -7 (ix)
   01A7 12            [ 7]  605 	ld	(de), a
   01A8 13            [ 6]  606 	inc	de
   01A9 18 EC         [12]  607 	jr	00109$
   01AB                     608 00111$:
                            609 ;src/main.c:407: return result;
   01AB DD 6E 06      [19]  610 	ld	l,6 (ix)
   01AE DD 66 07      [19]  611 	ld	h,7 (ix)
   01B1                     612 00112$:
   01B1 DD F9         [10]  613 	ld	sp, ix
   01B3 DD E1         [14]  614 	pop	ix
   01B5 C9            [10]  615 	ret
   01B6                     616 ___str_0:
   01B6 7A 79 78 77 76 75   617 	.ascii "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmno"
        74 73 72 71 70 6F
        6E 6D 6C 6B 6A 69
        68 67 66 65 64 63
        62 61 39 38 37 36
        35 34 33 32 31 30
        31 32 33 34 35 36
        37 38 39 61 62 63
        64 65 66 67 68 69
        6A 6B 6C 6D 6E 6F
   01F2 70 71 72 73 74 75   618 	.ascii "pqrstuvwxyz"
        76 77 78 79 7A
   01FD 00                  619 	.db 0x00
                            620 ;src/main.c:412: void Pause(u16 value) __z88dk_fastcall {
                            621 ;	---------------------------------
                            622 ; Function Pause
                            623 ; ---------------------------------
   01FE                     624 _Pause::
                            625 ;src/main.c:414: for(i=0; i < value; i++) {
   01FE 01 00 00      [10]  626 	ld	bc, #0x0000
   0201                     627 00103$:
   0201 79            [ 4]  628 	ld	a, c
   0202 95            [ 4]  629 	sub	a, l
   0203 78            [ 4]  630 	ld	a, b
   0204 9C            [ 4]  631 	sbc	a, h
   0205 D0            [11]  632 	ret	NC
                            633 ;src/main.c:417: __endasm;
   0206 76            [ 4]  634 	halt
                            635 ;src/main.c:414: for(i=0; i < value; i++) {
   0207 03            [ 6]  636 	inc	bc
   0208 18 F7         [12]  637 	jr	00103$
                            638 ;src/main.c:424: void Interrupt() {
                            639 ;	---------------------------------
                            640 ; Function Interrupt
                            641 ; ---------------------------------
   020A                     642 _Interrupt::
                            643 ;src/main.c:427: if (++nInt == 6) {
   020A FD 21rB1r00   [14]  644 	ld	iy, #_Interrupt_nInt_1_147
   020E FD 34 00      [23]  645 	inc	0 (iy)
   0211 FD 7E 00      [19]  646 	ld	a, 0 (iy)
   0214 D6 06         [ 7]  647 	sub	a, #0x06
   0216 C0            [11]  648 	ret	NZ
                            649 ;src/main.c:428: cpct_scanKeyboard_if();
   0217 CDr00r00      [17]  650 	call	_cpct_scanKeyboard_if
                            651 ;src/main.c:429: nInt = 0;
   021A 21rB1r00      [10]  652 	ld	hl,#_Interrupt_nInt_1_147 + 0
   021D 36 00         [10]  653 	ld	(hl), #0x00
   021F C9            [10]  654 	ret
                            655 ;src/main.c:447: void ClearScreen() {
                            656 ;	---------------------------------
                            657 ; Function ClearScreen
                            658 ; ---------------------------------
   0220                     659 _ClearScreen::
                            660 ;src/main.c:448: cpct_memset(CPCT_VMEM_START, cpct_px2byteM0(BG_COLOR, BG_COLOR), 16384);
   0220 21 01 01      [10]  661 	ld	hl, #0x0101
   0223 E5            [11]  662 	push	hl
   0224 CDr00r00      [17]  663 	call	_cpct_px2byteM0
   0227 45            [ 4]  664 	ld	b, l
   0228 21 00 40      [10]  665 	ld	hl, #0x4000
   022B E5            [11]  666 	push	hl
   022C C5            [11]  667 	push	bc
   022D 33            [ 6]  668 	inc	sp
   022E 26 C0         [ 7]  669 	ld	h, #0xc0
   0230 E5            [11]  670 	push	hl
   0231 CDr00r00      [17]  671 	call	_cpct_memset
   0234 C9            [10]  672 	ret
                            673 ;src/main.c:453: u8* GetTileNum(u8 x, u8 y) {
                            674 ;	---------------------------------
                            675 ; Function GetTileNum
                            676 ; ---------------------------------
   0235                     677 _GetTileNum::
   0235 DD E5         [15]  678 	push	ix
   0237 DD 21 00 00   [14]  679 	ld	ix,#0
   023B DD 39         [15]  680 	add	ix,sp
                            681 ;src/main.c:454: return UNPACKED_MAP_INI + (y - ORIG_MAP_Y) / 4 * MAP_W + x / 2;	
   023D DD 4E 05      [19]  682 	ld	c, 5 (ix)
   0240 06 00         [ 7]  683 	ld	b, #0x00
   0242 79            [ 4]  684 	ld	a, c
   0243 C6 E0         [ 7]  685 	add	a, #0xe0
   0245 5F            [ 4]  686 	ld	e, a
   0246 78            [ 4]  687 	ld	a, b
   0247 CE FF         [ 7]  688 	adc	a, #0xff
   0249 57            [ 4]  689 	ld	d, a
   024A 6B            [ 4]  690 	ld	l, e
   024B 62            [ 4]  691 	ld	h, d
   024C CB 7A         [ 8]  692 	bit	7, d
   024E 28 04         [12]  693 	jr	Z,00103$
   0250 21 E3 FF      [10]  694 	ld	hl, #0xffe3
   0253 09            [11]  695 	add	hl, bc
   0254                     696 00103$:
   0254 CB 2C         [ 8]  697 	sra	h
   0256 CB 1D         [ 8]  698 	rr	l
   0258 CB 2C         [ 8]  699 	sra	h
   025A CB 1D         [ 8]  700 	rr	l
   025C 4D            [ 4]  701 	ld	c, l
   025D 44            [ 4]  702 	ld	b, h
   025E 29            [11]  703 	add	hl, hl
   025F 29            [11]  704 	add	hl, hl
   0260 09            [11]  705 	add	hl, bc
   0261 29            [11]  706 	add	hl, hl
   0262 29            [11]  707 	add	hl, hl
   0263 29            [11]  708 	add	hl, hl
   0264 01 71 0F      [10]  709 	ld	bc, #0x0f71
   0267 09            [11]  710 	add	hl, bc
   0268 DD 4E 04      [19]  711 	ld	c, 4 (ix)
   026B CB 39         [ 8]  712 	srl	c
   026D 59            [ 4]  713 	ld	e,c
   026E 16 00         [ 7]  714 	ld	d,#0x00
   0270 19            [11]  715 	add	hl, de
   0271 DD E1         [14]  716 	pop	ix
   0273 C9            [10]  717 	ret
                            718 ;src/main.c:459: u8 OnBackground(u8 x, u8 y) {
                            719 ;	---------------------------------
                            720 ; Function OnBackground
                            721 ; ---------------------------------
   0274                     722 _OnBackground::
                            723 ;src/main.c:460: if (*GetTileNum(x+3, y+8) >= TILESET_BLOCKERS) 
   0274 21 03 00      [10]  724 	ld	hl, #3+0
   0277 39            [11]  725 	add	hl, sp
   0278 7E            [ 7]  726 	ld	a, (hl)
   0279 C6 08         [ 7]  727 	add	a, #0x08
   027B 47            [ 4]  728 	ld	b, a
   027C 21 02 00      [10]  729 	ld	hl, #2+0
   027F 39            [11]  730 	add	hl, sp
   0280 56            [ 7]  731 	ld	d, (hl)
   0281 14            [ 4]  732 	inc	d
   0282 14            [ 4]  733 	inc	d
   0283 14            [ 4]  734 	inc	d
   0284 4A            [ 4]  735 	ld	c, d
   0285 C5            [11]  736 	push	bc
   0286 CDr35r02      [17]  737 	call	_GetTileNum
   0289 F1            [10]  738 	pop	af
   028A 7E            [ 7]  739 	ld	a, (hl)
   028B D6 2D         [ 7]  740 	sub	a, #0x2d
   028D 38 03         [12]  741 	jr	C,00102$
                            742 ;src/main.c:461: return FALSE;
   028F 2E 00         [ 7]  743 	ld	l, #0x00
   0291 C9            [10]  744 	ret
   0292                     745 00102$:
                            746 ;src/main.c:462: return TRUE;
   0292 2E 01         [ 7]  747 	ld	l, #0x01
   0294 C9            [10]  748 	ret
                            749 ;src/main.c:467: void PrintMap() {
                            750 ;	---------------------------------
                            751 ; Function PrintMap
                            752 ; ---------------------------------
   0295                     753 _PrintMap::
                            754 ;src/main.c:468: cpct_etm_drawTilemap2x4(MAP_W, MAP_H, 
   0295 21 71 0F      [10]  755 	ld	hl, #0x0f71
   0298 E5            [11]  756 	push	hl
   0299 21 40 C1      [10]  757 	ld	hl, #0xc140
   029C E5            [11]  758 	push	hl
   029D 21 2A 28      [10]  759 	ld	hl, #0x282a
   02A0 E5            [11]  760 	push	hl
   02A1 2E 00         [ 7]  761 	ld	l, #0x00
   02A3 E5            [11]  762 	push	hl
   02A4 AF            [ 4]  763 	xor	a, a
   02A5 F5            [11]  764 	push	af
   02A6 33            [ 6]  765 	inc	sp
   02A7 CDr00r00      [17]  766 	call	_cpct_etm_drawTileBox2x4
   02AA C9            [10]  767 	ret
                            768 ;src/main.c:475: void PrintNumber(u16 num, u8 len, u8 x, u8 y, u8 prevDel) { 
                            769 ;	---------------------------------
                            770 ; Function PrintNumber
                            771 ; ---------------------------------
   02AB                     772 _PrintNumber::
   02AB DD E5         [15]  773 	push	ix
   02AD DD 21 00 00   [14]  774 	ld	ix,#0
   02B1 DD 39         [15]  775 	add	ix,sp
   02B3 21 F5 FF      [10]  776 	ld	hl, #-11
   02B6 39            [11]  777 	add	hl, sp
   02B7 F9            [ 6]  778 	ld	sp, hl
                            779 ;src/main.c:481: Itoa(num, txt, 10);    
   02B8 21 03 00      [10]  780 	ld	hl, #0x0003
   02BB 39            [11]  781 	add	hl, sp
   02BC 4D            [ 4]  782 	ld	c, l
   02BD 44            [ 4]  783 	ld	b, h
   02BE 59            [ 4]  784 	ld	e, c
   02BF 50            [ 4]  785 	ld	d, b
   02C0 C5            [11]  786 	push	bc
   02C1 21 0A 00      [10]  787 	ld	hl, #0x000a
   02C4 E5            [11]  788 	push	hl
   02C5 D5            [11]  789 	push	de
   02C6 DD 6E 04      [19]  790 	ld	l,4 (ix)
   02C9 DD 66 05      [19]  791 	ld	h,5 (ix)
   02CC E5            [11]  792 	push	hl
   02CD CDrD0r00      [17]  793 	call	_Itoa
   02D0 21 06 00      [10]  794 	ld	hl, #6
   02D3 39            [11]  795 	add	hl, sp
   02D4 F9            [ 6]  796 	ld	sp, hl
   02D5 C1            [10]  797 	pop	bc
                            798 ;src/main.c:482: zeros = len - Strlen(txt);
   02D6 69            [ 4]  799 	ld	l, c
   02D7 60            [ 4]  800 	ld	h, b
   02D8 C5            [11]  801 	push	bc
   02D9 CDrC3r00      [17]  802 	call	_Strlen
   02DC C1            [10]  803 	pop	bc
   02DD DD 7E 06      [19]  804 	ld	a, 6 (ix)
   02E0 95            [ 4]  805 	sub	a, l
   02E1 DD 77 F7      [19]  806 	ld	-9 (ix), a
                            807 ;src/main.c:483: nAux = txt[pos];
   02E4 0A            [ 7]  808 	ld	a, (bc)
   02E5 DD 77 F5      [19]  809 	ld	-11 (ix), a
                            810 ;src/main.c:485: while(nAux != '\0')	{	
   02E8 DD 36 F6 00   [19]  811 	ld	-10 (ix), #0x00
   02EC                     812 00103$:
   02EC DD 7E F5      [19]  813 	ld	a, -11 (ix)
   02EF B7            [ 4]  814 	or	a, a
   02F0 CAr75r03      [10]  815 	jp	Z, 00106$
                            816 ;src/main.c:486: u8* ptr = cpct_getScreenPtr(CPCT_VMEM_START, (zeros + pos) * FNT_W + x, y);
   02F3 DD 7E F7      [19]  817 	ld	a, -9 (ix)
   02F6 DD 86 F6      [19]  818 	add	a, -10 (ix)
   02F9 5F            [ 4]  819 	ld	e, a
   02FA 87            [ 4]  820 	add	a, a
   02FB 83            [ 4]  821 	add	a, e
   02FC 5F            [ 4]  822 	ld	e,a
   02FD DD 86 07      [19]  823 	add	a, 7 (ix)
   0300 57            [ 4]  824 	ld	d, a
   0301 C5            [11]  825 	push	bc
   0302 DD 7E 08      [19]  826 	ld	a, 8 (ix)
   0305 F5            [11]  827 	push	af
   0306 33            [ 6]  828 	inc	sp
   0307 D5            [11]  829 	push	de
   0308 33            [ 6]  830 	inc	sp
   0309 21 00 C0      [10]  831 	ld	hl, #0xc000
   030C E5            [11]  832 	push	hl
   030D CDr00r00      [17]  833 	call	_cpct_getScreenPtr
   0310 C1            [10]  834 	pop	bc
                            835 ;src/main.c:488: cpct_drawSolidBox(ptr, cpct_px2byteM0(BG_COLOR, BG_COLOR), FNT_W, FNT_H); // previous deletion
   0311 DD 75 FE      [19]  836 	ld	-2 (ix), l
   0314 DD 74 FF      [19]  837 	ld	-1 (ix), h
                            838 ;src/main.c:487: if (prevDel) 
   0317 DD 7E 09      [19]  839 	ld	a, 9 (ix)
   031A B7            [ 4]  840 	or	a, a
   031B 28 1C         [12]  841 	jr	Z,00102$
                            842 ;src/main.c:488: cpct_drawSolidBox(ptr, cpct_px2byteM0(BG_COLOR, BG_COLOR), FNT_W, FNT_H); // previous deletion
   031D C5            [11]  843 	push	bc
   031E 21 01 01      [10]  844 	ld	hl, #0x0101
   0321 E5            [11]  845 	push	hl
   0322 CDr00r00      [17]  846 	call	_cpct_px2byteM0
   0325 C1            [10]  847 	pop	bc
   0326 26 00         [ 7]  848 	ld	h, #0x00
   0328 C5            [11]  849 	push	bc
   0329 11 03 08      [10]  850 	ld	de, #0x0803
   032C D5            [11]  851 	push	de
   032D E5            [11]  852 	push	hl
   032E DD 6E FE      [19]  853 	ld	l,-2 (ix)
   0331 DD 66 FF      [19]  854 	ld	h,-1 (ix)
   0334 E5            [11]  855 	push	hl
   0335 CDr00r00      [17]  856 	call	_cpct_drawSolidBox
   0338 C1            [10]  857 	pop	bc
   0339                     858 00102$:
                            859 ;src/main.c:489: cpct_drawSpriteMaskedAlignedTable(g_font[nAux - 48], ptr, FNT_W, FNT_H, g_maskTable);
   0339 DD 7E F5      [19]  860 	ld	a, -11 (ix)
   033C 16 00         [ 7]  861 	ld	d, #0x00
   033E C6 D0         [ 7]  862 	add	a, #0xd0
   0340 5F            [ 4]  863 	ld	e, a
   0341 7A            [ 4]  864 	ld	a, d
   0342 CE FF         [ 7]  865 	adc	a, #0xff
   0344 57            [ 4]  866 	ld	d, a
   0345 6B            [ 4]  867 	ld	l, e
   0346 62            [ 4]  868 	ld	h, d
   0347 29            [11]  869 	add	hl, hl
   0348 19            [11]  870 	add	hl, de
   0349 29            [11]  871 	add	hl, hl
   034A 29            [11]  872 	add	hl, hl
   034B 29            [11]  873 	add	hl, hl
   034C 11r00r00      [10]  874 	ld	de, #_g_font
   034F 19            [11]  875 	add	hl, de
   0350 C5            [11]  876 	push	bc
   0351 11r00r01      [10]  877 	ld	de, #_g_maskTable
   0354 D5            [11]  878 	push	de
   0355 11 03 08      [10]  879 	ld	de, #0x0803
   0358 D5            [11]  880 	push	de
   0359 DD 5E FE      [19]  881 	ld	e,-2 (ix)
   035C DD 56 FF      [19]  882 	ld	d,-1 (ix)
   035F D5            [11]  883 	push	de
   0360 E5            [11]  884 	push	hl
   0361 CDr00r00      [17]  885 	call	_cpct_drawSpriteMaskedAlignedTable
   0364 C1            [10]  886 	pop	bc
                            887 ;src/main.c:490: nAux = txt[++pos];
   0365 DD 34 F6      [23]  888 	inc	-10 (ix)
   0368 DD 6E F6      [19]  889 	ld	l,-10 (ix)
   036B 26 00         [ 7]  890 	ld	h,#0x00
   036D 09            [11]  891 	add	hl, bc
   036E 7E            [ 7]  892 	ld	a, (hl)
   036F DD 77 F5      [19]  893 	ld	-11 (ix), a
   0372 C3rECr02      [10]  894 	jp	00103$
   0375                     895 00106$:
   0375 DD F9         [10]  896 	ld	sp, ix
   0377 DD E1         [14]  897 	pop	ix
   0379 C9            [10]  898 	ret
                            899 ;src/main.c:496: void PrintText(u8 txt[], u8 x, u8 y, u8 prevDel) {
                            900 ;	---------------------------------
                            901 ; Function PrintText
                            902 ; ---------------------------------
   037A                     903 _PrintText::
   037A DD E5         [15]  904 	push	ix
   037C DD 21 00 00   [14]  905 	ld	ix,#0
   0380 DD 39         [15]  906 	add	ix,sp
   0382 F5            [11]  907 	push	af
   0383 F5            [11]  908 	push	af
                            909 ;src/main.c:498: u8 car = txt[pos];
   0384 DD 4E 04      [19]  910 	ld	c,4 (ix)
   0387 DD 46 05      [19]  911 	ld	b,5 (ix)
   038A 0A            [ 7]  912 	ld	a, (bc)
   038B DD 77 FD      [19]  913 	ld	-3 (ix), a
                            914 ;src/main.c:500: while(car != '\0') { // "@" = blank    ";" = -   ">" = !!   "[" = ,
   038E DD 36 FC 00   [19]  915 	ld	-4 (ix), #0x00
   0392                     916 00103$:
   0392 DD 7E FD      [19]  917 	ld	a, -3 (ix)
   0395 B7            [ 4]  918 	or	a, a
   0396 CAr18r04      [10]  919 	jp	Z, 00106$
                            920 ;src/main.c:501: u8* ptr = cpct_getScreenPtr(CPCT_VMEM_START, (pos * FNT_W) + x, y);
   0399 DD 6E FC      [19]  921 	ld	l, -4 (ix)
   039C 5D            [ 4]  922 	ld	e, l
   039D 29            [11]  923 	add	hl, hl
   039E 19            [11]  924 	add	hl, de
   039F 7D            [ 4]  925 	ld	a, l
   03A0 DD 86 06      [19]  926 	add	a, 6 (ix)
   03A3 57            [ 4]  927 	ld	d, a
   03A4 C5            [11]  928 	push	bc
   03A5 DD 7E 07      [19]  929 	ld	a, 7 (ix)
   03A8 F5            [11]  930 	push	af
   03A9 33            [ 6]  931 	inc	sp
   03AA D5            [11]  932 	push	de
   03AB 33            [ 6]  933 	inc	sp
   03AC 21 00 C0      [10]  934 	ld	hl, #0xc000
   03AF E5            [11]  935 	push	hl
   03B0 CDr00r00      [17]  936 	call	_cpct_getScreenPtr
   03B3 C1            [10]  937 	pop	bc
                            938 ;src/main.c:503: cpct_drawSolidBox(ptr, cpct_px2byteM0(BG_COLOR, BG_COLOR), FNT_W, FNT_H); // previous deletion
   03B4 DD 75 FE      [19]  939 	ld	-2 (ix), l
   03B7 DD 74 FF      [19]  940 	ld	-1 (ix), h
                            941 ;src/main.c:502: if (prevDel) 
   03BA DD 7E 08      [19]  942 	ld	a, 8 (ix)
   03BD B7            [ 4]  943 	or	a, a
   03BE 28 1C         [12]  944 	jr	Z,00102$
                            945 ;src/main.c:503: cpct_drawSolidBox(ptr, cpct_px2byteM0(BG_COLOR, BG_COLOR), FNT_W, FNT_H); // previous deletion
   03C0 C5            [11]  946 	push	bc
   03C1 21 01 01      [10]  947 	ld	hl, #0x0101
   03C4 E5            [11]  948 	push	hl
   03C5 CDr00r00      [17]  949 	call	_cpct_px2byteM0
   03C8 C1            [10]  950 	pop	bc
   03C9 26 00         [ 7]  951 	ld	h, #0x00
   03CB C5            [11]  952 	push	bc
   03CC 11 03 08      [10]  953 	ld	de, #0x0803
   03CF D5            [11]  954 	push	de
   03D0 E5            [11]  955 	push	hl
   03D1 DD 6E FE      [19]  956 	ld	l,-2 (ix)
   03D4 DD 66 FF      [19]  957 	ld	h,-1 (ix)
   03D7 E5            [11]  958 	push	hl
   03D8 CDr00r00      [17]  959 	call	_cpct_drawSolidBox
   03DB C1            [10]  960 	pop	bc
   03DC                     961 00102$:
                            962 ;src/main.c:504: cpct_drawSpriteMaskedAlignedTable(g_font[car - 48], ptr, FNT_W, FNT_H, g_maskTable);
   03DC DD 7E FD      [19]  963 	ld	a, -3 (ix)
   03DF 16 00         [ 7]  964 	ld	d, #0x00
   03E1 C6 D0         [ 7]  965 	add	a, #0xd0
   03E3 5F            [ 4]  966 	ld	e, a
   03E4 7A            [ 4]  967 	ld	a, d
   03E5 CE FF         [ 7]  968 	adc	a, #0xff
   03E7 57            [ 4]  969 	ld	d, a
   03E8 6B            [ 4]  970 	ld	l, e
   03E9 62            [ 4]  971 	ld	h, d
   03EA 29            [11]  972 	add	hl, hl
   03EB 19            [11]  973 	add	hl, de
   03EC 29            [11]  974 	add	hl, hl
   03ED 29            [11]  975 	add	hl, hl
   03EE 29            [11]  976 	add	hl, hl
   03EF 11r00r00      [10]  977 	ld	de, #_g_font
   03F2 19            [11]  978 	add	hl, de
   03F3 C5            [11]  979 	push	bc
   03F4 11r00r01      [10]  980 	ld	de, #_g_maskTable
   03F7 D5            [11]  981 	push	de
   03F8 11 03 08      [10]  982 	ld	de, #0x0803
   03FB D5            [11]  983 	push	de
   03FC DD 5E FE      [19]  984 	ld	e,-2 (ix)
   03FF DD 56 FF      [19]  985 	ld	d,-1 (ix)
   0402 D5            [11]  986 	push	de
   0403 E5            [11]  987 	push	hl
   0404 CDr00r00      [17]  988 	call	_cpct_drawSpriteMaskedAlignedTable
   0407 C1            [10]  989 	pop	bc
                            990 ;src/main.c:505: car = txt[++pos];
   0408 DD 34 FC      [23]  991 	inc	-4 (ix)
   040B DD 6E FC      [19]  992 	ld	l,-4 (ix)
   040E 26 00         [ 7]  993 	ld	h,#0x00
   0410 09            [11]  994 	add	hl, bc
   0411 7E            [ 7]  995 	ld	a, (hl)
   0412 DD 77 FD      [19]  996 	ld	-3 (ix), a
   0415 C3r92r03      [10]  997 	jp	00103$
   0418                     998 00106$:
   0418 DD F9         [10]  999 	ld	sp, ix
   041A DD E1         [14] 1000 	pop	ix
   041C C9            [10] 1001 	ret
                           1002 ;src/main.c:511: void PrintFrame(u8 xIni, u8 yIni, u8 xEnd, u8 yEnd) {
                           1003 ;	---------------------------------
                           1004 ; Function PrintFrame
                           1005 ; ---------------------------------
   041D                    1006 _PrintFrame::
   041D DD E5         [15] 1007 	push	ix
   041F DD 21 00 00   [14] 1008 	ld	ix,#0
   0423 DD 39         [15] 1009 	add	ix,sp
   0425 21 F4 FF      [10] 1010 	ld	hl, #-12
   0428 39            [11] 1011 	add	hl, sp
   0429 F9            [ 6] 1012 	ld	sp, hl
                           1013 ;src/main.c:512: int i = xIni+3;	
   042A DD 4E 04      [19] 1014 	ld	c, 4 (ix)
   042D 06 00         [ 7] 1015 	ld	b, #0x00
   042F 03            [ 6] 1016 	inc	bc
   0430 03            [ 6] 1017 	inc	bc
   0431 03            [ 6] 1018 	inc	bc
   0432 DD 71 FE      [19] 1019 	ld	-2 (ix), c
   0435 DD 70 FF      [19] 1020 	ld	-1 (ix), b
                           1021 ;src/main.c:514: while (i < xEnd) {		
   0438 DD 7E 05      [19] 1022 	ld	a, 5 (ix)
   043B 0F            [ 4] 1023 	rrca
   043C 0F            [ 4] 1024 	rrca
   043D 0F            [ 4] 1025 	rrca
   043E E6 1F         [ 7] 1026 	and	a, #0x1f
   0440 DD 77 FD      [19] 1027 	ld	-3 (ix), a
   0443 DD 7E 05      [19] 1028 	ld	a, 5 (ix)
   0446 E6 07         [ 7] 1029 	and	a, #0x07
   0448 DD 77 FC      [19] 1030 	ld	-4 (ix), a
   044B DD 7E 07      [19] 1031 	ld	a, 7 (ix)
   044E 0F            [ 4] 1032 	rrca
   044F 0F            [ 4] 1033 	rrca
   0450 0F            [ 4] 1034 	rrca
   0451 E6 1F         [ 7] 1035 	and	a, #0x1f
   0453 DD 77 FB      [19] 1036 	ld	-5 (ix), a
   0456 DD 7E 07      [19] 1037 	ld	a, 7 (ix)
   0459 E6 07         [ 7] 1038 	and	a, #0x07
   045B DD 77 FA      [19] 1039 	ld	-6 (ix), a
   045E                    1040 00101$:
   045E DD 7E 06      [19] 1041 	ld	a, 6 (ix)
   0461 DD 77 F8      [19] 1042 	ld	-8 (ix), a
   0464 DD 36 F9 00   [19] 1043 	ld	-7 (ix), #0x00
                           1044 ;src/main.c:515: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yIni), 3, 6, g_maskTable);	
   0468 DD 6E FD      [19] 1045 	ld	l, -3 (ix)
   046B 26 00         [ 7] 1046 	ld	h, #0x00
   046D DD 5E FC      [19] 1047 	ld	e, -4 (ix)
   0470 16 00         [ 7] 1048 	ld	d, #0x00
                           1049 ;src/main.c:516: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yEnd), 3, 6, g_maskTable);	
   0472 DD 4E FB      [19] 1050 	ld	c, -5 (ix)
   0475 06 00         [ 7] 1051 	ld	b, #0x00
   0477 DD 7E FA      [19] 1052 	ld	a, -6 (ix)
   047A DD 77 F6      [19] 1053 	ld	-10 (ix), a
   047D DD 36 F7 00   [19] 1054 	ld	-9 (ix), #0x00
                           1055 ;src/main.c:515: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yIni), 3, 6, g_maskTable);	
   0481 D5            [11] 1056 	push	de
   0482 5D            [ 4] 1057 	ld	e, l
   0483 54            [ 4] 1058 	ld	d, h
   0484 29            [11] 1059 	add	hl, hl
   0485 29            [11] 1060 	add	hl, hl
   0486 19            [11] 1061 	add	hl, de
   0487 29            [11] 1062 	add	hl, hl
   0488 29            [11] 1063 	add	hl, hl
   0489 29            [11] 1064 	add	hl, hl
   048A 29            [11] 1065 	add	hl, hl
   048B D1            [10] 1066 	pop	de
   048C E3            [19] 1067 	ex	(sp), hl
   048D 7B            [ 4] 1068 	ld	a, e
   048E 07            [ 4] 1069 	rlca
   048F 07            [ 4] 1070 	rlca
   0490 07            [ 4] 1071 	rlca
   0491 E6 F8         [ 7] 1072 	and	a, #0xf8
   0493 57            [ 4] 1073 	ld	d, a
   0494 1E 00         [ 7] 1074 	ld	e, #0x00
                           1075 ;src/main.c:516: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yEnd), 3, 6, g_maskTable);	
   0496 69            [ 4] 1076 	ld	l, c
   0497 60            [ 4] 1077 	ld	h, b
   0498 29            [11] 1078 	add	hl, hl
   0499 29            [11] 1079 	add	hl, hl
   049A 09            [11] 1080 	add	hl, bc
   049B 29            [11] 1081 	add	hl, hl
   049C 29            [11] 1082 	add	hl, hl
   049D 29            [11] 1083 	add	hl, hl
   049E 29            [11] 1084 	add	hl, hl
   049F DD 7E F6      [19] 1085 	ld	a, -10 (ix)
   04A2 07            [ 4] 1086 	rlca
   04A3 07            [ 4] 1087 	rlca
   04A4 07            [ 4] 1088 	rlca
   04A5 E6 F8         [ 7] 1089 	and	a, #0xf8
   04A7 47            [ 4] 1090 	ld	b, a
   04A8 0E 00         [ 7] 1091 	ld	c, #0x00
                           1092 ;src/main.c:515: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yIni), 3, 6, g_maskTable);	
   04AA DD 7E F4      [19] 1093 	ld	a, -12 (ix)
   04AD C6 00         [ 7] 1094 	add	a, #0x00
   04AF DD 77 F4      [19] 1095 	ld	-12 (ix), a
   04B2 DD 7E F5      [19] 1096 	ld	a, -11 (ix)
   04B5 CE C0         [ 7] 1097 	adc	a, #0xc0
   04B7 DD 77 F5      [19] 1098 	ld	-11 (ix), a
                           1099 ;src/main.c:516: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yEnd), 3, 6, g_maskTable);	
   04BA D5            [11] 1100 	push	de
   04BB 11 00 C0      [10] 1101 	ld	de, #0xc000
   04BE 19            [11] 1102 	add	hl, de
   04BF D1            [10] 1103 	pop	de
                           1104 ;src/main.c:515: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yIni), 3, 6, g_maskTable);	
   04C0 DD 7E F4      [19] 1105 	ld	a, -12 (ix)
   04C3 83            [ 4] 1106 	add	a, e
   04C4 DD 77 F4      [19] 1107 	ld	-12 (ix), a
   04C7 DD 7E F5      [19] 1108 	ld	a, -11 (ix)
   04CA 8A            [ 4] 1109 	adc	a, d
   04CB DD 77 F5      [19] 1110 	ld	-11 (ix), a
                           1111 ;src/main.c:516: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yEnd), 3, 6, g_maskTable);	
   04CE 09            [11] 1112 	add	hl,bc
   04CF DD 75 F6      [19] 1113 	ld	-10 (ix), l
   04D2 DD 74 F7      [19] 1114 	ld	-9 (ix), h
                           1115 ;src/main.c:514: while (i < xEnd) {		
   04D5 DD 7E FE      [19] 1116 	ld	a, -2 (ix)
   04D8 DD 96 F8      [19] 1117 	sub	a, -8 (ix)
   04DB DD 7E FF      [19] 1118 	ld	a, -1 (ix)
   04DE DD 9E F9      [19] 1119 	sbc	a, -7 (ix)
   04E1 E2rE6r04      [10] 1120 	jp	PO, 00127$
   04E4 EE 80         [ 7] 1121 	xor	a, #0x80
   04E6                    1122 00127$:
   04E6 F2r38r05      [10] 1123 	jp	P, 00103$
                           1124 ;src/main.c:515: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yIni), 3, 6, g_maskTable);	
   04E9 01r00r01      [10] 1125 	ld	bc, #_g_maskTable
   04EC DD 7E F4      [19] 1126 	ld	a, -12 (ix)
   04EF DD 86 FE      [19] 1127 	add	a, -2 (ix)
   04F2 5F            [ 4] 1128 	ld	e, a
   04F3 DD 7E F5      [19] 1129 	ld	a, -11 (ix)
   04F6 DD 8E FF      [19] 1130 	adc	a, -1 (ix)
   04F9 57            [ 4] 1131 	ld	d, a
   04FA C5            [11] 1132 	push	bc
   04FB 21 03 06      [10] 1133 	ld	hl, #0x0603
   04FE E5            [11] 1134 	push	hl
   04FF D5            [11] 1135 	push	de
   0500 21r00r00      [10] 1136 	ld	hl, #_g_goldframe_2
   0503 E5            [11] 1137 	push	hl
   0504 CDr00r00      [17] 1138 	call	_cpct_drawSpriteMaskedAlignedTable
                           1139 ;src/main.c:516: cpct_drawSpriteMaskedAlignedTable(g_goldframe_2, cpctm_screenPtr(CPCT_VMEM_START, i, yEnd), 3, 6, g_maskTable);	
   0507 DD 7E F6      [19] 1140 	ld	a, -10 (ix)
   050A DD 86 FE      [19] 1141 	add	a, -2 (ix)
   050D 4F            [ 4] 1142 	ld	c, a
   050E DD 7E F7      [19] 1143 	ld	a, -9 (ix)
   0511 DD 8E FF      [19] 1144 	adc	a, -1 (ix)
   0514 47            [ 4] 1145 	ld	b, a
   0515 21r00r01      [10] 1146 	ld	hl, #_g_maskTable
   0518 E5            [11] 1147 	push	hl
   0519 21 03 06      [10] 1148 	ld	hl, #0x0603
   051C E5            [11] 1149 	push	hl
   051D C5            [11] 1150 	push	bc
   051E 21r00r00      [10] 1151 	ld	hl, #_g_goldframe_2
   0521 E5            [11] 1152 	push	hl
   0522 CDr00r00      [17] 1153 	call	_cpct_drawSpriteMaskedAlignedTable
                           1154 ;src/main.c:517: i += 3;
   0525 DD 7E FE      [19] 1155 	ld	a, -2 (ix)
   0528 C6 03         [ 7] 1156 	add	a, #0x03
   052A DD 77 FE      [19] 1157 	ld	-2 (ix), a
   052D DD 7E FF      [19] 1158 	ld	a, -1 (ix)
   0530 CE 00         [ 7] 1159 	adc	a, #0x00
   0532 DD 77 FF      [19] 1160 	ld	-1 (ix), a
   0535 C3r5Er04      [10] 1161 	jp	00101$
   0538                    1162 00103$:
                           1163 ;src/main.c:520: i = yIni+6;
   0538 DD 4E 05      [19] 1164 	ld	c, 5 (ix)
   053B 06 00         [ 7] 1165 	ld	b, #0x00
   053D 21 06 00      [10] 1166 	ld	hl, #0x0006
   0540 09            [11] 1167 	add	hl,bc
   0541 DD 75 F8      [19] 1168 	ld	-8 (ix), l
   0544 DD 74 F9      [19] 1169 	ld	-7 (ix), h
                           1170 ;src/main.c:521: while (i < yEnd) {		
   0547                    1171 00104$:
   0547 DD 4E 07      [19] 1172 	ld	c, 7 (ix)
   054A 06 00         [ 7] 1173 	ld	b, #0x00
   054C DD 7E F8      [19] 1174 	ld	a, -8 (ix)
   054F 91            [ 4] 1175 	sub	a, c
   0550 DD 7E F9      [19] 1176 	ld	a, -7 (ix)
   0553 98            [ 4] 1177 	sbc	a, b
   0554 E2r59r05      [10] 1178 	jp	PO, 00128$
   0557 EE 80         [ 7] 1179 	xor	a, #0x80
   0559                    1180 00128$:
   0559 F2rE3r05      [10] 1181 	jp	P, 00106$
                           1182 ;src/main.c:522: cpct_drawSpriteMaskedAlignedTable(g_goldframe_1, cpctm_screenPtr(CPCT_VMEM_START, xIni, i), 3, 6, g_maskTable);	
   055C DD 7E F8      [19] 1183 	ld	a, -8 (ix)
   055F DD 77 FE      [19] 1184 	ld	-2 (ix), a
   0562 DD 7E F9      [19] 1185 	ld	a, -7 (ix)
   0565 DD 77 FF      [19] 1186 	ld	-1 (ix), a
   0568 DD CB FF 2E   [23] 1187 	sra	-1 (ix)
   056C DD CB FE 1E   [23] 1188 	rr	-2 (ix)
   0570 DD CB FF 2E   [23] 1189 	sra	-1 (ix)
   0574 DD CB FE 1E   [23] 1190 	rr	-2 (ix)
   0578 DD CB FF 2E   [23] 1191 	sra	-1 (ix)
   057C DD CB FE 1E   [23] 1192 	rr	-2 (ix)
   0580 DD 4E FE      [19] 1193 	ld	c,-2 (ix)
   0583 DD 46 FF      [19] 1194 	ld	b,-1 (ix)
   0586 69            [ 4] 1195 	ld	l, c
   0587 60            [ 4] 1196 	ld	h, b
   0588 29            [11] 1197 	add	hl, hl
   0589 29            [11] 1198 	add	hl, hl
   058A 09            [11] 1199 	add	hl, bc
   058B 29            [11] 1200 	add	hl, hl
   058C 29            [11] 1201 	add	hl, hl
   058D 29            [11] 1202 	add	hl, hl
   058E 29            [11] 1203 	add	hl, hl
   058F 01 00 C0      [10] 1204 	ld	bc, #0xc000
   0592 09            [11] 1205 	add	hl, bc
   0593 DD 7E F8      [19] 1206 	ld	a, -8 (ix)
   0596 E6 07         [ 7] 1207 	and	a, #0x07
   0598 07            [ 4] 1208 	rlca
   0599 07            [ 4] 1209 	rlca
   059A 07            [ 4] 1210 	rlca
   059B E6 F8         [ 7] 1211 	and	a, #0xf8
   059D 47            [ 4] 1212 	ld	b, a
   059E 0E 00         [ 7] 1213 	ld	c, #0x00
   05A0 09            [11] 1214 	add	hl,bc
   05A1 EB            [ 4] 1215 	ex	de,hl
   05A2 DD 6E 04      [19] 1216 	ld	l,4 (ix)
   05A5 26 00         [ 7] 1217 	ld	h,#0x00
   05A7 19            [11] 1218 	add	hl, de
   05A8 D5            [11] 1219 	push	de
   05A9 01r00r01      [10] 1220 	ld	bc, #_g_maskTable
   05AC C5            [11] 1221 	push	bc
   05AD 01 03 06      [10] 1222 	ld	bc, #0x0603
   05B0 C5            [11] 1223 	push	bc
   05B1 E5            [11] 1224 	push	hl
   05B2 21r00r00      [10] 1225 	ld	hl, #_g_goldframe_1
   05B5 E5            [11] 1226 	push	hl
   05B6 CDr00r00      [17] 1227 	call	_cpct_drawSpriteMaskedAlignedTable
   05B9 D1            [10] 1228 	pop	de
                           1229 ;src/main.c:523: cpct_drawSpriteMaskedAlignedTable(g_goldframe_1, cpctm_screenPtr(CPCT_VMEM_START, xEnd, i), 3, 6, g_maskTable);	
   05BA 01r00r01      [10] 1230 	ld	bc, #_g_maskTable
   05BD DD 6E 06      [19] 1231 	ld	l,6 (ix)
   05C0 26 00         [ 7] 1232 	ld	h,#0x00
   05C2 19            [11] 1233 	add	hl, de
   05C3 C5            [11] 1234 	push	bc
   05C4 01 03 06      [10] 1235 	ld	bc, #0x0603
   05C7 C5            [11] 1236 	push	bc
   05C8 E5            [11] 1237 	push	hl
   05C9 21r00r00      [10] 1238 	ld	hl, #_g_goldframe_1
   05CC E5            [11] 1239 	push	hl
   05CD CDr00r00      [17] 1240 	call	_cpct_drawSpriteMaskedAlignedTable
                           1241 ;src/main.c:524: i += 6;
   05D0 DD 7E F8      [19] 1242 	ld	a, -8 (ix)
   05D3 C6 06         [ 7] 1243 	add	a, #0x06
   05D5 DD 77 F8      [19] 1244 	ld	-8 (ix), a
   05D8 DD 7E F9      [19] 1245 	ld	a, -7 (ix)
   05DB CE 00         [ 7] 1246 	adc	a, #0x00
   05DD DD 77 F9      [19] 1247 	ld	-7 (ix), a
   05E0 C3r47r05      [10] 1248 	jp	00104$
   05E3                    1249 00106$:
                           1250 ;src/main.c:528: cpct_drawSpriteMaskedAlignedTable(g_goldframe_0, cpctm_screenPtr(CPCT_VMEM_START, xIni, yIni), 3, 6, g_maskTable);
   05E3 DD 7E F4      [19] 1251 	ld	a, -12 (ix)
   05E6 DD 86 04      [19] 1252 	add	a, 4 (ix)
   05E9 4F            [ 4] 1253 	ld	c, a
   05EA DD 7E F5      [19] 1254 	ld	a, -11 (ix)
   05ED CE 00         [ 7] 1255 	adc	a, #0x00
   05EF 47            [ 4] 1256 	ld	b, a
   05F0 21r00r01      [10] 1257 	ld	hl, #_g_maskTable
   05F3 E5            [11] 1258 	push	hl
   05F4 21 03 06      [10] 1259 	ld	hl, #0x0603
   05F7 E5            [11] 1260 	push	hl
   05F8 C5            [11] 1261 	push	bc
   05F9 21r00r00      [10] 1262 	ld	hl, #_g_goldframe_0
   05FC E5            [11] 1263 	push	hl
   05FD CDr00r00      [17] 1264 	call	_cpct_drawSpriteMaskedAlignedTable
                           1265 ;src/main.c:530: cpct_drawSpriteMaskedAlignedTable(g_goldframe_0, cpctm_screenPtr(CPCT_VMEM_START, xEnd, yIni), 3, 6, g_maskTable);
   0600 DD 7E F4      [19] 1266 	ld	a, -12 (ix)
   0603 DD 86 06      [19] 1267 	add	a, 6 (ix)
   0606 4F            [ 4] 1268 	ld	c, a
   0607 DD 7E F5      [19] 1269 	ld	a, -11 (ix)
   060A CE 00         [ 7] 1270 	adc	a, #0x00
   060C 47            [ 4] 1271 	ld	b, a
   060D 21r00r01      [10] 1272 	ld	hl, #_g_maskTable
   0610 E5            [11] 1273 	push	hl
   0611 21 03 06      [10] 1274 	ld	hl, #0x0603
   0614 E5            [11] 1275 	push	hl
   0615 C5            [11] 1276 	push	bc
   0616 21r00r00      [10] 1277 	ld	hl, #_g_goldframe_0
   0619 E5            [11] 1278 	push	hl
   061A CDr00r00      [17] 1279 	call	_cpct_drawSpriteMaskedAlignedTable
                           1280 ;src/main.c:532: cpct_drawSpriteMaskedAlignedTable(g_goldframe_0, cpctm_screenPtr(CPCT_VMEM_START, xIni, yEnd), 3, 6, g_maskTable);
   061D DD 7E F6      [19] 1281 	ld	a, -10 (ix)
   0620 DD 86 04      [19] 1282 	add	a, 4 (ix)
   0623 4F            [ 4] 1283 	ld	c, a
   0624 DD 7E F7      [19] 1284 	ld	a, -9 (ix)
   0627 CE 00         [ 7] 1285 	adc	a, #0x00
   0629 47            [ 4] 1286 	ld	b, a
   062A 21r00r01      [10] 1287 	ld	hl, #_g_maskTable
   062D E5            [11] 1288 	push	hl
   062E 21 03 06      [10] 1289 	ld	hl, #0x0603
   0631 E5            [11] 1290 	push	hl
   0632 C5            [11] 1291 	push	bc
   0633 21r00r00      [10] 1292 	ld	hl, #_g_goldframe_0
   0636 E5            [11] 1293 	push	hl
   0637 CDr00r00      [17] 1294 	call	_cpct_drawSpriteMaskedAlignedTable
                           1295 ;src/main.c:534: cpct_drawSpriteMaskedAlignedTable(g_goldframe_0, cpctm_screenPtr(CPCT_VMEM_START, xEnd, yEnd), 3, 6, g_maskTable);									
   063A DD 7E F6      [19] 1296 	ld	a, -10 (ix)
   063D DD 86 06      [19] 1297 	add	a, 6 (ix)
   0640 4F            [ 4] 1298 	ld	c, a
   0641 DD 7E F7      [19] 1299 	ld	a, -9 (ix)
   0644 CE 00         [ 7] 1300 	adc	a, #0x00
   0646 47            [ 4] 1301 	ld	b, a
   0647 21r00r01      [10] 1302 	ld	hl, #_g_maskTable
   064A E5            [11] 1303 	push	hl
   064B 21 03 06      [10] 1304 	ld	hl, #0x0603
   064E E5            [11] 1305 	push	hl
   064F C5            [11] 1306 	push	bc
   0650 21r00r00      [10] 1307 	ld	hl, #_g_goldframe_0
   0653 E5            [11] 1308 	push	hl
   0654 CDr00r00      [17] 1309 	call	_cpct_drawSpriteMaskedAlignedTable
   0657 DD F9         [10] 1310 	ld	sp, ix
   0659 DD E1         [14] 1311 	pop	ix
   065B C9            [10] 1312 	ret
                           1313 ;src/main.c:550: void PrintSmallBlueBox() {
                           1314 ;	---------------------------------
                           1315 ; Function PrintSmallBlueBox
                           1316 ; ---------------------------------
   065C                    1317 _PrintSmallBlueBox::
                           1318 ;src/main.c:551: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START,  6, 80), cpct_px2byteM0(4, 4), 34, 60);
   065C 21 04 04      [10] 1319 	ld	hl, #0x0404
   065F E5            [11] 1320 	push	hl
   0660 CDr00r00      [17] 1321 	call	_cpct_px2byteM0
   0663 26 00         [ 7] 1322 	ld	h, #0x00
   0665 01 22 3C      [10] 1323 	ld	bc, #0x3c22
   0668 C5            [11] 1324 	push	bc
   0669 E5            [11] 1325 	push	hl
   066A 21 26 C3      [10] 1326 	ld	hl, #0xc326
   066D E5            [11] 1327 	push	hl
   066E CDr00r00      [17] 1328 	call	_cpct_drawSolidBox
                           1329 ;src/main.c:552: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 40, 80), cpct_px2byteM0(4, 4), 34, 60);
   0671 21 04 04      [10] 1330 	ld	hl, #0x0404
   0674 E5            [11] 1331 	push	hl
   0675 CDr00r00      [17] 1332 	call	_cpct_px2byteM0
   0678 26 00         [ 7] 1333 	ld	h, #0x00
   067A 01 22 3C      [10] 1334 	ld	bc, #0x3c22
   067D C5            [11] 1335 	push	bc
   067E E5            [11] 1336 	push	hl
   067F 21 48 C3      [10] 1337 	ld	hl, #0xc348
   0682 E5            [11] 1338 	push	hl
   0683 CDr00r00      [17] 1339 	call	_cpct_drawSolidBox
                           1340 ;src/main.c:553: PrintFrame(6,80,71,134);
   0686 21 47 86      [10] 1341 	ld	hl, #0x8647
   0689 E5            [11] 1342 	push	hl
   068A 21 06 50      [10] 1343 	ld	hl, #0x5006
   068D E5            [11] 1344 	push	hl
   068E CDr1Dr04      [17] 1345 	call	_PrintFrame
   0691 F1            [10] 1346 	pop	af
   0692 F1            [10] 1347 	pop	af
   0693 C9            [10] 1348 	ret
                           1349 ;src/main.c:558: void PrintLevelInfo() {
                           1350 ;	---------------------------------
                           1351 ; Function PrintLevelInfo
                           1352 ; ---------------------------------
   0694                    1353 _PrintLevelInfo::
                           1354 ;src/main.c:559: PrintSmallBlueBox();	
   0694 CDr5Cr06      [17] 1355 	call	_PrintSmallBlueBox
                           1356 ;src/main.c:561: if (TwoPlayers) {
   0697 3Ar04r00      [13] 1357 	ld	a,(#_TwoPlayers + 0)
   069A B7            [ 4] 1358 	or	a, a
   069B 28 49         [12] 1359 	jr	Z,00102$
                           1360 ;src/main.c:562: PrintText("LEVEL", 13, 95, 0);
   069D 21 5F 00      [10] 1361 	ld	hl, #0x005f
   06A0 E5            [11] 1362 	push	hl
   06A1 3E 0D         [ 7] 1363 	ld	a, #0x0d
   06A3 F5            [11] 1364 	push	af
   06A4 33            [ 6] 1365 	inc	sp
   06A5 21r0Fr07      [10] 1366 	ld	hl, #___str_1
   06A8 E5            [11] 1367 	push	hl
   06A9 CDr7Ar03      [17] 1368 	call	_PrintText
   06AC F1            [10] 1369 	pop	af
                           1370 ;src/main.c:563: PrintText(lName, 31, 95, 0);
   06AD 33            [ 6] 1371 	inc	sp
   06AE 21 5F 00      [10] 1372 	ld	hl,#0x005f
   06B1 E3            [19] 1373 	ex	(sp),hl
   06B2 3E 1F         [ 7] 1374 	ld	a, #0x1f
   06B4 F5            [11] 1375 	push	af
   06B5 33            [ 6] 1376 	inc	sp
   06B6 2Ar02r00      [16] 1377 	ld	hl, (_lName)
   06B9 E5            [11] 1378 	push	hl
   06BA CDr7Ar03      [17] 1379 	call	_PrintText
   06BD F1            [10] 1380 	pop	af
                           1381 ;src/main.c:564: PrintText("HIGH@SCORE:", 16, 118, 0);
   06BE 33            [ 6] 1382 	inc	sp
   06BF 21 76 00      [10] 1383 	ld	hl,#0x0076
   06C2 E3            [19] 1384 	ex	(sp),hl
   06C3 3E 10         [ 7] 1385 	ld	a, #0x10
   06C5 F5            [11] 1386 	push	af
   06C6 33            [ 6] 1387 	inc	sp
   06C7 21r15r07      [10] 1388 	ld	hl, #___str_2
   06CA E5            [11] 1389 	push	hl
   06CB CDr7Ar03      [17] 1390 	call	_PrintText
   06CE F1            [10] 1391 	pop	af
                           1392 ;src/main.c:565: PrintNumber(highScore, 4, 52, 118, 0);
   06CF 33            [ 6] 1393 	inc	sp
   06D0 21 76 00      [10] 1394 	ld	hl,#0x0076
   06D3 E3            [19] 1395 	ex	(sp),hl
   06D4 21 04 34      [10] 1396 	ld	hl, #0x3404
   06D7 E5            [11] 1397 	push	hl
   06D8 2Ar09r00      [16] 1398 	ld	hl, (_highScore)
   06DB E5            [11] 1399 	push	hl
   06DC CDrABr02      [17] 1400 	call	_PrintNumber
   06DF 21 06 00      [10] 1401 	ld	hl, #6
   06E2 39            [11] 1402 	add	hl, sp
   06E3 F9            [ 6] 1403 	ld	sp, hl
   06E4 18 23         [12] 1404 	jr	00103$
   06E6                    1405 00102$:
                           1406 ;src/main.c:568: PrintText("LEVEL", 13, 107, 0);
   06E6 21 6B 00      [10] 1407 	ld	hl, #0x006b
   06E9 E5            [11] 1408 	push	hl
   06EA 3E 0D         [ 7] 1409 	ld	a, #0x0d
   06EC F5            [11] 1410 	push	af
   06ED 33            [ 6] 1411 	inc	sp
   06EE 21r0Fr07      [10] 1412 	ld	hl, #___str_1
   06F1 E5            [11] 1413 	push	hl
   06F2 CDr7Ar03      [17] 1414 	call	_PrintText
   06F5 F1            [10] 1415 	pop	af
                           1416 ;src/main.c:569: PrintText(lName, 31, 107, 0);
   06F6 33            [ 6] 1417 	inc	sp
   06F7 21 6B 00      [10] 1418 	ld	hl,#0x006b
   06FA E3            [19] 1419 	ex	(sp),hl
   06FB 3E 1F         [ 7] 1420 	ld	a, #0x1f
   06FD F5            [11] 1421 	push	af
   06FE 33            [ 6] 1422 	inc	sp
   06FF 2Ar02r00      [16] 1423 	ld	hl, (_lName)
   0702 E5            [11] 1424 	push	hl
   0703 CDr7Ar03      [17] 1425 	call	_PrintText
   0706 F1            [10] 1426 	pop	af
   0707 F1            [10] 1427 	pop	af
   0708 33            [ 6] 1428 	inc	sp
   0709                    1429 00103$:
                           1430 ;src/main.c:572: Pause(1150);
   0709 21 7E 04      [10] 1431 	ld	hl, #0x047e
   070C C3rFEr01      [10] 1432 	jp  _Pause
   070F                    1433 ___str_1:
   070F 4C 45 56 45 4C     1434 	.ascii "LEVEL"
   0714 00                 1435 	.db 0x00
   0715                    1436 ___str_2:
   0715 48 49 47 48 40 53  1437 	.ascii "HIGH@SCORE:"
        43 4F 52 45 3A
   0720 00                 1438 	.db 0x00
                           1439 ;src/main.c:576: void PrintEndGame(u8 player) __z88dk_fastcall {
                           1440 ;	---------------------------------
                           1441 ; Function PrintEndGame
                           1442 ; ---------------------------------
   0721                    1443 _PrintEndGame::
   0721 3B            [ 6] 1444 	dec	sp
   0722 FD 21 00 00   [14] 1445 	ld	iy, #0
   0726 FD 39         [15] 1446 	add	iy, sp
   0728 FD 75 00      [19] 1447 	ld	0 (iy), l
                           1448 ;src/main.c:578: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 5, 40), cpct_px2byteM0(4, 4), 35, 144);
   072B 21 04 04      [10] 1449 	ld	hl, #0x0404
   072E E5            [11] 1450 	push	hl
   072F CDr00r00      [17] 1451 	call	_cpct_px2byteM0
   0732 26 00         [ 7] 1452 	ld	h, #0x00
   0734 01 23 90      [10] 1453 	ld	bc, #0x9023
   0737 C5            [11] 1454 	push	bc
   0738 E5            [11] 1455 	push	hl
   0739 21 95 C1      [10] 1456 	ld	hl, #0xc195
   073C E5            [11] 1457 	push	hl
   073D CDr00r00      [17] 1458 	call	_cpct_drawSolidBox
                           1459 ;src/main.c:579: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 40, 40), cpct_px2byteM0(4, 4), 35, 144);	
   0740 21 04 04      [10] 1460 	ld	hl, #0x0404
   0743 E5            [11] 1461 	push	hl
   0744 CDr00r00      [17] 1462 	call	_cpct_px2byteM0
   0747 26 00         [ 7] 1463 	ld	h, #0x00
   0749 01 23 90      [10] 1464 	ld	bc, #0x9023
   074C C5            [11] 1465 	push	bc
   074D E5            [11] 1466 	push	hl
   074E 21 B8 C1      [10] 1467 	ld	hl, #0xc1b8
   0751 E5            [11] 1468 	push	hl
   0752 CDr00r00      [17] 1469 	call	_cpct_drawSolidBox
                           1470 ;src/main.c:580: PrintFrame(5,40,72,178);
   0755 21 48 B2      [10] 1471 	ld	hl, #0xb248
   0758 E5            [11] 1472 	push	hl
   0759 21 05 28      [10] 1473 	ld	hl, #0x2805
   075C E5            [11] 1474 	push	hl
   075D CDr1Dr04      [17] 1475 	call	_PrintFrame
   0760 F1            [10] 1476 	pop	af
                           1477 ;src/main.c:582: PrintText("CONGRATULATIONS", 12, 60, 0);
   0761 21 3C 00      [10] 1478 	ld	hl, #0x003c
   0764 E3            [19] 1479 	ex	(sp),hl
   0765 3E 0C         [ 7] 1480 	ld	a, #0x0c
   0767 F5            [11] 1481 	push	af
   0768 33            [ 6] 1482 	inc	sp
   0769 21r05r08      [10] 1483 	ld	hl, #___str_3
   076C E5            [11] 1484 	push	hl
   076D CDr7Ar03      [17] 1485 	call	_PrintText
   0770 F1            [10] 1486 	pop	af
                           1487 ;src/main.c:583: PrintText("PLAYER@@>", 12, 70, 0);
   0771 33            [ 6] 1488 	inc	sp
   0772 21 46 00      [10] 1489 	ld	hl,#0x0046
   0775 E3            [19] 1490 	ex	(sp),hl
   0776 3E 0C         [ 7] 1491 	ld	a, #0x0c
   0778 F5            [11] 1492 	push	af
   0779 33            [ 6] 1493 	inc	sp
   077A 21r15r08      [10] 1494 	ld	hl, #___str_4
   077D E5            [11] 1495 	push	hl
   077E CDr7Ar03      [17] 1496 	call	_PrintText
   0781 F1            [10] 1497 	pop	af
   0782 F1            [10] 1498 	pop	af
   0783 33            [ 6] 1499 	inc	sp
                           1500 ;src/main.c:584: PrintNumber(++player, 1, 33, 70, 0);
   0784 21 00 00      [10] 1501 	ld	hl, #0+0
   0787 39            [11] 1502 	add	hl, sp
   0788 4E            [ 7] 1503 	ld	c, (hl)
   0789 0C            [ 4] 1504 	inc	c
   078A 06 00         [ 7] 1505 	ld	b, #0x00
   078C 21 46 00      [10] 1506 	ld	hl, #0x0046
   078F E5            [11] 1507 	push	hl
   0790 21 01 21      [10] 1508 	ld	hl, #0x2101
   0793 E5            [11] 1509 	push	hl
   0794 C5            [11] 1510 	push	bc
   0795 CDrABr02      [17] 1511 	call	_PrintNumber
   0798 21 06 00      [10] 1512 	ld	hl, #6
   079B 39            [11] 1513 	add	hl, sp
   079C F9            [ 6] 1514 	ld	sp, hl
                           1515 ;src/main.c:585: PrintText("YOU@FOUND@YOUR", 12, 90, 0);
   079D 21 5A 00      [10] 1516 	ld	hl, #0x005a
   07A0 E5            [11] 1517 	push	hl
   07A1 3E 0C         [ 7] 1518 	ld	a, #0x0c
   07A3 F5            [11] 1519 	push	af
   07A4 33            [ 6] 1520 	inc	sp
   07A5 21r1Fr08      [10] 1521 	ld	hl, #___str_5
   07A8 E5            [11] 1522 	push	hl
   07A9 CDr7Ar03      [17] 1523 	call	_PrintText
   07AC F1            [10] 1524 	pop	af
                           1525 ;src/main.c:586: PrintText("FATHERS@SPELL@BOOK", 12, 100, 0);
   07AD 33            [ 6] 1526 	inc	sp
   07AE 21 64 00      [10] 1527 	ld	hl,#0x0064
   07B1 E3            [19] 1528 	ex	(sp),hl
   07B2 3E 0C         [ 7] 1529 	ld	a, #0x0c
   07B4 F5            [11] 1530 	push	af
   07B5 33            [ 6] 1531 	inc	sp
   07B6 21r2Er08      [10] 1532 	ld	hl, #___str_6
   07B9 E5            [11] 1533 	push	hl
   07BA CDr7Ar03      [17] 1534 	call	_PrintText
   07BD F1            [10] 1535 	pop	af
                           1536 ;src/main.c:587: PrintText("NOW@YOUR@POWER@WILL", 12, 120, 0);
   07BE 33            [ 6] 1537 	inc	sp
   07BF 21 78 00      [10] 1538 	ld	hl,#0x0078
   07C2 E3            [19] 1539 	ex	(sp),hl
   07C3 3E 0C         [ 7] 1540 	ld	a, #0x0c
   07C5 F5            [11] 1541 	push	af
   07C6 33            [ 6] 1542 	inc	sp
   07C7 21r41r08      [10] 1543 	ld	hl, #___str_7
   07CA E5            [11] 1544 	push	hl
   07CB CDr7Ar03      [17] 1545 	call	_PrintText
   07CE F1            [10] 1546 	pop	af
                           1547 ;src/main.c:588: PrintText("BE@UNSURPASSED", 12, 130, 0);
   07CF 33            [ 6] 1548 	inc	sp
   07D0 21 82 00      [10] 1549 	ld	hl,#0x0082
   07D3 E3            [19] 1550 	ex	(sp),hl
   07D4 3E 0C         [ 7] 1551 	ld	a, #0x0c
   07D6 F5            [11] 1552 	push	af
   07D7 33            [ 6] 1553 	inc	sp
   07D8 21r55r08      [10] 1554 	ld	hl, #___str_8
   07DB E5            [11] 1555 	push	hl
   07DC CDr7Ar03      [17] 1556 	call	_PrintText
   07DF F1            [10] 1557 	pop	af
                           1558 ;src/main.c:589: PrintText(";THANKS@FOR@PLAYING;", 10, 160, 0);	
   07E0 33            [ 6] 1559 	inc	sp
   07E1 21 A0 00      [10] 1560 	ld	hl,#0x00a0
   07E4 E3            [19] 1561 	ex	(sp),hl
   07E5 3E 0A         [ 7] 1562 	ld	a, #0x0a
   07E7 F5            [11] 1563 	push	af
   07E8 33            [ 6] 1564 	inc	sp
   07E9 21r64r08      [10] 1565 	ld	hl, #___str_9
   07EC E5            [11] 1566 	push	hl
   07ED CDr7Ar03      [17] 1567 	call	_PrintText
   07F0 F1            [10] 1568 	pop	af
   07F1 F1            [10] 1569 	pop	af
   07F2 33            [ 6] 1570 	inc	sp
                           1571 ;src/main.c:591: Pause(1000);
   07F3 21 E8 03      [10] 1572 	ld	hl, #0x03e8
   07F6 CDrFEr01      [17] 1573 	call	_Pause
                           1574 ;src/main.c:592: while (!cpct_isAnyKeyPressed()); // wait for a key press
   07F9                    1575 00101$:
   07F9 CDr00r00      [17] 1576 	call	_cpct_isAnyKeyPressed
   07FC 7D            [ 4] 1577 	ld	a, l
   07FD B7            [ 4] 1578 	or	a, a
   07FE 28 F9         [12] 1579 	jr	Z,00101$
                           1580 ;src/main.c:593: InitGame();
   0800 CDrD8r40      [17] 1581 	call	_InitGame
   0803 33            [ 6] 1582 	inc	sp
   0804 C9            [10] 1583 	ret
   0805                    1584 ___str_3:
   0805 43 4F 4E 47 52 41  1585 	.ascii "CONGRATULATIONS"
        54 55 4C 41 54 49
        4F 4E 53
   0814 00                 1586 	.db 0x00
   0815                    1587 ___str_4:
   0815 50 4C 41 59 45 52  1588 	.ascii "PLAYER@@>"
        40 40 3E
   081E 00                 1589 	.db 0x00
   081F                    1590 ___str_5:
   081F 59 4F 55 40 46 4F  1591 	.ascii "YOU@FOUND@YOUR"
        55 4E 44 40 59 4F
        55 52
   082D 00                 1592 	.db 0x00
   082E                    1593 ___str_6:
   082E 46 41 54 48 45 52  1594 	.ascii "FATHERS@SPELL@BOOK"
        53 40 53 50 45 4C
        4C 40 42 4F 4F 4B
   0840 00                 1595 	.db 0x00
   0841                    1596 ___str_7:
   0841 4E 4F 57 40 59 4F  1597 	.ascii "NOW@YOUR@POWER@WILL"
        55 52 40 50 4F 57
        45 52 40 57 49 4C
        4C
   0854 00                 1598 	.db 0x00
   0855                    1599 ___str_8:
   0855 42 45 40 55 4E 53  1600 	.ascii "BE@UNSURPASSED"
        55 52 50 41 53 53
        45 44
   0863 00                 1601 	.db 0x00
   0864                    1602 ___str_9:
   0864 3B 54 48 41 4E 4B  1603 	.ascii ";THANKS@FOR@PLAYING;"
        53 40 46 4F 52 40
        50 4C 41 59 49 4E
        47 3B
   0878 00                 1604 	.db 0x00
                           1605 ;src/main.c:598: void PrintTip() {
                           1606 ;	---------------------------------
                           1607 ; Function PrintTip
                           1608 ; ---------------------------------
   0879                    1609 _PrintTip::
                           1610 ;src/main.c:599: PrintSprite(&spr[0]);
   0879 21r39r00      [10] 1611 	ld	hl, #_spr
   087C CDr9Er18      [17] 1612 	call	_PrintSprite
                           1613 ;src/main.c:600: PrintSmallBlueBox();
   087F CDr5Cr06      [17] 1614 	call	_PrintSmallBlueBox
                           1615 ;src/main.c:601: switch (nTip) {
   0882 FD 21r1Fr00   [14] 1616 	ld	iy, #_nTip
   0886 FD 7E 00      [19] 1617 	ld	a, 0 (iy)
   0889 B7            [ 4] 1618 	or	a, a
   088A 28 18         [12] 1619 	jr	Z,00101$
   088C FD 7E 00      [19] 1620 	ld	a, 0 (iy)
   088F 3D            [ 4] 1621 	dec	a
   0890 28 49         [12] 1622 	jr	Z,00102$
   0892 FD 7E 00      [19] 1623 	ld	a, 0 (iy)
   0895 D6 02         [ 7] 1624 	sub	a, #0x02
   0897 28 78         [12] 1625 	jr	Z,00103$
   0899 FD 7E 00      [19] 1626 	ld	a, 0 (iy)
   089C D6 03         [ 7] 1627 	sub	a, #0x03
   089E CAr47r09      [10] 1628 	jp	Z,00104$
   08A1 C3r7Br09      [10] 1629 	jp	00105$
                           1630 ;src/main.c:602: case 0: {
   08A4                    1631 00101$:
                           1632 ;src/main.c:603: PrintText("TIP:@TAKE@THE@EXACT", 11, 95, 0);
   08A4 21 5F 00      [10] 1633 	ld	hl, #0x005f
   08A7 E5            [11] 1634 	push	hl
   08A8 3E 0B         [ 7] 1635 	ld	a, #0x0b
   08AA F5            [11] 1636 	push	af
   08AB 33            [ 6] 1637 	inc	sp
   08AC 21r8Fr09      [10] 1638 	ld	hl, #___str_10
   08AF E5            [11] 1639 	push	hl
   08B0 CDr7Ar03      [17] 1640 	call	_PrintText
   08B3 F1            [10] 1641 	pop	af
                           1642 ;src/main.c:604: PrintText("COINS@TO@BUY@THE", 16, 105, 0);
   08B4 33            [ 6] 1643 	inc	sp
   08B5 21 69 00      [10] 1644 	ld	hl,#0x0069
   08B8 E3            [19] 1645 	ex	(sp),hl
   08B9 3E 10         [ 7] 1646 	ld	a, #0x10
   08BB F5            [11] 1647 	push	af
   08BC 33            [ 6] 1648 	inc	sp
   08BD 21rA3r09      [10] 1649 	ld	hl, #___str_11
   08C0 E5            [11] 1650 	push	hl
   08C1 CDr7Ar03      [17] 1651 	call	_PrintText
   08C4 F1            [10] 1652 	pop	af
                           1653 ;src/main.c:605: PrintText("REQUIRED@INGREDIENT", 11, 115, 0);
   08C5 33            [ 6] 1654 	inc	sp
   08C6 21 73 00      [10] 1655 	ld	hl,#0x0073
   08C9 E3            [19] 1656 	ex	(sp),hl
   08CA 3E 0B         [ 7] 1657 	ld	a, #0x0b
   08CC F5            [11] 1658 	push	af
   08CD 33            [ 6] 1659 	inc	sp
   08CE 21rB4r09      [10] 1660 	ld	hl, #___str_12
   08D1 E5            [11] 1661 	push	hl
   08D2 CDr7Ar03      [17] 1662 	call	_PrintText
   08D5 F1            [10] 1663 	pop	af
   08D6 F1            [10] 1664 	pop	af
   08D7 33            [ 6] 1665 	inc	sp
                           1666 ;src/main.c:606: break;
   08D8 C3r7Br09      [10] 1667 	jp	00105$
                           1668 ;src/main.c:608: case 1: {
   08DB                    1669 00102$:
                           1670 ;src/main.c:609: PrintText("TIP:@GO@TO@THE@SHOP", 11, 95, 0);
   08DB 21 5F 00      [10] 1671 	ld	hl, #0x005f
   08DE E5            [11] 1672 	push	hl
   08DF 3E 0B         [ 7] 1673 	ld	a, #0x0b
   08E1 F5            [11] 1674 	push	af
   08E2 33            [ 6] 1675 	inc	sp
   08E3 21rC8r09      [10] 1676 	ld	hl, #___str_13
   08E6 E5            [11] 1677 	push	hl
   08E7 CDr7Ar03      [17] 1678 	call	_PrintText
   08EA F1            [10] 1679 	pop	af
                           1680 ;src/main.c:610: PrintText("WHEN@YOU@CAN@GET@THE", 10, 105, 0);
   08EB 33            [ 6] 1681 	inc	sp
   08EC 21 69 00      [10] 1682 	ld	hl,#0x0069
   08EF E3            [19] 1683 	ex	(sp),hl
   08F0 3E 0A         [ 7] 1684 	ld	a, #0x0a
   08F2 F5            [11] 1685 	push	af
   08F3 33            [ 6] 1686 	inc	sp
   08F4 21rDCr09      [10] 1687 	ld	hl, #___str_14
   08F7 E5            [11] 1688 	push	hl
   08F8 CDr7Ar03      [17] 1689 	call	_PrintText
   08FB F1            [10] 1690 	pop	af
                           1691 ;src/main.c:611: PrintText("INGREDIENT@YOU@NEED", 11, 115, 0);
   08FC 33            [ 6] 1692 	inc	sp
   08FD 21 73 00      [10] 1693 	ld	hl,#0x0073
   0900 E3            [19] 1694 	ex	(sp),hl
   0901 3E 0B         [ 7] 1695 	ld	a, #0x0b
   0903 F5            [11] 1696 	push	af
   0904 33            [ 6] 1697 	inc	sp
   0905 21rF1r09      [10] 1698 	ld	hl, #___str_15
   0908 E5            [11] 1699 	push	hl
   0909 CDr7Ar03      [17] 1700 	call	_PrintText
   090C F1            [10] 1701 	pop	af
   090D F1            [10] 1702 	pop	af
   090E 33            [ 6] 1703 	inc	sp
                           1704 ;src/main.c:612: break;
   090F 18 6A         [12] 1705 	jr	00105$
                           1706 ;src/main.c:614: case 2: {
   0911                    1707 00103$:
                           1708 ;src/main.c:615: PrintText("TIP:@USE@THE@WELL", 14, 95, 0);
   0911 21 5F 00      [10] 1709 	ld	hl, #0x005f
   0914 E5            [11] 1710 	push	hl
   0915 3E 0E         [ 7] 1711 	ld	a, #0x0e
   0917 F5            [11] 1712 	push	af
   0918 33            [ 6] 1713 	inc	sp
   0919 21r05r0A      [10] 1714 	ld	hl, #___str_16
   091C E5            [11] 1715 	push	hl
   091D CDr7Ar03      [17] 1716 	call	_PrintText
   0920 F1            [10] 1717 	pop	af
                           1718 ;src/main.c:616: PrintText("WHEN@YOU@TAKE@MORE", 13, 105, 0);
   0921 33            [ 6] 1719 	inc	sp
   0922 21 69 00      [10] 1720 	ld	hl,#0x0069
   0925 E3            [19] 1721 	ex	(sp),hl
   0926 3E 0D         [ 7] 1722 	ld	a, #0x0d
   0928 F5            [11] 1723 	push	af
   0929 33            [ 6] 1724 	inc	sp
   092A 21r17r0A      [10] 1725 	ld	hl, #___str_17
   092D E5            [11] 1726 	push	hl
   092E CDr7Ar03      [17] 1727 	call	_PrintText
   0931 F1            [10] 1728 	pop	af
                           1729 ;src/main.c:617: PrintText("COINS@THAN@YOU@NEED", 11, 115, 0);
   0932 33            [ 6] 1730 	inc	sp
   0933 21 73 00      [10] 1731 	ld	hl,#0x0073
   0936 E3            [19] 1732 	ex	(sp),hl
   0937 3E 0B         [ 7] 1733 	ld	a, #0x0b
   0939 F5            [11] 1734 	push	af
   093A 33            [ 6] 1735 	inc	sp
   093B 21r2Ar0A      [10] 1736 	ld	hl, #___str_18
   093E E5            [11] 1737 	push	hl
   093F CDr7Ar03      [17] 1738 	call	_PrintText
   0942 F1            [10] 1739 	pop	af
   0943 F1            [10] 1740 	pop	af
   0944 33            [ 6] 1741 	inc	sp
                           1742 ;src/main.c:618: break;
   0945 18 34         [12] 1743 	jr	00105$
                           1744 ;src/main.c:620: case 3: {
   0947                    1745 00104$:
                           1746 ;src/main.c:621: PrintText("TIP:@GO@TO@THE@EXIT", 11, 95, 0);
   0947 21 5F 00      [10] 1747 	ld	hl, #0x005f
   094A E5            [11] 1748 	push	hl
   094B 3E 0B         [ 7] 1749 	ld	a, #0x0b
   094D F5            [11] 1750 	push	af
   094E 33            [ 6] 1751 	inc	sp
   094F 21r3Er0A      [10] 1752 	ld	hl, #___str_19
   0952 E5            [11] 1753 	push	hl
   0953 CDr7Ar03      [17] 1754 	call	_PrintText
   0956 F1            [10] 1755 	pop	af
                           1756 ;src/main.c:622: PrintText("DOOR@WHEN@YOU@HAVE", 13, 105, 0);
   0957 33            [ 6] 1757 	inc	sp
   0958 21 69 00      [10] 1758 	ld	hl,#0x0069
   095B E3            [19] 1759 	ex	(sp),hl
   095C 3E 0D         [ 7] 1760 	ld	a, #0x0d
   095E F5            [11] 1761 	push	af
   095F 33            [ 6] 1762 	inc	sp
   0960 21r52r0A      [10] 1763 	ld	hl, #___str_20
   0963 E5            [11] 1764 	push	hl
   0964 CDr7Ar03      [17] 1765 	call	_PrintText
   0967 F1            [10] 1766 	pop	af
                           1767 ;src/main.c:623: PrintText("THE@RIGHT@POTION", 15, 115, 0);
   0968 33            [ 6] 1768 	inc	sp
   0969 21 73 00      [10] 1769 	ld	hl,#0x0073
   096C E3            [19] 1770 	ex	(sp),hl
   096D 3E 0F         [ 7] 1771 	ld	a, #0x0f
   096F F5            [11] 1772 	push	af
   0970 33            [ 6] 1773 	inc	sp
   0971 21r65r0A      [10] 1774 	ld	hl, #___str_21
   0974 E5            [11] 1775 	push	hl
   0975 CDr7Ar03      [17] 1776 	call	_PrintText
   0978 F1            [10] 1777 	pop	af
   0979 F1            [10] 1778 	pop	af
   097A 33            [ 6] 1779 	inc	sp
                           1780 ;src/main.c:625: }
   097B                    1781 00105$:
                           1782 ;src/main.c:626: Pause(400);
   097B 21 90 01      [10] 1783 	ld	hl, #0x0190
   097E CDrFEr01      [17] 1784 	call	_Pause
                           1785 ;src/main.c:627: while (!cpct_isAnyKeyPressed()); // wait for a key press
   0981                    1786 00106$:
   0981 CDr00r00      [17] 1787 	call	_cpct_isAnyKeyPressed
   0984 7D            [ 4] 1788 	ld	a, l
   0985 B7            [ 4] 1789 	or	a, a
   0986 28 F9         [12] 1790 	jr	Z,00106$
                           1791 ;src/main.c:628: nTip++; // next message
   0988 21r1Fr00      [10] 1792 	ld	hl, #_nTip+0
   098B 34            [11] 1793 	inc	(hl)
                           1794 ;src/main.c:629: PrintMap();
   098C C3r95r02      [10] 1795 	jp  _PrintMap
   098F                    1796 ___str_10:
   098F 54 49 50 3A 40 54  1797 	.ascii "TIP:@TAKE@THE@EXACT"
        41 4B 45 40 54 48
        45 40 45 58 41 43
        54
   09A2 00                 1798 	.db 0x00
   09A3                    1799 ___str_11:
   09A3 43 4F 49 4E 53 40  1800 	.ascii "COINS@TO@BUY@THE"
        54 4F 40 42 55 59
        40 54 48 45
   09B3 00                 1801 	.db 0x00
   09B4                    1802 ___str_12:
   09B4 52 45 51 55 49 52  1803 	.ascii "REQUIRED@INGREDIENT"
        45 44 40 49 4E 47
        52 45 44 49 45 4E
        54
   09C7 00                 1804 	.db 0x00
   09C8                    1805 ___str_13:
   09C8 54 49 50 3A 40 47  1806 	.ascii "TIP:@GO@TO@THE@SHOP"
        4F 40 54 4F 40 54
        48 45 40 53 48 4F
        50
   09DB 00                 1807 	.db 0x00
   09DC                    1808 ___str_14:
   09DC 57 48 45 4E 40 59  1809 	.ascii "WHEN@YOU@CAN@GET@THE"
        4F 55 40 43 41 4E
        40 47 45 54 40 54
        48 45
   09F0 00                 1810 	.db 0x00
   09F1                    1811 ___str_15:
   09F1 49 4E 47 52 45 44  1812 	.ascii "INGREDIENT@YOU@NEED"
        49 45 4E 54 40 59
        4F 55 40 4E 45 45
        44
   0A04 00                 1813 	.db 0x00
   0A05                    1814 ___str_16:
   0A05 54 49 50 3A 40 55  1815 	.ascii "TIP:@USE@THE@WELL"
        53 45 40 54 48 45
        40 57 45 4C 4C
   0A16 00                 1816 	.db 0x00
   0A17                    1817 ___str_17:
   0A17 57 48 45 4E 40 59  1818 	.ascii "WHEN@YOU@TAKE@MORE"
        4F 55 40 54 41 4B
        45 40 4D 4F 52 45
   0A29 00                 1819 	.db 0x00
   0A2A                    1820 ___str_18:
   0A2A 43 4F 49 4E 53 40  1821 	.ascii "COINS@THAN@YOU@NEED"
        54 48 41 4E 40 59
        4F 55 40 4E 45 45
        44
   0A3D 00                 1822 	.db 0x00
   0A3E                    1823 ___str_19:
   0A3E 54 49 50 3A 40 47  1824 	.ascii "TIP:@GO@TO@THE@EXIT"
        4F 40 54 4F 40 54
        48 45 40 45 58 49
        54
   0A51 00                 1825 	.db 0x00
   0A52                    1826 ___str_20:
   0A52 44 4F 4F 52 40 57  1827 	.ascii "DOOR@WHEN@YOU@HAVE"
        48 45 4E 40 59 4F
        55 40 48 41 56 45
   0A64 00                 1828 	.db 0x00
   0A65                    1829 ___str_21:
   0A65 54 48 45 40 52 49  1830 	.ascii "THE@RIGHT@POTION"
        47 48 54 40 50 4F
        54 49 4F 4E
   0A75 00                 1831 	.db 0x00
                           1832 ;src/main.c:646: cpct_keyID ReturnKeyPressed() {
                           1833 ;	---------------------------------
                           1834 ; Function ReturnKeyPressed
                           1835 ; ---------------------------------
   0A76                    1836 _ReturnKeyPressed::
   0A76 DD E5         [15] 1837 	push	ix
   0A78 DD 21 00 00   [14] 1838 	ld	ix,#0
   0A7C DD 39         [15] 1839 	add	ix,sp
   0A7E F5            [11] 1840 	push	af
                           1841 ;src/main.c:647: u8 i = 10, *keys = cpct_keyboardStatusBuffer + 9;
   0A7F 0E 0A         [ 7] 1842 	ld	c, #0x0a
                           1843 ;src/main.c:650: do { cpct_scanKeyboard(); } while ( ! cpct_isAnyKeyPressed() );
   0A81                    1844 00101$:
   0A81 C5            [11] 1845 	push	bc
   0A82 CDr00r00      [17] 1846 	call	_cpct_scanKeyboard
   0A85 CDr00r00      [17] 1847 	call	_cpct_isAnyKeyPressed
   0A88 C1            [10] 1848 	pop	bc
   0A89 7D            [ 4] 1849 	ld	a, l
   0A8A B7            [ 4] 1850 	or	a, a
   0A8B 28 F4         [12] 1851 	jr	Z,00101$
                           1852 ;src/main.c:652: do {
   0A8D 11r09r00      [10] 1853 	ld	de, #(_cpct_keyboardStatusBuffer + 0x0009)
   0A90 06 0A         [ 7] 1854 	ld	b, #0x0a
   0A92                    1855 00106$:
                           1856 ;src/main.c:653: keypressed = *keys ^ 0xFF;
   0A92 1A            [ 7] 1857 	ld	a, (de)
   0A93 EE FF         [ 7] 1858 	xor	a, #0xff
   0A95 6F            [ 4] 1859 	ld	l, a
   0A96 26 00         [ 7] 1860 	ld	h, #0x00
   0A98 33            [ 6] 1861 	inc	sp
   0A99 33            [ 6] 1862 	inc	sp
   0A9A E5            [11] 1863 	push	hl
                           1864 ;src/main.c:654: if (keypressed)
   0A9B 7C            [ 4] 1865 	ld	a, h
   0A9C B5            [ 4] 1866 	or	a,l
   0A9D 28 0B         [12] 1867 	jr	Z,00105$
                           1868 ;src/main.c:655: return (keypressed << 8) + (i - 1); 
   0A9F DD 66 FE      [19] 1869 	ld	h, -2 (ix)
   0AA2 2E 00         [ 7] 1870 	ld	l, #0x00
   0AA4 06 00         [ 7] 1871 	ld	b, #0x00
   0AA6 0B            [ 6] 1872 	dec	bc
   0AA7 09            [11] 1873 	add	hl, bc
   0AA8 18 0A         [12] 1874 	jr	00109$
   0AAA                    1875 00105$:
                           1876 ;src/main.c:656: keys--;
   0AAA 1B            [ 6] 1877 	dec	de
                           1878 ;src/main.c:657: } while(--i);    
   0AAB 05            [ 4] 1879 	dec	b
   0AAC 78            [ 4] 1880 	ld	a,b
   0AAD 4F            [ 4] 1881 	ld	c,a
   0AAE B7            [ 4] 1882 	or	a, a
   0AAF 20 E1         [12] 1883 	jr	NZ,00106$
                           1884 ;src/main.c:658: return 0;
   0AB1 21 00 00      [10] 1885 	ld	hl, #0x0000
   0AB4                    1886 00109$:
   0AB4 DD F9         [10] 1887 	ld	sp, ix
   0AB6 DD E1         [14] 1888 	pop	ix
   0AB8 C9            [10] 1889 	ret
                           1890 ;src/main.c:664: void Wait4Key(cpct_keyID key) {
                           1891 ;	---------------------------------
                           1892 ; Function Wait4Key
                           1893 ; ---------------------------------
   0AB9                    1894 _Wait4Key::
                           1895 ;src/main.c:665: do cpct_scanKeyboard_f();
   0AB9                    1896 00101$:
   0AB9 CDr00r00      [17] 1897 	call	_cpct_scanKeyboard_f
                           1898 ;src/main.c:666: while(!cpct_isKeyPressed(key));
   0ABC C1            [10] 1899 	pop	bc
   0ABD E1            [10] 1900 	pop	hl
   0ABE E5            [11] 1901 	push	hl
   0ABF C5            [11] 1902 	push	bc
   0AC0 CDr00r00      [17] 1903 	call	_cpct_isKeyPressed
   0AC3 7D            [ 4] 1904 	ld	a, l
   0AC4 B7            [ 4] 1905 	or	a, a
   0AC5 28 F2         [12] 1906 	jr	Z,00101$
                           1907 ;src/main.c:667: do cpct_scanKeyboard_f();
   0AC7                    1908 00104$:
   0AC7 CDr00r00      [17] 1909 	call	_cpct_scanKeyboard_f
                           1910 ;src/main.c:668: while(cpct_isKeyPressed(key));
   0ACA C1            [10] 1911 	pop	bc
   0ACB E1            [10] 1912 	pop	hl
   0ACC E5            [11] 1913 	push	hl
   0ACD C5            [11] 1914 	push	bc
   0ACE CDr00r00      [17] 1915 	call	_cpct_isKeyPressed
   0AD1 7D            [ 4] 1916 	ld	a, l
   0AD2 B7            [ 4] 1917 	or	a, a
   0AD3 20 F2         [12] 1918 	jr	NZ,00104$
   0AD5 C9            [10] 1919 	ret
                           1920 ;src/main.c:673: cpct_keyID RedefineKey(u8 *info) {
                           1921 ;	---------------------------------
                           1922 ; Function RedefineKey
                           1923 ; ---------------------------------
   0AD6                    1924 _RedefineKey::
                           1925 ;src/main.c:675: PrintText(info, 28, 120, 1);       
   0AD6 21 78 01      [10] 1926 	ld	hl, #0x0178
   0AD9 E5            [11] 1927 	push	hl
   0ADA 3E 1C         [ 7] 1928 	ld	a, #0x1c
   0ADC F5            [11] 1929 	push	af
   0ADD 33            [ 6] 1930 	inc	sp
   0ADE 21 05 00      [10] 1931 	ld	hl, #5
   0AE1 39            [11] 1932 	add	hl, sp
   0AE2 4E            [ 7] 1933 	ld	c, (hl)
   0AE3 23            [ 6] 1934 	inc	hl
   0AE4 46            [ 7] 1935 	ld	b, (hl)
   0AE5 C5            [11] 1936 	push	bc
   0AE6 CDr7Ar03      [17] 1937 	call	_PrintText
   0AE9 F1            [10] 1938 	pop	af
   0AEA F1            [10] 1939 	pop	af
   0AEB 33            [ 6] 1940 	inc	sp
                           1941 ;src/main.c:676: key = ReturnKeyPressed();
   0AEC CDr76r0A      [17] 1942 	call	_ReturnKeyPressed
                           1943 ;src/main.c:677: Wait4Key(key);
   0AEF E5            [11] 1944 	push	hl
   0AF0 E5            [11] 1945 	push	hl
   0AF1 CDrB9r0A      [17] 1946 	call	_Wait4Key
   0AF4 F1            [10] 1947 	pop	af
   0AF5 E1            [10] 1948 	pop	hl
                           1949 ;src/main.c:678: return key;    
   0AF6 C9            [10] 1950 	ret
                           1951 ;src/main.c:695: void RefreshHighScore(u8 player) __z88dk_fastcall {
                           1952 ;	---------------------------------
                           1953 ; Function RefreshHighScore
                           1954 ; ---------------------------------
   0AF7                    1955 _RefreshHighScore::
   0AF7 5D            [ 4] 1956 	ld	e, l
                           1957 ;src/main.c:696: if (highScore < score[player])
   0AF8 01r05r00      [10] 1958 	ld	bc, #_score+0
   0AFB 6B            [ 4] 1959 	ld	l, e
   0AFC 26 00         [ 7] 1960 	ld	h, #0x00
   0AFE 29            [11] 1961 	add	hl, hl
   0AFF 09            [11] 1962 	add	hl, bc
   0B00 4E            [ 7] 1963 	ld	c, (hl)
   0B01 23            [ 6] 1964 	inc	hl
   0B02 46            [ 7] 1965 	ld	b, (hl)
   0B03 FD 21r09r00   [14] 1966 	ld	iy, #_highScore
   0B07 FD 7E 00      [19] 1967 	ld	a, 0 (iy)
   0B0A 91            [ 4] 1968 	sub	a, c
   0B0B FD 7E 01      [19] 1969 	ld	a, 1 (iy)
   0B0E 98            [ 4] 1970 	sbc	a, b
   0B0F D0            [11] 1971 	ret	NC
                           1972 ;src/main.c:697: highScore = score[player];
   0B10 ED 43r09r00   [20] 1973 	ld	(_highScore), bc
   0B14 C9            [10] 1974 	ret
                           1975 ;src/main.c:702: void InitScoreboard() {
                           1976 ;	---------------------------------
                           1977 ; Function InitScoreboard
                           1978 ; ---------------------------------
   0B15                    1979 _InitScoreboard::
                           1980 ;src/main.c:703: nPObj = 0;
   0B15 21rADr00      [10] 1981 	ld	hl,#_nPObj + 0
   0B18 36 00         [10] 1982 	ld	(hl), #0x00
                           1983 ;src/main.c:704: PrintFrame(0,0,77,24);	
   0B1A 21 4D 18      [10] 1984 	ld	hl, #0x184d
   0B1D E5            [11] 1985 	push	hl
   0B1E 21 00 00      [10] 1986 	ld	hl, #0x0000
   0B21 E5            [11] 1987 	push	hl
   0B22 CDr1Dr04      [17] 1988 	call	_PrintFrame
   0B25 F1            [10] 1989 	pop	af
                           1990 ;src/main.c:707: cpct_drawSpriteMaskedAlignedTable(g_sorcerer1_06, cpct_getScreenPtr(CPCT_VMEM_START,  3, 4), SPR_W, SPR_H, g_maskTable);
   0B26 21 03 04      [10] 1991 	ld	hl, #0x0403
   0B29 E3            [19] 1992 	ex	(sp),hl
   0B2A 21 00 C0      [10] 1993 	ld	hl, #0xc000
   0B2D E5            [11] 1994 	push	hl
   0B2E CDr00r00      [17] 1995 	call	_cpct_getScreenPtr
   0B31 01r00r00      [10] 1996 	ld	bc, #_g_sorcerer1_06+0
   0B34 11r00r01      [10] 1997 	ld	de, #_g_maskTable
   0B37 D5            [11] 1998 	push	de
   0B38 11 05 0C      [10] 1999 	ld	de, #0x0c05
   0B3B D5            [11] 2000 	push	de
   0B3C E5            [11] 2001 	push	hl
   0B3D C5            [11] 2002 	push	bc
   0B3E CDr00r00      [17] 2003 	call	_cpct_drawSpriteMaskedAlignedTable
                           2004 ;src/main.c:708: PrintText("0000", 14, 6, 1); // player score
   0B41 21 06 01      [10] 2005 	ld	hl, #0x0106
   0B44 E5            [11] 2006 	push	hl
   0B45 3E 0E         [ 7] 2007 	ld	a, #0x0e
   0B47 F5            [11] 2008 	push	af
   0B48 33            [ 6] 2009 	inc	sp
   0B49 21r65r0C      [10] 2010 	ld	hl, #___str_22
   0B4C E5            [11] 2011 	push	hl
   0B4D CDr7Ar03      [17] 2012 	call	_PrintText
   0B50 F1            [10] 2013 	pop	af
                           2014 ;src/main.c:709: PrintObject(nPObj, 28, 6); PrintText("00", 32, 6, 1);	// coins score	
   0B51 33            [ 6] 2015 	inc	sp
   0B52 21 1C 06      [10] 2016 	ld	hl,#0x061c
   0B55 E3            [19] 2017 	ex	(sp),hl
   0B56 3ArADr00      [13] 2018 	ld	a, (_nPObj)
   0B59 F5            [11] 2019 	push	af
   0B5A 33            [ 6] 2020 	inc	sp
   0B5B CDrF0r0D      [17] 2021 	call	_PrintObject
   0B5E 33            [ 6] 2022 	inc	sp
   0B5F 21 06 01      [10] 2023 	ld	hl,#0x0106
   0B62 E3            [19] 2024 	ex	(sp),hl
   0B63 3E 20         [ 7] 2025 	ld	a, #0x20
   0B65 F5            [11] 2026 	push	af
   0B66 33            [ 6] 2027 	inc	sp
   0B67 21r6Ar0C      [10] 2028 	ld	hl, #___str_23
   0B6A E5            [11] 2029 	push	hl
   0B6B CDr7Ar03      [17] 2030 	call	_PrintText
   0B6E F1            [10] 2031 	pop	af
                           2032 ;src/main.c:710: PrintText("<", 28, 15, 1); PrintText("00", 32, 15, 1);	// potion score
   0B6F 33            [ 6] 2033 	inc	sp
   0B70 21 0F 01      [10] 2034 	ld	hl,#0x010f
   0B73 E3            [19] 2035 	ex	(sp),hl
   0B74 3E 1C         [ 7] 2036 	ld	a, #0x1c
   0B76 F5            [11] 2037 	push	af
   0B77 33            [ 6] 2038 	inc	sp
   0B78 21r6Dr0C      [10] 2039 	ld	hl, #___str_24
   0B7B E5            [11] 2040 	push	hl
   0B7C CDr7Ar03      [17] 2041 	call	_PrintText
   0B7F F1            [10] 2042 	pop	af
   0B80 33            [ 6] 2043 	inc	sp
   0B81 21 0F 01      [10] 2044 	ld	hl,#0x010f
   0B84 E3            [19] 2045 	ex	(sp),hl
   0B85 3E 20         [ 7] 2046 	ld	a, #0x20
   0B87 F5            [11] 2047 	push	af
   0B88 33            [ 6] 2048 	inc	sp
   0B89 21r6Ar0C      [10] 2049 	ld	hl, #___str_23
   0B8C E5            [11] 2050 	push	hl
   0B8D CDr7Ar03      [17] 2051 	call	_PrintText
   0B90 F1            [10] 2052 	pop	af
   0B91 F1            [10] 2053 	pop	af
   0B92 33            [ 6] 2054 	inc	sp
                           2055 ;src/main.c:713: if (TwoPlayers) {
   0B93 3Ar04r00      [13] 2056 	ld	a,(#_TwoPlayers + 0)
   0B96 B7            [ 4] 2057 	or	a, a
   0B97 28 6E         [12] 2058 	jr	Z,00102$
                           2059 ;src/main.c:714: cpct_drawSpriteMaskedAlignedTable(g_sorcerer2_06, cpct_getScreenPtr(CPCT_VMEM_START, 42, 4), SPR_W, SPR_H, g_maskTable);
   0B99 21 2A 04      [10] 2060 	ld	hl, #0x042a
   0B9C E5            [11] 2061 	push	hl
   0B9D 21 00 C0      [10] 2062 	ld	hl, #0xc000
   0BA0 E5            [11] 2063 	push	hl
   0BA1 CDr00r00      [17] 2064 	call	_cpct_getScreenPtr
   0BA4 01r00r00      [10] 2065 	ld	bc, #_g_sorcerer2_06+0
   0BA7 11r00r01      [10] 2066 	ld	de, #_g_maskTable
   0BAA D5            [11] 2067 	push	de
   0BAB 11 05 0C      [10] 2068 	ld	de, #0x0c05
   0BAE D5            [11] 2069 	push	de
   0BAF E5            [11] 2070 	push	hl
   0BB0 C5            [11] 2071 	push	bc
   0BB1 CDr00r00      [17] 2072 	call	_cpct_drawSpriteMaskedAlignedTable
                           2073 ;src/main.c:715: PrintText("0000", 53, 6, 1); // player score
   0BB4 21 06 01      [10] 2074 	ld	hl, #0x0106
   0BB7 E5            [11] 2075 	push	hl
   0BB8 3E 35         [ 7] 2076 	ld	a, #0x35
   0BBA F5            [11] 2077 	push	af
   0BBB 33            [ 6] 2078 	inc	sp
   0BBC 21r65r0C      [10] 2079 	ld	hl, #___str_22
   0BBF E5            [11] 2080 	push	hl
   0BC0 CDr7Ar03      [17] 2081 	call	_PrintText
   0BC3 F1            [10] 2082 	pop	af
                           2083 ;src/main.c:716: PrintObject(nPObj, 67, 6); PrintText("00", 71, 6, 1);	// coins score
   0BC4 33            [ 6] 2084 	inc	sp
   0BC5 21 43 06      [10] 2085 	ld	hl,#0x0643
   0BC8 E3            [19] 2086 	ex	(sp),hl
   0BC9 3ArADr00      [13] 2087 	ld	a, (_nPObj)
   0BCC F5            [11] 2088 	push	af
   0BCD 33            [ 6] 2089 	inc	sp
   0BCE CDrF0r0D      [17] 2090 	call	_PrintObject
   0BD1 33            [ 6] 2091 	inc	sp
   0BD2 21 06 01      [10] 2092 	ld	hl,#0x0106
   0BD5 E3            [19] 2093 	ex	(sp),hl
   0BD6 3E 47         [ 7] 2094 	ld	a, #0x47
   0BD8 F5            [11] 2095 	push	af
   0BD9 33            [ 6] 2096 	inc	sp
   0BDA 21r6Ar0C      [10] 2097 	ld	hl, #___str_23
   0BDD E5            [11] 2098 	push	hl
   0BDE CDr7Ar03      [17] 2099 	call	_PrintText
   0BE1 F1            [10] 2100 	pop	af
                           2101 ;src/main.c:717: PrintText("<", 67, 15, 1); PrintText("00", 71, 15, 1);	// potion score
   0BE2 33            [ 6] 2102 	inc	sp
   0BE3 21 0F 01      [10] 2103 	ld	hl,#0x010f
   0BE6 E3            [19] 2104 	ex	(sp),hl
   0BE7 3E 43         [ 7] 2105 	ld	a, #0x43
   0BE9 F5            [11] 2106 	push	af
   0BEA 33            [ 6] 2107 	inc	sp
   0BEB 21r6Dr0C      [10] 2108 	ld	hl, #___str_24
   0BEE E5            [11] 2109 	push	hl
   0BEF CDr7Ar03      [17] 2110 	call	_PrintText
   0BF2 F1            [10] 2111 	pop	af
   0BF3 33            [ 6] 2112 	inc	sp
   0BF4 21 0F 01      [10] 2113 	ld	hl,#0x010f
   0BF7 E3            [19] 2114 	ex	(sp),hl
   0BF8 3E 47         [ 7] 2115 	ld	a, #0x47
   0BFA F5            [11] 2116 	push	af
   0BFB 33            [ 6] 2117 	inc	sp
   0BFC 21r6Ar0C      [10] 2118 	ld	hl, #___str_23
   0BFF E5            [11] 2119 	push	hl
   0C00 CDr7Ar03      [17] 2120 	call	_PrintText
   0C03 F1            [10] 2121 	pop	af
   0C04 F1            [10] 2122 	pop	af
   0C05 33            [ 6] 2123 	inc	sp
   0C06 C9            [10] 2124 	ret
   0C07                    2125 00102$:
                           2126 ;src/main.c:720: PrintText("HIGH:", 44, 6 , 1);
   0C07 21 06 01      [10] 2127 	ld	hl, #0x0106
   0C0A E5            [11] 2128 	push	hl
   0C0B 3E 2C         [ 7] 2129 	ld	a, #0x2c
   0C0D F5            [11] 2130 	push	af
   0C0E 33            [ 6] 2131 	inc	sp
   0C0F 21r6Fr0C      [10] 2132 	ld	hl, #___str_25
   0C12 E5            [11] 2133 	push	hl
   0C13 CDr7Ar03      [17] 2134 	call	_PrintText
   0C16 F1            [10] 2135 	pop	af
                           2136 ;src/main.c:721: PrintText("00000", 61, 6, 1); 
   0C17 33            [ 6] 2137 	inc	sp
   0C18 21 06 01      [10] 2138 	ld	hl,#0x0106
   0C1B E3            [19] 2139 	ex	(sp),hl
   0C1C 3E 3D         [ 7] 2140 	ld	a, #0x3d
   0C1E F5            [11] 2141 	push	af
   0C1F 33            [ 6] 2142 	inc	sp
   0C20 21r75r0C      [10] 2143 	ld	hl, #___str_26
   0C23 E5            [11] 2144 	push	hl
   0C24 CDr7Ar03      [17] 2145 	call	_PrintText
   0C27 F1            [10] 2146 	pop	af
                           2147 ;src/main.c:722: PrintNumber(highScore, 5, 61, 6, 1); // high score
   0C28 33            [ 6] 2148 	inc	sp
   0C29 21 06 01      [10] 2149 	ld	hl,#0x0106
   0C2C E3            [19] 2150 	ex	(sp),hl
   0C2D 21 05 3D      [10] 2151 	ld	hl, #0x3d05
   0C30 E5            [11] 2152 	push	hl
   0C31 2Ar09r00      [16] 2153 	ld	hl, (_highScore)
   0C34 E5            [11] 2154 	push	hl
   0C35 CDrABr02      [17] 2155 	call	_PrintNumber
   0C38 21 06 00      [10] 2156 	ld	hl, #6
   0C3B 39            [11] 2157 	add	hl, sp
   0C3C F9            [ 6] 2158 	ld	sp, hl
                           2159 ;src/main.c:723: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 60, 16), cpct_px2byteM0(BG_COLOR, BG_COLOR), 16, 8); // key
   0C3D 21 01 01      [10] 2160 	ld	hl, #0x0101
   0C40 E5            [11] 2161 	push	hl
   0C41 CDr00r00      [17] 2162 	call	_cpct_px2byteM0
   0C44 26 00         [ 7] 2163 	ld	h, #0x00
   0C46 01 10 08      [10] 2164 	ld	bc, #0x0810
   0C49 C5            [11] 2165 	push	bc
   0C4A E5            [11] 2166 	push	hl
   0C4B 21 DC C0      [10] 2167 	ld	hl, #0xc0dc
   0C4E E5            [11] 2168 	push	hl
   0C4F CDr00r00      [17] 2169 	call	_cpct_drawSolidBox
                           2170 ;src/main.c:724: PrintText("KEY:", 47, 15, 1);
   0C52 21 0F 01      [10] 2171 	ld	hl, #0x010f
   0C55 E5            [11] 2172 	push	hl
   0C56 3E 2F         [ 7] 2173 	ld	a, #0x2f
   0C58 F5            [11] 2174 	push	af
   0C59 33            [ 6] 2175 	inc	sp
   0C5A 21r7Br0C      [10] 2176 	ld	hl, #___str_27
   0C5D E5            [11] 2177 	push	hl
   0C5E CDr7Ar03      [17] 2178 	call	_PrintText
   0C61 F1            [10] 2179 	pop	af
   0C62 F1            [10] 2180 	pop	af
   0C63 33            [ 6] 2181 	inc	sp
   0C64 C9            [10] 2182 	ret
   0C65                    2183 ___str_22:
   0C65 30 30 30 30        2184 	.ascii "0000"
   0C69 00                 2185 	.db 0x00
   0C6A                    2186 ___str_23:
   0C6A 30 30              2187 	.ascii "00"
   0C6C 00                 2188 	.db 0x00
   0C6D                    2189 ___str_24:
   0C6D 3C                 2190 	.ascii "<"
   0C6E 00                 2191 	.db 0x00
   0C6F                    2192 ___str_25:
   0C6F 48 49 47 48 3A     2193 	.ascii "HIGH:"
   0C74 00                 2194 	.db 0x00
   0C75                    2195 ___str_26:
   0C75 30 30 30 30 30     2196 	.ascii "00000"
   0C7A 00                 2197 	.db 0x00
   0C7B                    2198 ___str_27:
   0C7B 4B 45 59 3A        2199 	.ascii "KEY:"
   0C7F 00                 2200 	.db 0x00
                           2201 ;src/main.c:730: void RefreshScoreboard() { 
                           2202 ;	---------------------------------
                           2203 ; Function RefreshScoreboard
                           2204 ; ---------------------------------
   0C80                    2205 _RefreshScoreboard::
                           2206 ;src/main.c:732: PrintNumber(spr[0].lives_speed,  1,  8, 6, 1); 		// lives
   0C80 21r44r00      [10] 2207 	ld	hl, #_spr + 11
   0C83 4E            [ 7] 2208 	ld	c, (hl)
   0C84 06 00         [ 7] 2209 	ld	b, #0x00
   0C86 21 06 01      [10] 2210 	ld	hl, #0x0106
   0C89 E5            [11] 2211 	push	hl
   0C8A 21 01 08      [10] 2212 	ld	hl, #0x0801
   0C8D E5            [11] 2213 	push	hl
   0C8E C5            [11] 2214 	push	bc
   0C8F CDrABr02      [17] 2215 	call	_PrintNumber
   0C92 21 06 00      [10] 2216 	ld	hl, #6
   0C95 39            [11] 2217 	add	hl, sp
   0C96 F9            [ 6] 2218 	ld	sp, hl
                           2219 ;src/main.c:733: PrintNumber(score[0], 4, 14, 6, 1);		 			// current score
   0C97 2Ar05r00      [16] 2220 	ld	hl, (#_score + 0)
   0C9A 01 06 01      [10] 2221 	ld	bc, #0x0106
   0C9D C5            [11] 2222 	push	bc
   0C9E 01 04 0E      [10] 2223 	ld	bc, #0x0e04
   0CA1 C5            [11] 2224 	push	bc
   0CA2 E5            [11] 2225 	push	hl
   0CA3 CDrABr02      [17] 2226 	call	_PrintNumber
   0CA6 21 06 00      [10] 2227 	ld	hl, #6
   0CA9 39            [11] 2228 	add	hl, sp
   0CAA F9            [ 6] 2229 	ld	sp, hl
                           2230 ;src/main.c:734: PrintText("0", 32, 6, 1);
   0CAB 21 06 01      [10] 2231 	ld	hl, #0x0106
   0CAE E5            [11] 2232 	push	hl
   0CAF 3E 20         [ 7] 2233 	ld	a, #0x20
   0CB1 F5            [11] 2234 	push	af
   0CB2 33            [ 6] 2235 	inc	sp
   0CB3 21r97r0D      [10] 2236 	ld	hl, #___str_28
   0CB6 E5            [11] 2237 	push	hl
   0CB7 CDr7Ar03      [17] 2238 	call	_PrintText
   0CBA F1            [10] 2239 	pop	af
   0CBB F1            [10] 2240 	pop	af
   0CBC 33            [ 6] 2241 	inc	sp
                           2242 ;src/main.c:735: PrintNumber(coinScore[0], 2, 32, 6, 1); 			// coin score
   0CBD 21r0Dr00      [10] 2243 	ld	hl, #_coinScore + 0
   0CC0 4E            [ 7] 2244 	ld	c, (hl)
   0CC1 06 00         [ 7] 2245 	ld	b, #0x00
   0CC3 21 06 01      [10] 2246 	ld	hl, #0x0106
   0CC6 E5            [11] 2247 	push	hl
   0CC7 21 02 20      [10] 2248 	ld	hl, #0x2002
   0CCA E5            [11] 2249 	push	hl
   0CCB C5            [11] 2250 	push	bc
   0CCC CDrABr02      [17] 2251 	call	_PrintNumber
   0CCF 21 06 00      [10] 2252 	ld	hl, #6
   0CD2 39            [11] 2253 	add	hl, sp
   0CD3 F9            [ 6] 2254 	ld	sp, hl
                           2255 ;src/main.c:736: PrintText("0", 32, 15, 1);
   0CD4 21 0F 01      [10] 2256 	ld	hl, #0x010f
   0CD7 E5            [11] 2257 	push	hl
   0CD8 3E 20         [ 7] 2258 	ld	a, #0x20
   0CDA F5            [11] 2259 	push	af
   0CDB 33            [ 6] 2260 	inc	sp
   0CDC 21r97r0D      [10] 2261 	ld	hl, #___str_28
   0CDF E5            [11] 2262 	push	hl
   0CE0 CDr7Ar03      [17] 2263 	call	_PrintText
   0CE3 F1            [10] 2264 	pop	af
   0CE4 F1            [10] 2265 	pop	af
   0CE5 33            [ 6] 2266 	inc	sp
                           2267 ;src/main.c:737: PrintNumber(potScore[0], 2, 32, 15, 1); 			// potion score
   0CE6 21r0Br00      [10] 2268 	ld	hl, #_potScore + 0
   0CE9 4E            [ 7] 2269 	ld	c, (hl)
   0CEA 06 00         [ 7] 2270 	ld	b, #0x00
   0CEC 21 0F 01      [10] 2271 	ld	hl, #0x010f
   0CEF E5            [11] 2272 	push	hl
   0CF0 21 02 20      [10] 2273 	ld	hl, #0x2002
   0CF3 E5            [11] 2274 	push	hl
   0CF4 C5            [11] 2275 	push	bc
   0CF5 CDrABr02      [17] 2276 	call	_PrintNumber
   0CF8 21 06 00      [10] 2277 	ld	hl, #6
   0CFB 39            [11] 2278 	add	hl, sp
   0CFC F9            [ 6] 2279 	ld	sp, hl
                           2280 ;src/main.c:739: if (TwoPlayers) {
   0CFD 3Ar04r00      [13] 2281 	ld	a,(#_TwoPlayers + 0)
   0D00 B7            [ 4] 2282 	or	a, a
   0D01 CAr82r0D      [10] 2283 	jp	Z, 00102$
                           2284 ;src/main.c:740: PrintNumber(spr[1].lives_speed,  1, 47, 6, 1); 	// lives
   0D04 21r53r00      [10] 2285 	ld	hl, #_spr + 26
   0D07 4E            [ 7] 2286 	ld	c, (hl)
   0D08 06 00         [ 7] 2287 	ld	b, #0x00
   0D0A 21 06 01      [10] 2288 	ld	hl, #0x0106
   0D0D E5            [11] 2289 	push	hl
   0D0E 21 01 2F      [10] 2290 	ld	hl, #0x2f01
   0D11 E5            [11] 2291 	push	hl
   0D12 C5            [11] 2292 	push	bc
   0D13 CDrABr02      [17] 2293 	call	_PrintNumber
   0D16 21 06 00      [10] 2294 	ld	hl, #6
   0D19 39            [11] 2295 	add	hl, sp
   0D1A F9            [ 6] 2296 	ld	sp, hl
                           2297 ;src/main.c:741: PrintNumber(score[1], 4, 53, 6, 1);		 		// current score
   0D1B 2Ar07r00      [16] 2298 	ld	hl, (#_score + 2)
   0D1E 01 06 01      [10] 2299 	ld	bc, #0x0106
   0D21 C5            [11] 2300 	push	bc
   0D22 01 04 35      [10] 2301 	ld	bc, #0x3504
   0D25 C5            [11] 2302 	push	bc
   0D26 E5            [11] 2303 	push	hl
   0D27 CDrABr02      [17] 2304 	call	_PrintNumber
   0D2A 21 06 00      [10] 2305 	ld	hl, #6
   0D2D 39            [11] 2306 	add	hl, sp
   0D2E F9            [ 6] 2307 	ld	sp, hl
                           2308 ;src/main.c:742: PrintText("0", 71, 6, 1);
   0D2F 21 06 01      [10] 2309 	ld	hl, #0x0106
   0D32 E5            [11] 2310 	push	hl
   0D33 3E 47         [ 7] 2311 	ld	a, #0x47
   0D35 F5            [11] 2312 	push	af
   0D36 33            [ 6] 2313 	inc	sp
   0D37 21r97r0D      [10] 2314 	ld	hl, #___str_28
   0D3A E5            [11] 2315 	push	hl
   0D3B CDr7Ar03      [17] 2316 	call	_PrintText
   0D3E F1            [10] 2317 	pop	af
   0D3F F1            [10] 2318 	pop	af
   0D40 33            [ 6] 2319 	inc	sp
                           2320 ;src/main.c:743: PrintNumber(coinScore[1], 2, 71, 6, 1); 		// coin score
   0D41 21r0Er00      [10] 2321 	ld	hl, #_coinScore + 1
   0D44 4E            [ 7] 2322 	ld	c, (hl)
   0D45 06 00         [ 7] 2323 	ld	b, #0x00
   0D47 21 06 01      [10] 2324 	ld	hl, #0x0106
   0D4A E5            [11] 2325 	push	hl
   0D4B 21 02 47      [10] 2326 	ld	hl, #0x4702
   0D4E E5            [11] 2327 	push	hl
   0D4F C5            [11] 2328 	push	bc
   0D50 CDrABr02      [17] 2329 	call	_PrintNumber
   0D53 21 06 00      [10] 2330 	ld	hl, #6
   0D56 39            [11] 2331 	add	hl, sp
   0D57 F9            [ 6] 2332 	ld	sp, hl
                           2333 ;src/main.c:744: PrintText("0", 71, 15, 1);
   0D58 21 0F 01      [10] 2334 	ld	hl, #0x010f
   0D5B E5            [11] 2335 	push	hl
   0D5C 3E 47         [ 7] 2336 	ld	a, #0x47
   0D5E F5            [11] 2337 	push	af
   0D5F 33            [ 6] 2338 	inc	sp
   0D60 21r97r0D      [10] 2339 	ld	hl, #___str_28
   0D63 E5            [11] 2340 	push	hl
   0D64 CDr7Ar03      [17] 2341 	call	_PrintText
   0D67 F1            [10] 2342 	pop	af
   0D68 F1            [10] 2343 	pop	af
   0D69 33            [ 6] 2344 	inc	sp
                           2345 ;src/main.c:745: PrintNumber(potScore[1], 2, 71, 15, 1); 		// potion score
   0D6A 21r0Cr00      [10] 2346 	ld	hl, #_potScore + 1
   0D6D 4E            [ 7] 2347 	ld	c, (hl)
   0D6E 06 00         [ 7] 2348 	ld	b, #0x00
   0D70 21 0F 01      [10] 2349 	ld	hl, #0x010f
   0D73 E5            [11] 2350 	push	hl
   0D74 21 02 47      [10] 2351 	ld	hl, #0x4702
   0D77 E5            [11] 2352 	push	hl
   0D78 C5            [11] 2353 	push	bc
   0D79 CDrABr02      [17] 2354 	call	_PrintNumber
   0D7C 21 06 00      [10] 2355 	ld	hl, #6
   0D7F 39            [11] 2356 	add	hl, sp
   0D80 F9            [ 6] 2357 	ld	sp, hl
   0D81 C9            [10] 2358 	ret
   0D82                    2359 00102$:
                           2360 ;src/main.c:748: PrintNumber(highScore, 5, 61, 6, 1);
   0D82 21 06 01      [10] 2361 	ld	hl, #0x0106
   0D85 E5            [11] 2362 	push	hl
   0D86 21 05 3D      [10] 2363 	ld	hl, #0x3d05
   0D89 E5            [11] 2364 	push	hl
   0D8A 2Ar09r00      [16] 2365 	ld	hl, (_highScore)
   0D8D E5            [11] 2366 	push	hl
   0D8E CDrABr02      [17] 2367 	call	_PrintNumber
   0D91 21 06 00      [10] 2368 	ld	hl, #6
   0D94 39            [11] 2369 	add	hl, sp
   0D95 F9            [ 6] 2370 	ld	sp, hl
   0D96 C9            [10] 2371 	ret
   0D97                    2372 ___str_28:
   0D97 30                 2373 	.ascii "0"
   0D98 00                 2374 	.db 0x00
                           2375 ;src/main.c:765: void ResetObjData(u8 player) __z88dk_fastcall {
                           2376 ;	---------------------------------
                           2377 ; Function ResetObjData
                           2378 ; ---------------------------------
   0D99                    2379 _ResetObjData::
   0D99 4D            [ 4] 2380 	ld	c, l
                           2381 ;src/main.c:766: spr[player].objNum_mov = 0; // number of objects
   0D9A 11r39r00      [10] 2382 	ld	de, #_spr+0
   0D9D 06 00         [ 7] 2383 	ld	b,#0x00
   0D9F 69            [ 4] 2384 	ld	l, c
   0DA0 60            [ 4] 2385 	ld	h, b
   0DA1 29            [11] 2386 	add	hl, hl
   0DA2 09            [11] 2387 	add	hl, bc
   0DA3 29            [11] 2388 	add	hl, hl
   0DA4 09            [11] 2389 	add	hl, bc
   0DA5 29            [11] 2390 	add	hl, hl
   0DA6 09            [11] 2391 	add	hl, bc
   0DA7 19            [11] 2392 	add	hl, de
   0DA8 11 0C 00      [10] 2393 	ld	de, #0x000c
   0DAB 19            [11] 2394 	add	hl, de
   0DAC 36 00         [10] 2395 	ld	(hl), #0x00
                           2396 ;src/main.c:767: potScore[player] = 0; // potion value
   0DAE 11r0Br00      [10] 2397 	ld	de, #_potScore+0
   0DB1 69            [ 4] 2398 	ld	l,c
   0DB2 26 00         [ 7] 2399 	ld	h,#0x00
   0DB4 19            [11] 2400 	add	hl, de
   0DB5 36 00         [10] 2401 	ld	(hl), #0x00
                           2402 ;src/main.c:768: coinScore[player] = 0; // money
   0DB7 11r0Dr00      [10] 2403 	ld	de, #_coinScore+0
   0DBA 69            [ 4] 2404 	ld	l,c
   0DBB 26 00         [ 7] 2405 	ld	h,#0x00
   0DBD 19            [11] 2406 	add	hl, de
   0DBE 36 00         [10] 2407 	ld	(hl), #0x00
                           2408 ;src/main.c:770: if (player == 0)
   0DC0 79            [ 4] 2409 	ld	a, c
   0DC1 B7            [ 4] 2410 	or	a, a
   0DC2 20 16         [12] 2411 	jr	NZ,00102$
                           2412 ;src/main.c:771: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 7, 16), cpct_px2byteM0(BG_COLOR, BG_COLOR), 20, 8);
   0DC4 21 01 01      [10] 2413 	ld	hl, #0x0101
   0DC7 E5            [11] 2414 	push	hl
   0DC8 CDr00r00      [17] 2415 	call	_cpct_px2byteM0
   0DCB 26 00         [ 7] 2416 	ld	h, #0x00
   0DCD 01 14 08      [10] 2417 	ld	bc, #0x0814
   0DD0 C5            [11] 2418 	push	bc
   0DD1 E5            [11] 2419 	push	hl
   0DD2 21 A7 C0      [10] 2420 	ld	hl, #0xc0a7
   0DD5 E5            [11] 2421 	push	hl
   0DD6 CDr00r00      [17] 2422 	call	_cpct_drawSolidBox
   0DD9 C9            [10] 2423 	ret
   0DDA                    2424 00102$:
                           2425 ;src/main.c:773: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 46, 16), cpct_px2byteM0(BG_COLOR, BG_COLOR), 20, 8);
   0DDA 21 01 01      [10] 2426 	ld	hl, #0x0101
   0DDD E5            [11] 2427 	push	hl
   0DDE CDr00r00      [17] 2428 	call	_cpct_px2byteM0
   0DE1 26 00         [ 7] 2429 	ld	h, #0x00
   0DE3 01 14 08      [10] 2430 	ld	bc, #0x0814
   0DE6 C5            [11] 2431 	push	bc
   0DE7 E5            [11] 2432 	push	hl
   0DE8 21 CE C0      [10] 2433 	ld	hl, #0xc0ce
   0DEB E5            [11] 2434 	push	hl
   0DEC CDr00r00      [17] 2435 	call	_cpct_drawSolidBox
   0DEF C9            [10] 2436 	ret
                           2437 ;src/main.c:778: void PrintObject(u8 nObj, u8 objX, u8 objY) {
                           2438 ;	---------------------------------
                           2439 ; Function PrintObject
                           2440 ; ---------------------------------
   0DF0                    2441 _PrintObject::
   0DF0 DD E5         [15] 2442 	push	ix
   0DF2 DD 21 00 00   [14] 2443 	ld	ix,#0
   0DF6 DD 39         [15] 2444 	add	ix,sp
                           2445 ;src/main.c:780: OBJ_W, OBJ_H, g_maskTable);
                           2446 ;src/main.c:779: cpct_drawSpriteMaskedAlignedTable(g_objects[nObj], cpct_getScreenPtr(CPCT_VMEM_START, objX, objY),
   0DF8 DD 66 06      [19] 2447 	ld	h, 6 (ix)
   0DFB DD 6E 05      [19] 2448 	ld	l, 5 (ix)
   0DFE E5            [11] 2449 	push	hl
   0DFF 21 00 C0      [10] 2450 	ld	hl, #0xc000
   0E02 E5            [11] 2451 	push	hl
   0E03 CDr00r00      [17] 2452 	call	_cpct_getScreenPtr
   0E06 4D            [ 4] 2453 	ld	c, l
   0E07 44            [ 4] 2454 	ld	b, h
   0E08 11r00r00      [10] 2455 	ld	de, #_g_objects+0
   0E0B DD 6E 04      [19] 2456 	ld	l, 4 (ix)
   0E0E 26 00         [ 7] 2457 	ld	h, #0x00
   0E10 29            [11] 2458 	add	hl, hl
   0E11 29            [11] 2459 	add	hl, hl
   0E12 29            [11] 2460 	add	hl, hl
   0E13 29            [11] 2461 	add	hl, hl
   0E14 29            [11] 2462 	add	hl, hl
   0E15 19            [11] 2463 	add	hl, de
   0E16 11r00r01      [10] 2464 	ld	de, #_g_maskTable
   0E19 D5            [11] 2465 	push	de
   0E1A 11 04 08      [10] 2466 	ld	de, #0x0804
   0E1D D5            [11] 2467 	push	de
   0E1E C5            [11] 2468 	push	bc
   0E1F E5            [11] 2469 	push	hl
   0E20 CDr00r00      [17] 2470 	call	_cpct_drawSpriteMaskedAlignedTable
   0E23 DD E1         [14] 2471 	pop	ix
   0E25 C9            [10] 2472 	ret
                           2473 ;src/main.c:785: void DeleteObject(u8 index) __z88dk_fastcall {
                           2474 ;	---------------------------------
                           2475 ; Function DeleteObject
                           2476 ; ---------------------------------
   0E26                    2477 _DeleteObject::
   0E26 DD E5         [15] 2478 	push	ix
   0E28 DD 21 00 00   [14] 2479 	ld	ix,#0
   0E2C DD 39         [15] 2480 	add	ix,sp
   0E2E F5            [11] 2481 	push	af
   0E2F 3B            [ 6] 2482 	dec	sp
   0E30 4D            [ 4] 2483 	ld	c, l
                           2484 ;src/main.c:787: 2 + (objX[index] & 1), 2 + (objY[index] & 3 ? 1 : 0), MAP_W, 
   0E31 11rABr00      [10] 2485 	ld	de, #_objY+0
   0E34 69            [ 4] 2486 	ld	l,c
   0E35 26 00         [ 7] 2487 	ld	h,#0x00
   0E37 19            [11] 2488 	add	hl, de
   0E38 46            [ 7] 2489 	ld	b, (hl)
   0E39 78            [ 4] 2490 	ld	a, b
   0E3A E6 03         [ 7] 2491 	and	a, #0x03
   0E3C 28 04         [12] 2492 	jr	Z,00103$
   0E3E 3E 01         [ 7] 2493 	ld	a, #0x01
   0E40 18 02         [12] 2494 	jr	00104$
   0E42                    2495 00103$:
   0E42 3E 00         [ 7] 2496 	ld	a, #0x00
   0E44                    2497 00104$:
   0E44 C6 02         [ 7] 2498 	add	a, #0x02
   0E46 DD 77 FF      [19] 2499 	ld	-1 (ix), a
   0E49 11rA9r00      [10] 2500 	ld	de, #_objX+0
   0E4C 69            [ 4] 2501 	ld	l,c
   0E4D 26 00         [ 7] 2502 	ld	h,#0x00
   0E4F 19            [11] 2503 	add	hl, de
   0E50 5E            [ 7] 2504 	ld	e, (hl)
   0E51 7B            [ 4] 2505 	ld	a, e
   0E52 E6 01         [ 7] 2506 	and	a, #0x01
   0E54 57            [ 4] 2507 	ld	d, a
   0E55 14            [ 4] 2508 	inc	d
   0E56 14            [ 4] 2509 	inc	d
                           2510 ;src/main.c:786: cpct_etm_drawTileBox2x4(objX[index] / 2, (objY[index] - ORIG_MAP_Y) / 4,
   0E57 48            [ 4] 2511 	ld	c, b
   0E58 06 00         [ 7] 2512 	ld	b, #0x00
   0E5A 79            [ 4] 2513 	ld	a, c
   0E5B C6 E0         [ 7] 2514 	add	a, #0xe0
   0E5D DD 77 FD      [19] 2515 	ld	-3 (ix), a
   0E60 78            [ 4] 2516 	ld	a, b
   0E61 CE FF         [ 7] 2517 	adc	a, #0xff
   0E63 DD 77 FE      [19] 2518 	ld	-2 (ix), a
   0E66 E1            [10] 2519 	pop	hl
   0E67 E5            [11] 2520 	push	hl
   0E68 DD CB FE 7E   [20] 2521 	bit	7, -2 (ix)
   0E6C 28 04         [12] 2522 	jr	Z,00105$
   0E6E 21 E3 FF      [10] 2523 	ld	hl, #0xffe3
   0E71 09            [11] 2524 	add	hl, bc
   0E72                    2525 00105$:
   0E72 CB 2C         [ 8] 2526 	sra	h
   0E74 CB 1D         [ 8] 2527 	rr	l
   0E76 CB 2C         [ 8] 2528 	sra	h
   0E78 CB 1D         [ 8] 2529 	rr	l
   0E7A 4D            [ 4] 2530 	ld	c, l
   0E7B CB 3B         [ 8] 2531 	srl	e
   0E7D 21 71 0F      [10] 2532 	ld	hl, #0x0f71
   0E80 E5            [11] 2533 	push	hl
   0E81 21 40 C1      [10] 2534 	ld	hl, #0xc140
   0E84 E5            [11] 2535 	push	hl
   0E85 3E 28         [ 7] 2536 	ld	a, #0x28
   0E87 F5            [11] 2537 	push	af
   0E88 33            [ 6] 2538 	inc	sp
   0E89 DD 7E FF      [19] 2539 	ld	a, -1 (ix)
   0E8C F5            [11] 2540 	push	af
   0E8D 33            [ 6] 2541 	inc	sp
   0E8E D5            [11] 2542 	push	de
   0E8F 33            [ 6] 2543 	inc	sp
   0E90 51            [ 4] 2544 	ld	d, c
   0E91 D5            [11] 2545 	push	de
   0E92 CDr00r00      [17] 2546 	call	_cpct_etm_drawTileBox2x4
   0E95 DD F9         [10] 2547 	ld	sp, ix
   0E97 DD E1         [14] 2548 	pop	ix
   0E99 C9            [10] 2549 	ret
                           2550 ;src/main.c:793: void PrintDust(u8 nFrame, u8 index) {
                           2551 ;	---------------------------------
                           2552 ; Function PrintDust
                           2553 ; ---------------------------------
   0E9A                    2554 _PrintDust::
   0E9A DD E5         [15] 2555 	push	ix
   0E9C DD 21 00 00   [14] 2556 	ld	ix,#0
   0EA0 DD 39         [15] 2557 	add	ix,sp
                           2558 ;src/main.c:796: OBJ_W, OBJ_H, g_maskTable);
                           2559 ;src/main.c:795: cpct_getScreenPtr(CPCT_VMEM_START, objX[index], objY[index]), 
   0EA2 01rABr00      [10] 2560 	ld	bc, #_objY+0
   0EA5 DD 6E 05      [19] 2561 	ld	l,5 (ix)
   0EA8 26 00         [ 7] 2562 	ld	h,#0x00
   0EAA 09            [11] 2563 	add	hl, bc
   0EAB 56            [ 7] 2564 	ld	d, (hl)
   0EAC 01rA9r00      [10] 2565 	ld	bc, #_objX+0
   0EAF DD 6E 05      [19] 2566 	ld	l,5 (ix)
   0EB2 26 00         [ 7] 2567 	ld	h,#0x00
   0EB4 09            [11] 2568 	add	hl, bc
   0EB5 5E            [ 7] 2569 	ld	e, (hl)
   0EB6 D5            [11] 2570 	push	de
   0EB7 21 00 C0      [10] 2571 	ld	hl, #0xc000
   0EBA E5            [11] 2572 	push	hl
   0EBB CDr00r00      [17] 2573 	call	_cpct_getScreenPtr
   0EBE 4D            [ 4] 2574 	ld	c, l
   0EBF 44            [ 4] 2575 	ld	b, h
                           2576 ;src/main.c:794: cpct_drawSpriteMaskedAlignedTable(g_dust[nFrame], 
   0EC0 11r00r00      [10] 2577 	ld	de, #_g_dust+0
   0EC3 DD 6E 04      [19] 2578 	ld	l, 4 (ix)
   0EC6 26 00         [ 7] 2579 	ld	h, #0x00
   0EC8 29            [11] 2580 	add	hl, hl
   0EC9 29            [11] 2581 	add	hl, hl
   0ECA 29            [11] 2582 	add	hl, hl
   0ECB 29            [11] 2583 	add	hl, hl
   0ECC 29            [11] 2584 	add	hl, hl
   0ECD 19            [11] 2585 	add	hl, de
   0ECE 11r00r01      [10] 2586 	ld	de, #_g_maskTable
   0ED1 D5            [11] 2587 	push	de
   0ED2 11 04 08      [10] 2588 	ld	de, #0x0804
   0ED5 D5            [11] 2589 	push	de
   0ED6 C5            [11] 2590 	push	bc
   0ED7 E5            [11] 2591 	push	hl
   0ED8 CDr00r00      [17] 2592 	call	_cpct_drawSpriteMaskedAlignedTable
   0EDB DD E1         [14] 2593 	pop	ix
   0EDD C9            [10] 2594 	ret
                           2595 ;src/main.c:801: void PrintCoin(u8 nFrame, u8 index) {
                           2596 ;	---------------------------------
                           2597 ; Function PrintCoin
                           2598 ; ---------------------------------
   0EDE                    2599 _PrintCoin::
   0EDE DD E5         [15] 2600 	push	ix
   0EE0 DD 21 00 00   [14] 2601 	ld	ix,#0
   0EE4 DD 39         [15] 2602 	add	ix,sp
                           2603 ;src/main.c:804: 3, OBJ_H, g_maskTable);
                           2604 ;src/main.c:803: cpct_getScreenPtr(CPCT_VMEM_START, objX[index], objY[index]), 
   0EE6 01rABr00      [10] 2605 	ld	bc, #_objY+0
   0EE9 DD 6E 05      [19] 2606 	ld	l,5 (ix)
   0EEC 26 00         [ 7] 2607 	ld	h,#0x00
   0EEE 09            [11] 2608 	add	hl, bc
   0EEF 56            [ 7] 2609 	ld	d, (hl)
   0EF0 01rA9r00      [10] 2610 	ld	bc, #_objX+0
   0EF3 DD 6E 05      [19] 2611 	ld	l,5 (ix)
   0EF6 26 00         [ 7] 2612 	ld	h,#0x00
   0EF8 09            [11] 2613 	add	hl, bc
   0EF9 5E            [ 7] 2614 	ld	e, (hl)
   0EFA D5            [11] 2615 	push	de
   0EFB 21 00 C0      [10] 2616 	ld	hl, #0xc000
   0EFE E5            [11] 2617 	push	hl
   0EFF CDr00r00      [17] 2618 	call	_cpct_getScreenPtr
   0F02 4D            [ 4] 2619 	ld	c, l
   0F03 44            [ 4] 2620 	ld	b, h
                           2621 ;src/main.c:802: cpct_drawSpriteMaskedAlignedTable(g_coin[nFrame], 
   0F04 DD 5E 04      [19] 2622 	ld	e,4 (ix)
   0F07 16 00         [ 7] 2623 	ld	d,#0x00
   0F09 6B            [ 4] 2624 	ld	l, e
   0F0A 62            [ 4] 2625 	ld	h, d
   0F0B 29            [11] 2626 	add	hl, hl
   0F0C 19            [11] 2627 	add	hl, de
   0F0D 29            [11] 2628 	add	hl, hl
   0F0E 29            [11] 2629 	add	hl, hl
   0F0F 29            [11] 2630 	add	hl, hl
   0F10 11r00r00      [10] 2631 	ld	de, #_g_coin
   0F13 19            [11] 2632 	add	hl, de
   0F14 11r00r01      [10] 2633 	ld	de, #_g_maskTable
   0F17 D5            [11] 2634 	push	de
   0F18 11 03 08      [10] 2635 	ld	de, #0x0803
   0F1B D5            [11] 2636 	push	de
   0F1C C5            [11] 2637 	push	bc
   0F1D E5            [11] 2638 	push	hl
   0F1E CDr00r00      [17] 2639 	call	_cpct_drawSpriteMaskedAlignedTable
   0F21 DD E1         [14] 2640 	pop	ix
   0F23 C9            [10] 2641 	ret
                           2642 ;src/main.c:809: void DeleteObjectInStore() {
                           2643 ;	---------------------------------
                           2644 ; Function DeleteObjectInStore
                           2645 ; ---------------------------------
   0F24                    2646 _DeleteObjectInStore::
                           2647 ;src/main.c:810: if (TwoPlayers) return;
   0F24 3Ar04r00      [13] 2648 	ld	a,(#_TwoPlayers + 0)
   0F27 B7            [ 4] 2649 	or	a, a
   0F28 C0            [11] 2650 	ret	NZ
                           2651 ;src/main.c:812: 2 + (storeX & 1), 2 + (storeY & 3 ? 1 : 0),	MAP_W, 
   0F29 3Ar1Ar00      [13] 2652 	ld	a,(#_storeY + 0)
   0F2C E6 03         [ 7] 2653 	and	a, #0x03
   0F2E 28 04         [12] 2654 	jr	Z,00105$
   0F30 16 01         [ 7] 2655 	ld	d, #0x01
   0F32 18 02         [12] 2656 	jr	00106$
   0F34                    2657 00105$:
   0F34 16 00         [ 7] 2658 	ld	d, #0x00
   0F36                    2659 00106$:
   0F36 14            [ 4] 2660 	inc	d
   0F37 14            [ 4] 2661 	inc	d
   0F38 3Ar19r00      [13] 2662 	ld	a,(#_storeX + 0)
   0F3B E6 01         [ 7] 2663 	and	a, #0x01
   0F3D 5F            [ 4] 2664 	ld	e, a
   0F3E 1C            [ 4] 2665 	inc	e
   0F3F 1C            [ 4] 2666 	inc	e
                           2667 ;src/main.c:811: cpct_etm_drawTileBox2x4(storeX / 2, storeY / 4,
   0F40 21r1Ar00      [10] 2668 	ld	hl,#_storeY + 0
   0F43 46            [ 7] 2669 	ld	b, (hl)
   0F44 CB 38         [ 8] 2670 	srl	b
   0F46 CB 38         [ 8] 2671 	srl	b
   0F48 21r19r00      [10] 2672 	ld	hl,#_storeX + 0
   0F4B 4E            [ 7] 2673 	ld	c, (hl)
   0F4C CB 39         [ 8] 2674 	srl	c
   0F4E 21 71 0F      [10] 2675 	ld	hl, #0x0f71
   0F51 E5            [11] 2676 	push	hl
   0F52 21 40 C1      [10] 2677 	ld	hl, #0xc140
   0F55 E5            [11] 2678 	push	hl
   0F56 3E 28         [ 7] 2679 	ld	a, #0x28
   0F58 F5            [11] 2680 	push	af
   0F59 33            [ 6] 2681 	inc	sp
   0F5A D5            [11] 2682 	push	de
   0F5B C5            [11] 2683 	push	bc
   0F5C CDr00r00      [17] 2684 	call	_cpct_etm_drawTileBox2x4
   0F5F C9            [10] 2685 	ret
                           2686 ;src/main.c:818: void PrintObjectInStore() {
                           2687 ;	---------------------------------
                           2688 ; Function PrintObjectInStore
                           2689 ; ---------------------------------
   0F60                    2690 _PrintObjectInStore::
                           2691 ;src/main.c:819: if (TwoPlayers) return;
   0F60 3Ar04r00      [13] 2692 	ld	a,(#_TwoPlayers + 0)
   0F63 B7            [ 4] 2693 	or	a, a
   0F64 C0            [11] 2694 	ret	NZ
                           2695 ;src/main.c:820: if (coinScore[0] == 0) return;
   0F65 3Ar0Dr00      [13] 2696 	ld	a, (#_coinScore + 0)
   0F68 B7            [ 4] 2697 	or	a, a
   0F69 C8            [11] 2698 	ret	Z
                           2699 ;src/main.c:822: if (coinScore[0] < 13)
   0F6A FE 0D         [ 7] 2700 	cp	a, #0x0d
   0F6C 30 08         [12] 2701 	jr	NC,00106$
                           2702 ;src/main.c:823: nPObj = coinScore[0] + 3; // assign the corresponding object to the available money
   0F6E 21rADr00      [10] 2703 	ld	hl, #_nPObj
   0F71 C6 03         [ 7] 2704 	add	a, #0x03
   0F73 77            [ 7] 2705 	ld	(hl), a
   0F74 18 05         [12] 2706 	jr	00107$
   0F76                    2707 00106$:
                           2708 ;src/main.c:825: nPObj = 15; // assign the most expensive object
   0F76 21rADr00      [10] 2709 	ld	hl,#_nPObj + 0
   0F79 36 0F         [10] 2710 	ld	(hl), #0x0f
   0F7B                    2711 00107$:
                           2712 ;src/main.c:827: PrintObject(nPObj, storeX, storeY + ORIG_MAP_Y);
   0F7B 3Ar1Ar00      [13] 2713 	ld	a,(#_storeY + 0)
   0F7E C6 20         [ 7] 2714 	add	a, #0x20
   0F80 47            [ 4] 2715 	ld	b, a
   0F81 C5            [11] 2716 	push	bc
   0F82 33            [ 6] 2717 	inc	sp
   0F83 3Ar19r00      [13] 2718 	ld	a, (_storeX)
   0F86 F5            [11] 2719 	push	af
   0F87 33            [ 6] 2720 	inc	sp
   0F88 3ArADr00      [13] 2721 	ld	a, (_nPObj)
   0F8B F5            [11] 2722 	push	af
   0F8C 33            [ 6] 2723 	inc	sp
   0F8D CDrF0r0D      [17] 2724 	call	_PrintObject
   0F90 F1            [10] 2725 	pop	af
   0F91 33            [ 6] 2726 	inc	sp
   0F92 C9            [10] 2727 	ret
                           2728 ;src/main.c:833: void CheckObject(u8 index) {	
                           2729 ;	---------------------------------
                           2730 ; Function CheckObject
                           2731 ; ---------------------------------
   0F93                    2732 _CheckObject::
   0F93 DD E5         [15] 2733 	push	ix
   0F95 DD 21 00 00   [14] 2734 	ld	ix,#0
   0F99 DD 39         [15] 2735 	add	ix,sp
   0F9B 21 F9 FF      [10] 2736 	ld	hl, #-7
   0F9E 39            [11] 2737 	add	hl, sp
   0F9F F9            [ 6] 2738 	ld	sp, hl
                           2739 ;src/main.c:834: i8 player = -1;
   0FA0 DD 36 F9 FF   [19] 2740 	ld	-7 (ix), #0xff
                           2741 ;src/main.c:836: if (nObj[index] != -1)	{
   0FA4 DD 7E 04      [19] 2742 	ld	a, 4 (ix)
   0FA7 C6rA7         [ 7] 2743 	add	a, #<(_nObj)
   0FA9 DD 77 FC      [19] 2744 	ld	-4 (ix), a
   0FAC 3E 00         [ 7] 2745 	ld	a, #0x00
   0FAE CEs00         [ 7] 2746 	adc	a, #>(_nObj)
   0FB0 DD 77 FD      [19] 2747 	ld	-3 (ix), a
   0FB3 DD 6E FC      [19] 2748 	ld	l,-4 (ix)
   0FB6 DD 66 FD      [19] 2749 	ld	h,-3 (ix)
   0FB9 4E            [ 7] 2750 	ld	c, (hl)
   0FBA 0C            [ 4] 2751 	inc	c
   0FBB CAr3Fr11      [10] 2752 	jp	Z,00124$
                           2753 ;src/main.c:837: if (SpriteCollision(objX[index], objY[index], &spr[0], 0)) player = 0; // player 1
   0FBE DD 7E 04      [19] 2754 	ld	a, 4 (ix)
   0FC1 C6rAB         [ 7] 2755 	add	a, #<(_objY)
   0FC3 DD 77 FA      [19] 2756 	ld	-6 (ix), a
   0FC6 3E 00         [ 7] 2757 	ld	a, #0x00
   0FC8 CEs00         [ 7] 2758 	adc	a, #>(_objY)
   0FCA DD 77 FB      [19] 2759 	ld	-5 (ix), a
   0FCD DD 6E FA      [19] 2760 	ld	l,-6 (ix)
   0FD0 DD 66 FB      [19] 2761 	ld	h,-5 (ix)
   0FD3 56            [ 7] 2762 	ld	d, (hl)
   0FD4 DD 7E 04      [19] 2763 	ld	a, 4 (ix)
   0FD7 C6rA9         [ 7] 2764 	add	a, #<(_objX)
   0FD9 DD 77 FE      [19] 2765 	ld	-2 (ix), a
   0FDC 3E 00         [ 7] 2766 	ld	a, #0x00
   0FDE CEs00         [ 7] 2767 	adc	a, #>(_objX)
   0FE0 DD 77 FF      [19] 2768 	ld	-1 (ix), a
   0FE3 DD 6E FE      [19] 2769 	ld	l,-2 (ix)
   0FE6 DD 66 FF      [19] 2770 	ld	h,-1 (ix)
   0FE9 46            [ 7] 2771 	ld	b, (hl)
   0FEA AF            [ 4] 2772 	xor	a, a
   0FEB F5            [11] 2773 	push	af
   0FEC 33            [ 6] 2774 	inc	sp
   0FED 21r39r00      [10] 2775 	ld	hl, #_spr
   0FF0 E5            [11] 2776 	push	hl
   0FF1 58            [ 4] 2777 	ld	e, b
   0FF2 D5            [11] 2778 	push	de
   0FF3 CDr03r1D      [17] 2779 	call	_SpriteCollision
   0FF6 F1            [10] 2780 	pop	af
   0FF7 F1            [10] 2781 	pop	af
   0FF8 33            [ 6] 2782 	inc	sp
   0FF9 7D            [ 4] 2783 	ld	a, l
   0FFA B7            [ 4] 2784 	or	a, a
   0FFB 28 06         [12] 2785 	jr	Z,00105$
   0FFD DD 36 F9 00   [19] 2786 	ld	-7 (ix), #0x00
   1001 18 2B         [12] 2787 	jr	00106$
   1003                    2788 00105$:
                           2789 ;src/main.c:838: else if (TwoPlayers && SpriteCollision(objX[index], objY[index], &spr[1], 0)) player = 1; // player 2
   1003 3Ar04r00      [13] 2790 	ld	a,(#_TwoPlayers + 0)
   1006 B7            [ 4] 2791 	or	a, a
   1007 28 25         [12] 2792 	jr	Z,00106$
   1009 DD 6E FA      [19] 2793 	ld	l,-6 (ix)
   100C DD 66 FB      [19] 2794 	ld	h,-5 (ix)
   100F 56            [ 7] 2795 	ld	d, (hl)
   1010 DD 6E FE      [19] 2796 	ld	l,-2 (ix)
   1013 DD 66 FF      [19] 2797 	ld	h,-1 (ix)
   1016 46            [ 7] 2798 	ld	b, (hl)
   1017 AF            [ 4] 2799 	xor	a, a
   1018 F5            [11] 2800 	push	af
   1019 33            [ 6] 2801 	inc	sp
   101A 21r48r00      [10] 2802 	ld	hl, #(_spr + 0x000f)
   101D E5            [11] 2803 	push	hl
   101E 58            [ 4] 2804 	ld	e, b
   101F D5            [11] 2805 	push	de
   1020 CDr03r1D      [17] 2806 	call	_SpriteCollision
   1023 F1            [10] 2807 	pop	af
   1024 F1            [10] 2808 	pop	af
   1025 33            [ 6] 2809 	inc	sp
   1026 7D            [ 4] 2810 	ld	a, l
   1027 B7            [ 4] 2811 	or	a, a
   1028 28 04         [12] 2812 	jr	Z,00106$
   102A DD 36 F9 01   [19] 2813 	ld	-7 (ix), #0x01
   102E                    2814 00106$:
                           2815 ;src/main.c:840: if (player >= 0)	{									
   102E DD CB F9 7E   [20] 2816 	bit	7, -7 (ix)
   1032 C2r3Fr11      [10] 2817 	jp	NZ, 00124$
                           2818 ;src/main.c:841: DeleteObject(index);
   1035 DD 6E 04      [19] 2819 	ld	l, 4 (ix)
   1038 CDr26r0E      [17] 2820 	call	_DeleteObject
                           2821 ;src/main.c:844: if (nObj[index] <= 1) {
   103B DD 6E FC      [19] 2822 	ld	l,-4 (ix)
   103E DD 66 FD      [19] 2823 	ld	h,-3 (ix)
   1041 4E            [ 7] 2824 	ld	c, (hl)
   1042 3E 01         [ 7] 2825 	ld	a, #0x01
   1044 91            [ 4] 2826 	sub	a, c
   1045 E2r4Ar10      [10] 2827 	jp	PO, 00183$
   1048 EE 80         [ 7] 2828 	xor	a, #0x80
   104A                    2829 00183$:
   104A FAr63r10      [10] 2830 	jp	M, 00112$
                           2831 ;src/main.c:845: if (nMap == 0 && !TwoPlayers && nTip<2) 
   104D 3Ar00r00      [13] 2832 	ld	a,(#_nMap + 0)
   1050 B7            [ 4] 2833 	or	a, a
   1051 20 10         [12] 2834 	jr	NZ,00112$
   1053 3Ar04r00      [13] 2835 	ld	a,(#_TwoPlayers + 0)
   1056 B7            [ 4] 2836 	or	a, a
   1057 20 0A         [12] 2837 	jr	NZ,00112$
   1059 3Ar1Fr00      [13] 2838 	ld	a,(#_nTip + 0)
   105C D6 02         [ 7] 2839 	sub	a, #0x02
   105E 30 03         [12] 2840 	jr	NC,00112$
                           2841 ;src/main.c:846: PrintTip(); // novice help
   1060 CDr79r08      [17] 2842 	call	_PrintTip
   1063                    2843 00112$:
                           2844 ;src/main.c:849: switch (nObj[index])
   1063 DD 6E FC      [19] 2845 	ld	l,-4 (ix)
   1066 DD 66 FD      [19] 2846 	ld	h,-3 (ix)
   1069 7E            [ 7] 2847 	ld	a, (hl)
   106A DD 77 FE      [19] 2848 	ld	-2 (ix), a
                           2849 ;src/main.c:852: coinScore[player]++;
   106D DD 5E F9      [19] 2850 	ld	e, -7 (ix)
   1070 DD 7E F9      [19] 2851 	ld	a, -7 (ix)
   1073 17            [ 4] 2852 	rla
   1074 9F            [ 4] 2853 	sbc	a, a
   1075 57            [ 4] 2854 	ld	d, a
                           2855 ;src/main.c:853: score[player] += 5;
   1076 4B            [ 4] 2856 	ld	c, e
   1077 42            [ 4] 2857 	ld	b, d
   1078 CB 21         [ 8] 2858 	sla	c
   107A CB 10         [ 8] 2859 	rl	b
                           2860 ;src/main.c:849: switch (nObj[index])
   107C DD 7E FE      [19] 2861 	ld	a, -2 (ix)
   107F B7            [ 4] 2862 	or	a, a
   1080 28 2D         [12] 2863 	jr	Z,00113$
   1082 DD 7E FE      [19] 2864 	ld	a, -2 (ix)
   1085 3D            [ 4] 2865 	dec	a
   1086 28 47         [12] 2866 	jr	Z,00114$
                           2867 ;src/main.c:866: if (spr[player].lives_speed < 9)
   1088 DD 5E F9      [19] 2868 	ld	e, -7 (ix)
   108B 7B            [ 4] 2869 	ld	a, e
   108C CB 07         [ 8] 2870 	rlc	a
   108E 9F            [ 4] 2871 	sbc	a, a
   108F 57            [ 4] 2872 	ld	d, a
   1090 6B            [ 4] 2873 	ld	l, e
   1091 62            [ 4] 2874 	ld	h, d
   1092 29            [11] 2875 	add	hl, hl
   1093 19            [11] 2876 	add	hl, de
   1094 29            [11] 2877 	add	hl, hl
   1095 19            [11] 2878 	add	hl, de
   1096 29            [11] 2879 	add	hl, hl
   1097 19            [11] 2880 	add	hl, de
   1098 EB            [ 4] 2881 	ex	de,hl
   1099 21r39r00      [10] 2882 	ld	hl, #_spr
   109C 19            [11] 2883 	add	hl,de
   109D EB            [ 4] 2884 	ex	de,hl
                           2885 ;src/main.c:849: switch (nObj[index])
   109E DD 7E FE      [19] 2886 	ld	a, -2 (ix)
   10A1 D6 02         [ 7] 2887 	sub	a, #0x02
   10A3 28 4E         [12] 2888 	jr	Z,00115$
   10A5 DD 7E FE      [19] 2889 	ld	a, -2 (ix)
   10A8 D6 03         [ 7] 2890 	sub	a, #0x03
   10AA 28 68         [12] 2891 	jr	Z,00118$
   10AC C3r2Er11      [10] 2892 	jp	00119$
                           2893 ;src/main.c:851: case 0:	{	// coin
   10AF                    2894 00113$:
                           2895 ;src/main.c:852: coinScore[player]++;
   10AF 21r0Dr00      [10] 2896 	ld	hl, #_coinScore+0
   10B2 19            [11] 2897 	add	hl, de
   10B3 5E            [ 7] 2898 	ld	e, (hl)
   10B4 1C            [ 4] 2899 	inc	e
   10B5 73            [ 7] 2900 	ld	(hl), e
                           2901 ;src/main.c:853: score[player] += 5;
   10B6 21r05r00      [10] 2902 	ld	hl, #_score+0
   10B9 09            [11] 2903 	add	hl, bc
   10BA E5            [11] 2904 	push	hl
   10BB 4E            [ 7] 2905 	ld	c, (hl)
   10BC 23            [ 6] 2906 	inc	hl
   10BD 46            [ 7] 2907 	ld	b, (hl)
   10BE E1            [10] 2908 	pop	hl
   10BF 03            [ 6] 2909 	inc	bc
   10C0 03            [ 6] 2910 	inc	bc
   10C1 03            [ 6] 2911 	inc	bc
   10C2 03            [ 6] 2912 	inc	bc
   10C3 03            [ 6] 2913 	inc	bc
   10C4 71            [ 7] 2914 	ld	(hl), c
   10C5 23            [ 6] 2915 	inc	hl
   10C6 70            [ 7] 2916 	ld	(hl), b
                           2917 ;src/main.c:854: DeleteObjectInStore();
   10C7 CDr24r0F      [17] 2918 	call	_DeleteObjectInStore
                           2919 ;src/main.c:855: PrintObjectInStore();
   10CA CDr60r0F      [17] 2920 	call	_PrintObjectInStore
                           2921 ;src/main.c:856: break;
   10CD 18 5F         [12] 2922 	jr	00119$
                           2923 ;src/main.c:858: case 1: {	// coin x5
   10CF                    2924 00114$:
                           2925 ;src/main.c:859: coinScore[player] += 5;
   10CF 21r0Dr00      [10] 2926 	ld	hl, #_coinScore
   10D2 19            [11] 2927 	add	hl, de
   10D3 7E            [ 7] 2928 	ld	a, (hl)
   10D4 C6 05         [ 7] 2929 	add	a, #0x05
   10D6 77            [ 7] 2930 	ld	(hl), a
                           2931 ;src/main.c:860: score[player] += 20;
   10D7 21r05r00      [10] 2932 	ld	hl, #_score
   10DA 09            [11] 2933 	add	hl, bc
   10DB E5            [11] 2934 	push	hl
   10DC 4E            [ 7] 2935 	ld	c, (hl)
   10DD 23            [ 6] 2936 	inc	hl
   10DE 46            [ 7] 2937 	ld	b, (hl)
   10DF E1            [10] 2938 	pop	hl
   10E0 79            [ 4] 2939 	ld	a, c
   10E1 C6 14         [ 7] 2940 	add	a, #0x14
   10E3 4F            [ 4] 2941 	ld	c, a
   10E4 78            [ 4] 2942 	ld	a, b
   10E5 CE 00         [ 7] 2943 	adc	a, #0x00
   10E7 47            [ 4] 2944 	ld	b, a
   10E8 71            [ 7] 2945 	ld	(hl), c
   10E9 23            [ 6] 2946 	inc	hl
   10EA 70            [ 7] 2947 	ld	(hl), b
                           2948 ;src/main.c:861: DeleteObjectInStore();
   10EB CDr24r0F      [17] 2949 	call	_DeleteObjectInStore
                           2950 ;src/main.c:862: PrintObjectInStore();
   10EE CDr60r0F      [17] 2951 	call	_PrintObjectInStore
                           2952 ;src/main.c:863: break;
   10F1 18 3B         [12] 2953 	jr	00119$
                           2954 ;src/main.c:865: case 2: {	// extra life
   10F3                    2955 00115$:
                           2956 ;src/main.c:866: if (spr[player].lives_speed < 9)
   10F3 21 0B 00      [10] 2957 	ld	hl, #0x000b
   10F6 19            [11] 2958 	add	hl, de
   10F7 7E            [ 7] 2959 	ld	a, (hl)
   10F8 FE 09         [ 7] 2960 	cp	a, #0x09
   10FA 30 02         [12] 2961 	jr	NC,00117$
                           2962 ;src/main.c:867: spr[player].lives_speed++;
   10FC 3C            [ 4] 2963 	inc	a
   10FD 77            [ 7] 2964 	ld	(hl), a
   10FE                    2965 00117$:
                           2966 ;src/main.c:868: score[player] += 30;
   10FE 21r05r00      [10] 2967 	ld	hl, #_score
   1101 09            [11] 2968 	add	hl, bc
   1102 E5            [11] 2969 	push	hl
   1103 4E            [ 7] 2970 	ld	c, (hl)
   1104 23            [ 6] 2971 	inc	hl
   1105 46            [ 7] 2972 	ld	b, (hl)
   1106 E1            [10] 2973 	pop	hl
   1107 79            [ 4] 2974 	ld	a, c
   1108 C6 1E         [ 7] 2975 	add	a, #0x1e
   110A 4F            [ 4] 2976 	ld	c, a
   110B 78            [ 4] 2977 	ld	a, b
   110C CE 00         [ 7] 2978 	adc	a, #0x00
   110E 47            [ 4] 2979 	ld	b, a
   110F 71            [ 7] 2980 	ld	(hl), c
   1110 23            [ 6] 2981 	inc	hl
   1111 70            [ 7] 2982 	ld	(hl), b
                           2983 ;src/main.c:869: break;
   1112 18 1A         [12] 2984 	jr	00119$
                           2985 ;src/main.c:871: case 3: {	// power up speed*2
   1114                    2986 00118$:
                           2987 ;src/main.c:872: spr[player].power_maxV = 255;
   1114 21 0E 00      [10] 2988 	ld	hl, #0x000e
   1117 19            [11] 2989 	add	hl, de
   1118 36 FF         [10] 2990 	ld	(hl), #0xff
                           2991 ;src/main.c:873: score[player] += 25;
   111A 21r05r00      [10] 2992 	ld	hl, #_score
   111D 09            [11] 2993 	add	hl, bc
   111E E5            [11] 2994 	push	hl
   111F 4E            [ 7] 2995 	ld	c, (hl)
   1120 23            [ 6] 2996 	inc	hl
   1121 46            [ 7] 2997 	ld	b, (hl)
   1122 E1            [10] 2998 	pop	hl
   1123 79            [ 4] 2999 	ld	a, c
   1124 C6 19         [ 7] 3000 	add	a, #0x19
   1126 4F            [ 4] 3001 	ld	c, a
   1127 78            [ 4] 3002 	ld	a, b
   1128 CE 00         [ 7] 3003 	adc	a, #0x00
   112A 47            [ 4] 3004 	ld	b, a
   112B 71            [ 7] 3005 	ld	(hl), c
   112C 23            [ 6] 3006 	inc	hl
   112D 70            [ 7] 3007 	ld	(hl), b
                           3008 ;src/main.c:875: }
   112E                    3009 00119$:
                           3010 ;src/main.c:876: RefreshHighScore(player);
   112E DD 6E F9      [19] 3011 	ld	l, -7 (ix)
   1131 CDrF7r0A      [17] 3012 	call	_RefreshHighScore
                           3013 ;src/main.c:877: RefreshScoreboard();
   1134 CDr80r0C      [17] 3014 	call	_RefreshScoreboard
                           3015 ;src/main.c:878: nObj[index] = -1; // object not assigned
   1137 DD 6E FC      [19] 3016 	ld	l,-4 (ix)
   113A DD 66 FD      [19] 3017 	ld	h,-3 (ix)
   113D 36 FF         [10] 3018 	ld	(hl), #0xff
   113F                    3019 00124$:
   113F DD F9         [10] 3020 	ld	sp, ix
   1141 DD E1         [14] 3021 	pop	ix
   1143 C9            [10] 3022 	ret
                           3023 ;src/main.c:885: u8 ObjectCollision(u8 numObj) __z88dk_fastcall {	
                           3024 ;	---------------------------------
                           3025 ; Function ObjectCollision
                           3026 ; ---------------------------------
   1144                    3027 _ObjectCollision::
   1144 DD E5         [15] 3028 	push	ix
   1146 DD 21 00 00   [14] 3029 	ld	ix,#0
   114A DD 39         [15] 3030 	add	ix,sp
   114C F5            [11] 3031 	push	af
   114D 3B            [ 6] 3032 	dec	sp
   114E 4D            [ 4] 3033 	ld	c, l
                           3034 ;src/main.c:887: while(i<=5) {
   114F 11rABr00      [10] 3035 	ld	de, #_objY+0
   1152 69            [ 4] 3036 	ld	l,c
   1153 26 00         [ 7] 3037 	ld	h,#0x00
   1155 19            [11] 3038 	add	hl, de
   1156 7E            [ 7] 3039 	ld	a, (hl)
   1157 DD 77 FF      [19] 3040 	ld	-1 (ix), a
   115A 11rA9r00      [10] 3041 	ld	de, #_objX+0
   115D 69            [ 4] 3042 	ld	l,c
   115E 26 00         [ 7] 3043 	ld	h,#0x00
   1160 19            [11] 3044 	add	hl, de
   1161 7E            [ 7] 3045 	ld	a, (hl)
   1162 DD 77 FE      [19] 3046 	ld	-2 (ix), a
   1165 DD 36 FD 02   [19] 3047 	ld	-3 (ix), #0x02
   1169                    3048 00106$:
   1169 3E 05         [ 7] 3049 	ld	a, #0x05
   116B DD 96 FD      [19] 3050 	sub	a, -3 (ix)
   116E 38 7A         [12] 3051 	jr	C,00108$
                           3052 ;src/main.c:888: if ((spr[i].x + SPR_W >= objX[numObj] && spr[i].x <= objX[numObj] + OBJ_W) && 
   1170 DD 4E FD      [19] 3053 	ld	c,-3 (ix)
   1173 06 00         [ 7] 3054 	ld	b,#0x00
   1175 69            [ 4] 3055 	ld	l, c
   1176 60            [ 4] 3056 	ld	h, b
   1177 29            [11] 3057 	add	hl, hl
   1178 09            [11] 3058 	add	hl, bc
   1179 29            [11] 3059 	add	hl, hl
   117A 09            [11] 3060 	add	hl, bc
   117B 29            [11] 3061 	add	hl, hl
   117C 09            [11] 3062 	add	hl, bc
   117D 4D            [ 4] 3063 	ld	c, l
   117E 44            [ 4] 3064 	ld	b, h
   117F FD 21r39r00   [14] 3065 	ld	iy, #_spr
   1183 FD 09         [15] 3066 	add	iy, bc
   1185 FD E5         [15] 3067 	push	iy
   1187 E1            [10] 3068 	pop	hl
   1188 23            [ 6] 3069 	inc	hl
   1189 23            [ 6] 3070 	inc	hl
   118A 4E            [ 7] 3071 	ld	c, (hl)
   118B 06 00         [ 7] 3072 	ld	b, #0x00
   118D 21 05 00      [10] 3073 	ld	hl, #0x0005
   1190 09            [11] 3074 	add	hl, bc
   1191 DD 5E FE      [19] 3075 	ld	e, -2 (ix)
   1194 16 00         [ 7] 3076 	ld	d, #0x00
   1196 7D            [ 4] 3077 	ld	a, l
   1197 93            [ 4] 3078 	sub	a, e
   1198 7C            [ 4] 3079 	ld	a, h
   1199 9A            [ 4] 3080 	sbc	a, d
   119A E2r9Fr11      [10] 3081 	jp	PO, 00135$
   119D EE 80         [ 7] 3082 	xor	a, #0x80
   119F                    3083 00135$:
   119F FArE4r11      [10] 3084 	jp	M, 00102$
   11A2 13            [ 6] 3085 	inc	de
   11A3 13            [ 6] 3086 	inc	de
   11A4 13            [ 6] 3087 	inc	de
   11A5 13            [ 6] 3088 	inc	de
   11A6 7B            [ 4] 3089 	ld	a, e
   11A7 91            [ 4] 3090 	sub	a, c
   11A8 7A            [ 4] 3091 	ld	a, d
   11A9 98            [ 4] 3092 	sbc	a, b
   11AA E2rAFr11      [10] 3093 	jp	PO, 00136$
   11AD EE 80         [ 7] 3094 	xor	a, #0x80
   11AF                    3095 00136$:
   11AF FArE4r11      [10] 3096 	jp	M, 00102$
                           3097 ;src/main.c:889: (spr[i].y + SPR_H >= objY[numObj] && spr[i].y <= objY[numObj] + OBJ_H)) {
   11B2 FD E5         [15] 3098 	push	iy
   11B4 E1            [10] 3099 	pop	hl
   11B5 23            [ 6] 3100 	inc	hl
   11B6 23            [ 6] 3101 	inc	hl
   11B7 23            [ 6] 3102 	inc	hl
   11B8 4E            [ 7] 3103 	ld	c, (hl)
   11B9 06 00         [ 7] 3104 	ld	b, #0x00
   11BB 21 0C 00      [10] 3105 	ld	hl, #0x000c
   11BE 09            [11] 3106 	add	hl, bc
   11BF DD 5E FF      [19] 3107 	ld	e, -1 (ix)
   11C2 16 00         [ 7] 3108 	ld	d, #0x00
   11C4 7D            [ 4] 3109 	ld	a, l
   11C5 93            [ 4] 3110 	sub	a, e
   11C6 7C            [ 4] 3111 	ld	a, h
   11C7 9A            [ 4] 3112 	sbc	a, d
   11C8 E2rCDr11      [10] 3113 	jp	PO, 00137$
   11CB EE 80         [ 7] 3114 	xor	a, #0x80
   11CD                    3115 00137$:
   11CD FArE4r11      [10] 3116 	jp	M, 00102$
   11D0 21 08 00      [10] 3117 	ld	hl, #0x0008
   11D3 19            [11] 3118 	add	hl, de
   11D4 7D            [ 4] 3119 	ld	a, l
   11D5 91            [ 4] 3120 	sub	a, c
   11D6 7C            [ 4] 3121 	ld	a, h
   11D7 98            [ 4] 3122 	sbc	a, b
   11D8 E2rDDr11      [10] 3123 	jp	PO, 00138$
   11DB EE 80         [ 7] 3124 	xor	a, #0x80
   11DD                    3125 00138$:
   11DD FArE4r11      [10] 3126 	jp	M, 00102$
                           3127 ;src/main.c:890: return 1;
   11E0 2E 01         [ 7] 3128 	ld	l, #0x01
   11E2 18 08         [12] 3129 	jr	00109$
   11E4                    3130 00102$:
                           3131 ;src/main.c:892: i++;
   11E4 DD 34 FD      [23] 3132 	inc	-3 (ix)
   11E7 C3r69r11      [10] 3133 	jp	00106$
   11EA                    3134 00108$:
                           3135 ;src/main.c:894: return 0;
   11EA 2E 00         [ 7] 3136 	ld	l, #0x00
   11EC                    3137 00109$:
   11EC DD F9         [10] 3138 	ld	sp, ix
   11EE DD E1         [14] 3139 	pop	ix
   11F0 C9            [10] 3140 	ret
                           3141 ;src/main.c:901: void ReprintObject() {
                           3142 ;	---------------------------------
                           3143 ; Function ReprintObject
                           3144 ; ---------------------------------
   11F1                    3145 _ReprintObject::
                           3146 ;src/main.c:903: if (nObj[0] >= 0 && !ObjectCollision(0)) {  // does not print if hidden by enemies
   11F1 21rA7r00      [10] 3147 	ld	hl, #_nObj + 0
   11F4 CB 7E         [12] 3148 	bit	7, (hl)
   11F6 C2r43r13      [10] 3149 	jp	NZ, 00125$
   11F9 2E 00         [ 7] 3150 	ld	l, #0x00
   11FB CDr44r11      [17] 3151 	call	_ObjectCollision
   11FE 7D            [ 4] 3152 	ld	a, l
   11FF B7            [ 4] 3153 	or	a, a
   1200 C2r43r13      [10] 3154 	jp	NZ, 00125$
                           3155 ;src/main.c:904: switch(ctMainLoop) {
   1203 FD 21r21r00   [14] 3156 	ld	iy, #_ctMainLoop
   1207 FD 7E 00      [19] 3157 	ld	a, 0 (iy)
   120A B7            [ 4] 3158 	or	a, a
   120B FD B6 01      [19] 3159 	or	a, 1 (iy)
   120E CArB4r12      [10] 3160 	jp	Z,00102$
   1211 FD 7E 00      [19] 3161 	ld	a, 0 (iy)
   1214 D6 08         [ 7] 3162 	sub	a, #0x08
   1216 FD B6 01      [19] 3163 	or	a, 1 (iy)
   1219 CArC4r12      [10] 3164 	jp	Z,00104$
   121C FD 7E 00      [19] 3165 	ld	a, 0 (iy)
   121F D6 10         [ 7] 3166 	sub	a, #0x10
   1221 FD B6 01      [19] 3167 	or	a, 1 (iy)
   1224 CArD3r12      [10] 3168 	jp	Z,00105$
   1227 FD 7E 00      [19] 3169 	ld	a, 0 (iy)
   122A D6 18         [ 7] 3170 	sub	a, #0x18
   122C FD B6 01      [19] 3171 	or	a, 1 (iy)
   122F CArEEr12      [10] 3172 	jp	Z,00108$
   1232 FD 7E 00      [19] 3173 	ld	a, 0 (iy)
   1235 D6 20         [ 7] 3174 	sub	a, #0x20
   1237 FD B6 01      [19] 3175 	or	a, 1 (iy)
   123A CAr02r13      [10] 3176 	jp	Z,00113$
   123D FD 7E 00      [19] 3177 	ld	a, 0 (iy)
   1240 D6 28         [ 7] 3178 	sub	a, #0x28
   1242 FD B6 01      [19] 3179 	or	a, 1 (iy)
   1245 CAr16r13      [10] 3180 	jp	Z,00118$
   1248 FD 7E 00      [19] 3181 	ld	a, 0 (iy)
   124B D6 38         [ 7] 3182 	sub	a, #0x38
   124D FD B6 01      [19] 3183 	or	a, 1 (iy)
   1250 CArEEr12      [10] 3184 	jp	Z,00108$
   1253 FD 7E 00      [19] 3185 	ld	a, 0 (iy)
   1256 D6 40         [ 7] 3186 	sub	a, #0x40
   1258 FD B6 01      [19] 3187 	or	a, 1 (iy)
   125B CAr02r13      [10] 3188 	jp	Z,00113$
   125E FD 7E 00      [19] 3189 	ld	a, 0 (iy)
   1261 D6 48         [ 7] 3190 	sub	a, #0x48
   1263 FD B6 01      [19] 3191 	or	a, 1 (iy)
   1266 CAr16r13      [10] 3192 	jp	Z,00118$
   1269 FD 7E 00      [19] 3193 	ld	a, 0 (iy)
   126C D6 58         [ 7] 3194 	sub	a, #0x58
   126E FD B6 01      [19] 3195 	or	a, 1 (iy)
   1271 CArEEr12      [10] 3196 	jp	Z,00108$
   1274 FD 7E 00      [19] 3197 	ld	a, 0 (iy)
   1277 D6 60         [ 7] 3198 	sub	a, #0x60
   1279 FD B6 01      [19] 3199 	or	a, 1 (iy)
   127C CAr02r13      [10] 3200 	jp	Z,00113$
   127F FD 7E 00      [19] 3201 	ld	a, 0 (iy)
   1282 D6 68         [ 7] 3202 	sub	a, #0x68
   1284 FD B6 01      [19] 3203 	or	a, 1 (iy)
   1287 CAr16r13      [10] 3204 	jp	Z,00118$
   128A FD 7E 00      [19] 3205 	ld	a, 0 (iy)
   128D D6 48         [ 7] 3206 	sub	a, #0x48
   128F 20 07         [12] 3207 	jr	NZ,00323$
   1291 FD 7E 01      [19] 3208 	ld	a, 1 (iy)
   1294 3D            [ 4] 3209 	dec	a
   1295 CAr2Ar13      [10] 3210 	jp	Z,00121$
   1298                    3211 00323$:
   1298 FD 7E 00      [19] 3212 	ld	a, 0 (iy)
   129B D6 50         [ 7] 3213 	sub	a, #0x50
   129D 20 06         [12] 3214 	jr	NZ,00324$
   129F FD 7E 01      [19] 3215 	ld	a, 1 (iy)
   12A2 3D            [ 4] 3216 	dec	a
   12A3 28 1F         [12] 3217 	jr	Z,00104$
   12A5                    3218 00324$:
   12A5 FD 7E 00      [19] 3219 	ld	a, 0 (iy)
   12A8 D6 58         [ 7] 3220 	sub	a, #0x58
   12AA C2r2Fr13      [10] 3221 	jp	NZ,00122$
   12AD FD 7E 01      [19] 3222 	ld	a, 1 (iy)
   12B0 3D            [ 4] 3223 	dec	a
   12B1 C2r2Fr13      [10] 3224 	jp	NZ,00122$
                           3225 ;src/main.c:907: case 344:	{ DeleteObject(0); PrintDust(0,0); break; }
   12B4                    3226 00102$:
   12B4 2E 00         [ 7] 3227 	ld	l, #0x00
   12B6 CDr26r0E      [17] 3228 	call	_DeleteObject
   12B9 21 00 00      [10] 3229 	ld	hl, #0x0000
   12BC E5            [11] 3230 	push	hl
   12BD CDr9Ar0E      [17] 3231 	call	_PrintDust
   12C0 F1            [10] 3232 	pop	af
   12C1 C3r43r13      [10] 3233 	jp	00125$
                           3234 ;src/main.c:910: case 336:	{ DeleteObject(0); PrintDust(1,0); break; }
   12C4                    3235 00104$:
   12C4 2E 00         [ 7] 3236 	ld	l, #0x00
   12C6 CDr26r0E      [17] 3237 	call	_DeleteObject
   12C9 21 01 00      [10] 3238 	ld	hl, #0x0001
   12CC E5            [11] 3239 	push	hl
   12CD CDr9Ar0E      [17] 3240 	call	_PrintDust
   12D0 F1            [10] 3241 	pop	af
   12D1 18 70         [12] 3242 	jr	00125$
                           3243 ;src/main.c:913: case 16:	{ DeleteObject(0); PrintObject(nObj[0], objX[0], objY[0]); break; }
   12D3                    3244 00105$:
   12D3 2E 00         [ 7] 3245 	ld	l, #0x00
   12D5 CDr26r0E      [17] 3246 	call	_DeleteObject
   12D8 21rABr00      [10] 3247 	ld	hl, #_objY+0
   12DB 56            [ 7] 3248 	ld	d, (hl)
   12DC 3ArA9r00      [13] 3249 	ld	a, (#_objX + 0)
   12DF 21rA7r00      [10] 3250 	ld	hl, #_nObj + 0
   12E2 46            [ 7] 3251 	ld	b, (hl)
   12E3 5F            [ 4] 3252 	ld	e, a
   12E4 D5            [11] 3253 	push	de
   12E5 C5            [11] 3254 	push	bc
   12E6 33            [ 6] 3255 	inc	sp
   12E7 CDrF0r0D      [17] 3256 	call	_PrintObject
   12EA F1            [10] 3257 	pop	af
   12EB 33            [ 6] 3258 	inc	sp
   12EC 18 55         [12] 3259 	jr	00125$
                           3260 ;src/main.c:918: case 88: { if (nObj[0] == 0) {DeleteObject(0); PrintCoin(0,0); break; }}
   12EE                    3261 00108$:
   12EE 3ArA7r00      [13] 3262 	ld	a, (#_nObj + 0)
   12F1 B7            [ 4] 3263 	or	a,a
   12F2 20 0E         [12] 3264 	jr	NZ,00113$
   12F4 6F            [ 4] 3265 	ld	l,a
   12F5 CDr26r0E      [17] 3266 	call	_DeleteObject
   12F8 21 00 00      [10] 3267 	ld	hl, #0x0000
   12FB E5            [11] 3268 	push	hl
   12FC CDrDEr0E      [17] 3269 	call	_PrintCoin
   12FF F1            [10] 3270 	pop	af
   1300 18 41         [12] 3271 	jr	00125$
                           3272 ;src/main.c:921: case 96: { if (nObj[0] == 0) {DeleteObject(0); PrintCoin(1,0); break; }}
   1302                    3273 00113$:
   1302 3ArA7r00      [13] 3274 	ld	a, (#_nObj + 0)
   1305 B7            [ 4] 3275 	or	a,a
   1306 20 0E         [12] 3276 	jr	NZ,00118$
   1308 6F            [ 4] 3277 	ld	l,a
   1309 CDr26r0E      [17] 3278 	call	_DeleteObject
   130C 21 01 00      [10] 3279 	ld	hl, #0x0001
   130F E5            [11] 3280 	push	hl
   1310 CDrDEr0E      [17] 3281 	call	_PrintCoin
   1313 F1            [10] 3282 	pop	af
   1314 18 2D         [12] 3283 	jr	00125$
                           3284 ;src/main.c:924: case 104: { if (nObj[0] == 0) {DeleteObject(0); PrintCoin(2,0); break; }}
   1316                    3285 00118$:
   1316 3ArA7r00      [13] 3286 	ld	a, (#_nObj + 0)
   1319 B7            [ 4] 3287 	or	a,a
   131A 20 0E         [12] 3288 	jr	NZ,00121$
   131C 6F            [ 4] 3289 	ld	l,a
   131D CDr26r0E      [17] 3290 	call	_DeleteObject
   1320 21 02 00      [10] 3291 	ld	hl, #0x0002
   1323 E5            [11] 3292 	push	hl
   1324 CDrDEr0E      [17] 3293 	call	_PrintCoin
   1327 F1            [10] 3294 	pop	af
   1328 18 19         [12] 3295 	jr	00125$
                           3296 ;src/main.c:927: case 328:	{ DeleteObject(0); }
   132A                    3297 00121$:
   132A 2E 00         [ 7] 3298 	ld	l, #0x00
   132C CDr26r0E      [17] 3299 	call	_DeleteObject
                           3300 ;src/main.c:929: default:	{ PrintObject(nObj[0], objX[0], objY[0]); }			
   132F                    3301 00122$:
   132F 21rABr00      [10] 3302 	ld	hl, #_objY+0
   1332 56            [ 7] 3303 	ld	d, (hl)
   1333 3ArA9r00      [13] 3304 	ld	a, (#_objX + 0)
   1336 21rA7r00      [10] 3305 	ld	hl, #_nObj + 0
   1339 46            [ 7] 3306 	ld	b, (hl)
   133A 5F            [ 4] 3307 	ld	e, a
   133B D5            [11] 3308 	push	de
   133C C5            [11] 3309 	push	bc
   133D 33            [ 6] 3310 	inc	sp
   133E CDrF0r0D      [17] 3311 	call	_PrintObject
   1341 F1            [10] 3312 	pop	af
   1342 33            [ 6] 3313 	inc	sp
                           3314 ;src/main.c:930: }
   1343                    3315 00125$:
                           3316 ;src/main.c:933: if (nObj[1] >= 0 && !ObjectCollision(1)) {
   1343 21rA8r00      [10] 3317 	ld	hl, #(_nObj + 0x0001) + 0
   1346 CB 7E         [12] 3318 	bit	7, (hl)
   1348 C0            [11] 3319 	ret	NZ
   1349 2E 01         [ 7] 3320 	ld	l, #0x01
   134B CDr44r11      [17] 3321 	call	_ObjectCollision
   134E 7D            [ 4] 3322 	ld	a, l
   134F B7            [ 4] 3323 	or	a, a
   1350 C0            [11] 3324 	ret	NZ
                           3325 ;src/main.c:934: switch(ctMainLoop) {
   1351 FD 21r21r00   [14] 3326 	ld	iy, #_ctMainLoop
   1355 FD 7E 00      [19] 3327 	ld	a, 0 (iy)
   1358 D6 9A         [ 7] 3328 	sub	a, #0x9a
   135A FD B6 01      [19] 3329 	or	a, 1 (iy)
   135D CAr71r14      [10] 3330 	jp	Z,00147$
   1360 FD 7E 00      [19] 3331 	ld	a, 0 (iy)
   1363 D6 A0         [ 7] 3332 	sub	a, #0xa0
   1365 FD B6 01      [19] 3333 	or	a, 1 (iy)
   1368 CAr13r14      [10] 3334 	jp	Z,00130$
   136B FD 7E 00      [19] 3335 	ld	a, 0 (iy)
   136E D6 A8         [ 7] 3336 	sub	a, #0xa8
   1370 FD B6 01      [19] 3337 	or	a, 1 (iy)
   1373 CAr05r14      [10] 3338 	jp	Z,00128$
   1376 FD 7E 00      [19] 3339 	ld	a, 0 (iy)
   1379 D6 B0         [ 7] 3340 	sub	a, #0xb0
   137B FD B6 01      [19] 3341 	or	a, 1 (iy)
   137E CAr05r14      [10] 3342 	jp	Z,00128$
   1381 FD 7E 00      [19] 3343 	ld	a, 0 (iy)
   1384 D6 B8         [ 7] 3344 	sub	a, #0xb8
   1386 FD B6 01      [19] 3345 	or	a, 1 (iy)
   1389 CAr13r14      [10] 3346 	jp	Z,00130$
   138C FD 7E 00      [19] 3347 	ld	a, 0 (iy)
   138F D6 C0         [ 7] 3348 	sub	a, #0xc0
   1391 FD B6 01      [19] 3349 	or	a, 1 (iy)
   1394 CAr21r14      [10] 3350 	jp	Z,00131$
                           3351 ;src/main.c:933: if (nObj[1] >= 0 && !ObjectCollision(1)) {
   1397 21rA8r00      [10] 3352 	ld	hl, #(_nObj + 0x0001) + 0
   139A 4E            [ 7] 3353 	ld	c, (hl)
                           3354 ;src/main.c:934: switch(ctMainLoop) {
   139B FD 7E 00      [19] 3355 	ld	a, 0 (iy)
   139E D6 C8         [ 7] 3356 	sub	a, #0xc8
   13A0 FD B6 01      [19] 3357 	or	a, 1 (iy)
   13A3 CAr3Br14      [10] 3358 	jp	Z,00134$
   13A6 FD 7E 00      [19] 3359 	ld	a, 0 (iy)
   13A9 D6 D0         [ 7] 3360 	sub	a, #0xd0
   13AB FD B6 01      [19] 3361 	or	a, 1 (iy)
   13AE CAr4Dr14      [10] 3362 	jp	Z,00139$
   13B1 FD 7E 00      [19] 3363 	ld	a, 0 (iy)
   13B4 D6 D8         [ 7] 3364 	sub	a, #0xd8
   13B6 FD B6 01      [19] 3365 	or	a, 1 (iy)
   13B9 CAr5Fr14      [10] 3366 	jp	Z,00144$
   13BC FD 7E 00      [19] 3367 	ld	a, 0 (iy)
   13BF D6 E8         [ 7] 3368 	sub	a, #0xe8
   13C1 FD B6 01      [19] 3369 	or	a, 1 (iy)
   13C4 28 75         [12] 3370 	jr	Z,00134$
   13C6 FD 7E 00      [19] 3371 	ld	a, 0 (iy)
   13C9 D6 F0         [ 7] 3372 	sub	a, #0xf0
   13CB FD B6 01      [19] 3373 	or	a, 1 (iy)
   13CE CAr4Dr14      [10] 3374 	jp	Z,00139$
   13D1 FD 7E 00      [19] 3375 	ld	a, 0 (iy)
   13D4 D6 F8         [ 7] 3376 	sub	a, #0xf8
   13D6 FD B6 01      [19] 3377 	or	a, 1 (iy)
   13D9 CAr5Fr14      [10] 3378 	jp	Z,00144$
   13DC FD 7E 00      [19] 3379 	ld	a, 0 (iy)
   13DF D6 08         [ 7] 3380 	sub	a, #0x08
   13E1 20 06         [12] 3381 	jr	NZ,00339$
   13E3 FD 7E 01      [19] 3382 	ld	a, 1 (iy)
   13E6 3D            [ 4] 3383 	dec	a
   13E7 28 52         [12] 3384 	jr	Z,00134$
   13E9                    3385 00339$:
   13E9 FD 7E 00      [19] 3386 	ld	a, 0 (iy)
   13EC D6 10         [ 7] 3387 	sub	a, #0x10
   13EE 20 06         [12] 3388 	jr	NZ,00340$
   13F0 FD 7E 01      [19] 3389 	ld	a, 1 (iy)
   13F3 3D            [ 4] 3390 	dec	a
   13F4 28 57         [12] 3391 	jr	Z,00139$
   13F6                    3392 00340$:
   13F6 FD 7E 00      [19] 3393 	ld	a, 0 (iy)
   13F9 D6 18         [ 7] 3394 	sub	a, #0x18
   13FB 20 79         [12] 3395 	jr	NZ,00148$
   13FD FD 7E 01      [19] 3396 	ld	a, 1 (iy)
   1400 3D            [ 4] 3397 	dec	a
   1401 28 5C         [12] 3398 	jr	Z,00144$
   1403 18 71         [12] 3399 	jr	00148$
                           3400 ;src/main.c:937: case 168:	{ DeleteObject(1); PrintDust(0,1); break; }
   1405                    3401 00128$:
   1405 2E 01         [ 7] 3402 	ld	l, #0x01
   1407 CDr26r0E      [17] 3403 	call	_DeleteObject
   140A 21 00 01      [10] 3404 	ld	hl, #0x0100
   140D E5            [11] 3405 	push	hl
   140E CDr9Ar0E      [17] 3406 	call	_PrintDust
   1411 F1            [10] 3407 	pop	af
   1412 C9            [10] 3408 	ret
                           3409 ;src/main.c:940: case 160:	{ DeleteObject(1); PrintDust(1,1); break; }
   1413                    3410 00130$:
   1413 2E 01         [ 7] 3411 	ld	l, #0x01
   1415 CDr26r0E      [17] 3412 	call	_DeleteObject
   1418 21 01 01      [10] 3413 	ld	hl, #0x0101
   141B E5            [11] 3414 	push	hl
   141C CDr9Ar0E      [17] 3415 	call	_PrintDust
   141F F1            [10] 3416 	pop	af
   1420 C9            [10] 3417 	ret
                           3418 ;src/main.c:942: case 192:	{ DeleteObject(1); PrintObject(nObj[1], objX[1], objY[1]); break; }
   1421                    3419 00131$:
   1421 2E 01         [ 7] 3420 	ld	l, #0x01
   1423 CDr26r0E      [17] 3421 	call	_DeleteObject
   1426 21rACr00      [10] 3422 	ld	hl, #_objY+1
   1429 56            [ 7] 3423 	ld	d, (hl)
   142A 3ArAAr00      [13] 3424 	ld	a, (#(_objX + 0x0001) + 0)
   142D 21rA8r00      [10] 3425 	ld	hl, #(_nObj + 0x0001) + 0
   1430 46            [ 7] 3426 	ld	b, (hl)
   1431 5F            [ 4] 3427 	ld	e, a
   1432 D5            [11] 3428 	push	de
   1433 C5            [11] 3429 	push	bc
   1434 33            [ 6] 3430 	inc	sp
   1435 CDrF0r0D      [17] 3431 	call	_PrintObject
   1438 F1            [10] 3432 	pop	af
   1439 33            [ 6] 3433 	inc	sp
   143A C9            [10] 3434 	ret
                           3435 ;src/main.c:947: case 264: { if (nObj[1] == 0) {DeleteObject(1); PrintCoin(0,1); break; }}
   143B                    3436 00134$:
   143B 79            [ 4] 3437 	ld	a, c
   143C B7            [ 4] 3438 	or	a, a
   143D 20 0E         [12] 3439 	jr	NZ,00139$
   143F 2E 01         [ 7] 3440 	ld	l, #0x01
   1441 CDr26r0E      [17] 3441 	call	_DeleteObject
   1444 21 00 01      [10] 3442 	ld	hl, #0x0100
   1447 E5            [11] 3443 	push	hl
   1448 CDrDEr0E      [17] 3444 	call	_PrintCoin
   144B F1            [10] 3445 	pop	af
   144C C9            [10] 3446 	ret
                           3447 ;src/main.c:950: case 272: { if (nObj[1] == 0) {DeleteObject(1); PrintCoin(1,1); break; }}
   144D                    3448 00139$:
   144D 79            [ 4] 3449 	ld	a, c
   144E B7            [ 4] 3450 	or	a, a
   144F 20 0E         [12] 3451 	jr	NZ,00144$
   1451 2E 01         [ 7] 3452 	ld	l, #0x01
   1453 CDr26r0E      [17] 3453 	call	_DeleteObject
   1456 21 01 01      [10] 3454 	ld	hl, #0x0101
   1459 E5            [11] 3455 	push	hl
   145A CDrDEr0E      [17] 3456 	call	_PrintCoin
   145D F1            [10] 3457 	pop	af
   145E C9            [10] 3458 	ret
                           3459 ;src/main.c:953: case 280: { if (nObj[1] == 0) {DeleteObject(1); PrintCoin(2,1); break; }}
   145F                    3460 00144$:
   145F 79            [ 4] 3461 	ld	a, c
   1460 B7            [ 4] 3462 	or	a, a
   1461 20 0E         [12] 3463 	jr	NZ,00147$
   1463 2E 01         [ 7] 3464 	ld	l, #0x01
   1465 CDr26r0E      [17] 3465 	call	_DeleteObject
   1468 21 02 01      [10] 3466 	ld	hl, #0x0102
   146B E5            [11] 3467 	push	hl
   146C CDrDEr0E      [17] 3468 	call	_PrintCoin
   146F F1            [10] 3469 	pop	af
   1470 C9            [10] 3470 	ret
                           3471 ;src/main.c:956: case 154:	{ DeleteObject(1); }
   1471                    3472 00147$:
   1471 2E 01         [ 7] 3473 	ld	l, #0x01
   1473 CDr26r0E      [17] 3474 	call	_DeleteObject
                           3475 ;src/main.c:958: default:	{ PrintObject(nObj[1], objX[1], objY[1]); }			
   1476                    3476 00148$:
   1476 21rACr00      [10] 3477 	ld	hl, #_objY+1
   1479 56            [ 7] 3478 	ld	d, (hl)
   147A 3ArAAr00      [13] 3479 	ld	a, (#(_objX + 0x0001) + 0)
   147D 21rA8r00      [10] 3480 	ld	hl, #(_nObj + 0x0001) + 0
   1480 46            [ 7] 3481 	ld	b, (hl)
   1481 5F            [ 4] 3482 	ld	e, a
   1482 D5            [11] 3483 	push	de
   1483 C5            [11] 3484 	push	bc
   1484 33            [ 6] 3485 	inc	sp
   1485 CDrF0r0D      [17] 3486 	call	_PrintObject
   1488 F1            [10] 3487 	pop	af
   1489 33            [ 6] 3488 	inc	sp
                           3489 ;src/main.c:959: }
   148A C9            [10] 3490 	ret
                           3491 ;src/main.c:964: void SetObject(u8 index) __z88dk_fastcall {
                           3492 ;	---------------------------------
                           3493 ; Function SetObject
                           3494 ; ---------------------------------
   148B                    3495 _SetObject::
   148B DD E5         [15] 3496 	push	ix
   148D DD 21 00 00   [14] 3497 	ld	ix,#0
   1491 DD 39         [15] 3498 	add	ix,sp
   1493 F5            [11] 3499 	push	af
   1494 F5            [11] 3500 	push	af
   1495 3B            [ 6] 3501 	dec	sp
                           3502 ;src/main.c:967: if (nObj[index] >= 0) DeleteObject(index); 
   1496 DD 75 FF      [19] 3503 	ld	-1 (ix), l
   1499 7D            [ 4] 3504 	ld	a, l
   149A C6rA7         [ 7] 3505 	add	a, #<(_nObj)
   149C 4F            [ 4] 3506 	ld	c, a
   149D 3E 00         [ 7] 3507 	ld	a, #0x00
   149F CEs00         [ 7] 3508 	adc	a, #>(_nObj)
   14A1 47            [ 4] 3509 	ld	b, a
   14A2 0A            [ 7] 3510 	ld	a, (bc)
   14A3 CB 7F         [ 8] 3511 	bit	7,a
   14A5 20 08         [12] 3512 	jr	NZ,00102$
   14A7 C5            [11] 3513 	push	bc
   14A8 DD 6E FF      [19] 3514 	ld	l, -1 (ix)
   14AB CDr26r0E      [17] 3515 	call	_DeleteObject
   14AE C1            [10] 3516 	pop	bc
   14AF                    3517 00102$:
                           3518 ;src/main.c:969: nObj[index] = cpct_getRandom_lcg_u8(0) / 11;	// obj = 0 a 22
   14AF C5            [11] 3519 	push	bc
   14B0 2E 00         [ 7] 3520 	ld	l, #0x00
   14B2 CDr00r00      [17] 3521 	call	_cpct_getRandom_lcg_u8
   14B5 55            [ 4] 3522 	ld	d, l
   14B6 3E 0B         [ 7] 3523 	ld	a, #0x0b
   14B8 F5            [11] 3524 	push	af
   14B9 33            [ 6] 3525 	inc	sp
   14BA D5            [11] 3526 	push	de
   14BB 33            [ 6] 3527 	inc	sp
   14BC CDr00r00      [17] 3528 	call	__divuchar
   14BF F1            [10] 3529 	pop	af
   14C0 7D            [ 4] 3530 	ld	a, l
   14C1 C1            [10] 3531 	pop	bc
   14C2 02            [ 7] 3532 	ld	(bc), a
                           3533 ;src/main.c:971: do {
   14C3                    3534 00107$:
                           3535 ;src/main.c:972: objX[index] = 4 + (cpct_getRandom_lcg_u8(0)*10/36); 	// x = 4 a 74
   14C3 3ErA9         [ 7] 3536 	ld	a, #<(_objX)
   14C5 DD 86 FF      [19] 3537 	add	a, -1 (ix)
   14C8 DD 77 FB      [19] 3538 	ld	-5 (ix), a
   14CB 3Es00         [ 7] 3539 	ld	a, #>(_objX)
   14CD CE 00         [ 7] 3540 	adc	a, #0x00
   14CF DD 77 FC      [19] 3541 	ld	-4 (ix), a
   14D2 C5            [11] 3542 	push	bc
   14D3 2E 00         [ 7] 3543 	ld	l, #0x00
   14D5 CDr00r00      [17] 3544 	call	_cpct_getRandom_lcg_u8
   14D8 C1            [10] 3545 	pop	bc
   14D9 5D            [ 4] 3546 	ld	e,l
   14DA 16 00         [ 7] 3547 	ld	d,#0x00
   14DC 6B            [ 4] 3548 	ld	l, e
   14DD 62            [ 4] 3549 	ld	h, d
   14DE 29            [11] 3550 	add	hl, hl
   14DF 29            [11] 3551 	add	hl, hl
   14E0 19            [11] 3552 	add	hl, de
   14E1 29            [11] 3553 	add	hl, hl
   14E2 C5            [11] 3554 	push	bc
   14E3 11 24 00      [10] 3555 	ld	de, #0x0024
   14E6 D5            [11] 3556 	push	de
   14E7 E5            [11] 3557 	push	hl
   14E8 CDr00r00      [17] 3558 	call	__divsint
   14EB F1            [10] 3559 	pop	af
   14EC F1            [10] 3560 	pop	af
   14ED C1            [10] 3561 	pop	bc
   14EE 7D            [ 4] 3562 	ld	a, l
   14EF C6 04         [ 7] 3563 	add	a, #0x04
   14F1 E1            [10] 3564 	pop	hl
   14F2 E5            [11] 3565 	push	hl
   14F3 77            [ 7] 3566 	ld	(hl), a
                           3567 ;src/main.c:973: objY[index] = 40 + (cpct_getRandom_lcg_u8(0)*10/17);	// y = 40 a 190	
   14F4 3ErAB         [ 7] 3568 	ld	a, #<(_objY)
   14F6 DD 86 FF      [19] 3569 	add	a, -1 (ix)
   14F9 DD 77 FD      [19] 3570 	ld	-3 (ix), a
   14FC 3Es00         [ 7] 3571 	ld	a, #>(_objY)
   14FE CE 00         [ 7] 3572 	adc	a, #0x00
   1500 DD 77 FE      [19] 3573 	ld	-2 (ix), a
   1503 C5            [11] 3574 	push	bc
   1504 2E 00         [ 7] 3575 	ld	l, #0x00
   1506 CDr00r00      [17] 3576 	call	_cpct_getRandom_lcg_u8
   1509 C1            [10] 3577 	pop	bc
   150A 5D            [ 4] 3578 	ld	e,l
   150B 16 00         [ 7] 3579 	ld	d,#0x00
   150D 6B            [ 4] 3580 	ld	l, e
   150E 62            [ 4] 3581 	ld	h, d
   150F 29            [11] 3582 	add	hl, hl
   1510 29            [11] 3583 	add	hl, hl
   1511 19            [11] 3584 	add	hl, de
   1512 29            [11] 3585 	add	hl, hl
   1513 C5            [11] 3586 	push	bc
   1514 11 11 00      [10] 3587 	ld	de, #0x0011
   1517 D5            [11] 3588 	push	de
   1518 E5            [11] 3589 	push	hl
   1519 CDr00r00      [17] 3590 	call	__divsint
   151C F1            [10] 3591 	pop	af
   151D F1            [10] 3592 	pop	af
   151E C1            [10] 3593 	pop	bc
   151F 7D            [ 4] 3594 	ld	a, l
   1520 C6 28         [ 7] 3595 	add	a, #0x28
   1522 DD 6E FD      [19] 3596 	ld	l,-3 (ix)
   1525 DD 66 FE      [19] 3597 	ld	h,-2 (ix)
   1528 77            [ 7] 3598 	ld	(hl), a
                           3599 ;src/main.c:974: tile = *GetTileNum(objX[index]+2, objY[index]+8);	
   1529 DD 6E FD      [19] 3600 	ld	l,-3 (ix)
   152C DD 66 FE      [19] 3601 	ld	h,-2 (ix)
   152F 7E            [ 7] 3602 	ld	a, (hl)
   1530 C6 08         [ 7] 3603 	add	a, #0x08
   1532 57            [ 4] 3604 	ld	d, a
   1533 E1            [10] 3605 	pop	hl
   1534 E5            [11] 3606 	push	hl
   1535 7E            [ 7] 3607 	ld	a, (hl)
   1536 C6 02         [ 7] 3608 	add	a, #0x02
   1538 C5            [11] 3609 	push	bc
   1539 5F            [ 4] 3610 	ld	e, a
   153A D5            [11] 3611 	push	de
   153B CDr35r02      [17] 3612 	call	_GetTileNum
   153E F1            [10] 3613 	pop	af
   153F C1            [10] 3614 	pop	bc
   1540 5E            [ 7] 3615 	ld	e, (hl)
                           3616 ;src/main.c:977: while (tile > 34 || tile == TILESET_DOOR || // tile is a blocker
   1541 3E 22         [ 7] 3617 	ld	a, #0x22
   1543 93            [ 4] 3618 	sub	a, e
   1544 DArC3r14      [10] 3619 	jp	C, 00107$
   1547 7B            [ 4] 3620 	ld	a, e
   1548 D6 0E         [ 7] 3621 	sub	a, #0x0e
   154A CArC3r14      [10] 3622 	jp	Z,00107$
                           3623 ;src/main.c:978: Abs(objX[0] - objX[1]) < 12 || // near the other object
   154D 21rA9r00      [10] 3624 	ld	hl, #_objX + 0
   1550 5E            [ 7] 3625 	ld	e, (hl)
   1551 16 00         [ 7] 3626 	ld	d, #0x00
   1553 21rAAr00      [10] 3627 	ld	hl, #_objX + 1
   1556 6E            [ 7] 3628 	ld	l, (hl)
   1557 26 00         [ 7] 3629 	ld	h, #0x00
   1559 7B            [ 4] 3630 	ld	a, e
   155A 95            [ 4] 3631 	sub	a, l
   155B 6F            [ 4] 3632 	ld	l, a
   155C 7A            [ 4] 3633 	ld	a, d
   155D 9C            [ 4] 3634 	sbc	a, h
   155E 67            [ 4] 3635 	ld	h, a
   155F C5            [11] 3636 	push	bc
   1560 CDr00r00      [17] 3637 	call	_Abs
   1563 C1            [10] 3638 	pop	bc
   1564 11 0C 80      [10] 3639 	ld	de, #0x800c
   1567 29            [11] 3640 	add	hl, hl
   1568 3F            [ 4] 3641 	ccf
   1569 CB 1C         [ 8] 3642 	rr	h
   156B CB 1D         [ 8] 3643 	rr	l
   156D ED 52         [15] 3644 	sbc	hl, de
   156F DArC3r14      [10] 3645 	jp	C, 00107$
                           3646 ;src/main.c:979: SpriteCollision(objX[index], objY[index], &spr[0], 12) || // near player 1
   1572 DD 6E FD      [19] 3647 	ld	l,-3 (ix)
   1575 DD 66 FE      [19] 3648 	ld	h,-2 (ix)
   1578 56            [ 7] 3649 	ld	d, (hl)
   1579 E1            [10] 3650 	pop	hl
   157A E5            [11] 3651 	push	hl
   157B 5E            [ 7] 3652 	ld	e, (hl)
   157C C5            [11] 3653 	push	bc
   157D 3E 0C         [ 7] 3654 	ld	a, #0x0c
   157F F5            [11] 3655 	push	af
   1580 33            [ 6] 3656 	inc	sp
   1581 21r39r00      [10] 3657 	ld	hl, #_spr
   1584 E5            [11] 3658 	push	hl
   1585 D5            [11] 3659 	push	de
   1586 CDr03r1D      [17] 3660 	call	_SpriteCollision
   1589 F1            [10] 3661 	pop	af
   158A F1            [10] 3662 	pop	af
   158B 33            [ 6] 3663 	inc	sp
   158C C1            [10] 3664 	pop	bc
   158D 7D            [ 4] 3665 	ld	a, l
   158E B7            [ 4] 3666 	or	a, a
   158F C2rC3r14      [10] 3667 	jp	NZ, 00107$
                           3668 ;src/main.c:980: SpriteCollision(objX[index], objY[index], &spr[1], 12)); // near player 2
   1592 DD 6E FD      [19] 3669 	ld	l,-3 (ix)
   1595 DD 66 FE      [19] 3670 	ld	h,-2 (ix)
   1598 56            [ 7] 3671 	ld	d, (hl)
   1599 E1            [10] 3672 	pop	hl
   159A E5            [11] 3673 	push	hl
   159B 5E            [ 7] 3674 	ld	e, (hl)
   159C C5            [11] 3675 	push	bc
   159D 3E 0C         [ 7] 3676 	ld	a, #0x0c
   159F F5            [11] 3677 	push	af
   15A0 33            [ 6] 3678 	inc	sp
   15A1 21r48r00      [10] 3679 	ld	hl, #(_spr + 0x000f)
   15A4 E5            [11] 3680 	push	hl
   15A5 D5            [11] 3681 	push	de
   15A6 CDr03r1D      [17] 3682 	call	_SpriteCollision
   15A9 F1            [10] 3683 	pop	af
   15AA F1            [10] 3684 	pop	af
   15AB 33            [ 6] 3685 	inc	sp
   15AC C1            [10] 3686 	pop	bc
   15AD 7D            [ 4] 3687 	ld	a, l
   15AE B7            [ 4] 3688 	or	a, a
   15AF C2rC3r14      [10] 3689 	jp	NZ, 00107$
                           3690 ;src/main.c:967: if (nObj[index] >= 0) DeleteObject(index); 
   15B2 0A            [ 7] 3691 	ld	a, (bc)
                           3692 ;src/main.c:982: if (nObj[index] == 22) nObj[index] = 1; // slightly more chance of showing 5 coins
   15B3 5F            [ 4] 3693 	ld	e,a
   15B4 D6 16         [ 7] 3694 	sub	a, #0x16
   15B6 20 05         [12] 3695 	jr	NZ,00116$
   15B8 3E 01         [ 7] 3696 	ld	a, #0x01
   15BA 02            [ 7] 3697 	ld	(bc), a
   15BB 18 17         [12] 3698 	jr	00118$
   15BD                    3699 00116$:
                           3700 ;src/main.c:983: else if (nObj[index] == 21) nObj[index] = 3; // slightly more chance of powerUps showing up
   15BD 7B            [ 4] 3701 	ld	a, e
   15BE D6 15         [ 7] 3702 	sub	a, #0x15
   15C0 20 05         [12] 3703 	jr	NZ,00113$
   15C2 3E 03         [ 7] 3704 	ld	a, #0x03
   15C4 02            [ 7] 3705 	ld	(bc), a
   15C5 18 0D         [12] 3706 	jr	00118$
   15C7                    3707 00113$:
                           3708 ;src/main.c:984: else if (nObj[index] > 3) nObj[index] = 0; // only PowerUps and coins, others are purchased
   15C7 3E 03         [ 7] 3709 	ld	a, #0x03
   15C9 93            [ 4] 3710 	sub	a, e
   15CA E2rCFr15      [10] 3711 	jp	PO, 00165$
   15CD EE 80         [ 7] 3712 	xor	a, #0x80
   15CF                    3713 00165$:
   15CF F2rD4r15      [10] 3714 	jp	P, 00118$
   15D2 AF            [ 4] 3715 	xor	a, a
   15D3 02            [ 7] 3716 	ld	(bc), a
   15D4                    3717 00118$:
   15D4 DD F9         [10] 3718 	ld	sp, ix
   15D6 DD E1         [14] 3719 	pop	ix
   15D8 C9            [10] 3720 	ret
                           3721 ;src/main.c:991: void AddObjectToScoreboard(u8 player) __z88dk_fastcall {
                           3722 ;	---------------------------------
                           3723 ; Function AddObjectToScoreboard
                           3724 ; ---------------------------------
   15D9                    3725 _AddObjectToScoreboard::
   15D9 4D            [ 4] 3726 	ld	c, l
                           3727 ;src/main.c:992: u8 x = spr[player].objNum_mov * 3 + 7;
   15DA 11r39r00      [10] 3728 	ld	de, #_spr+0
   15DD 06 00         [ 7] 3729 	ld	b,#0x00
   15DF 69            [ 4] 3730 	ld	l, c
   15E0 60            [ 4] 3731 	ld	h, b
   15E1 29            [11] 3732 	add	hl, hl
   15E2 09            [11] 3733 	add	hl, bc
   15E3 29            [11] 3734 	add	hl, hl
   15E4 09            [11] 3735 	add	hl, bc
   15E5 29            [11] 3736 	add	hl, hl
   15E6 09            [11] 3737 	add	hl, bc
   15E7 19            [11] 3738 	add	hl, de
   15E8 11 0C 00      [10] 3739 	ld	de, #0x000c
   15EB 19            [11] 3740 	add	hl, de
   15EC 5E            [ 7] 3741 	ld	e, (hl)
   15ED 7B            [ 4] 3742 	ld	a, e
   15EE 87            [ 4] 3743 	add	a, a
   15EF 83            [ 4] 3744 	add	a, e
   15F0 C6 07         [ 7] 3745 	add	a, #0x07
   15F2 47            [ 4] 3746 	ld	b, a
                           3747 ;src/main.c:993: if (player == 1) x += 39;		
   15F3 0D            [ 4] 3748 	dec	c
   15F4 20 04         [12] 3749 	jr	NZ,00102$
   15F6 78            [ 4] 3750 	ld	a, b
   15F7 C6 27         [ 7] 3751 	add	a, #0x27
   15F9 47            [ 4] 3752 	ld	b, a
   15FA                    3753 00102$:
                           3754 ;src/main.c:994: PrintObject(nPObj, x, 16);
   15FA 3E 10         [ 7] 3755 	ld	a, #0x10
   15FC F5            [11] 3756 	push	af
   15FD 33            [ 6] 3757 	inc	sp
   15FE C5            [11] 3758 	push	bc
   15FF 33            [ 6] 3759 	inc	sp
   1600 3ArADr00      [13] 3760 	ld	a, (_nPObj)
   1603 F5            [11] 3761 	push	af
   1604 33            [ 6] 3762 	inc	sp
   1605 CDrF0r0D      [17] 3763 	call	_PrintObject
   1608 F1            [10] 3764 	pop	af
   1609 33            [ 6] 3765 	inc	sp
   160A C9            [10] 3766 	ret
                           3767 ;src/main.c:999: void PrintKey() {
                           3768 ;	---------------------------------
                           3769 ; Function PrintKey
                           3770 ; ---------------------------------
   160B                    3771 _PrintKey::
                           3772 ;src/main.c:1002: while (i<=4) {
   160B 0E 00         [ 7] 3773 	ld	c, #0x00
   160D 16 3C         [ 7] 3774 	ld	d, #0x3c
   160F                    3775 00101$:
   160F 3E 04         [ 7] 3776 	ld	a, #0x04
   1611 91            [ 4] 3777 	sub	a, c
   1612 D8            [11] 3778 	ret	C
                           3779 ;src/main.c:1003: PrintObject(doorKey[i], x, 16);
   1613 21r0Fr00      [10] 3780 	ld	hl, #_doorKey
   1616 06 00         [ 7] 3781 	ld	b, #0x00
   1618 09            [11] 3782 	add	hl, bc
   1619 46            [ 7] 3783 	ld	b, (hl)
   161A C5            [11] 3784 	push	bc
   161B D5            [11] 3785 	push	de
   161C 3E 10         [ 7] 3786 	ld	a, #0x10
   161E F5            [11] 3787 	push	af
   161F 33            [ 6] 3788 	inc	sp
   1620 58            [ 4] 3789 	ld	e, b
   1621 D5            [11] 3790 	push	de
   1622 CDrF0r0D      [17] 3791 	call	_PrintObject
   1625 F1            [10] 3792 	pop	af
   1626 33            [ 6] 3793 	inc	sp
   1627 D1            [10] 3794 	pop	de
   1628 C1            [10] 3795 	pop	bc
                           3796 ;src/main.c:1004: i++;
   1629 0C            [ 4] 3797 	inc	c
                           3798 ;src/main.c:1005: x+=3;
   162A 14            [ 4] 3799 	inc	d
   162B 14            [ 4] 3800 	inc	d
   162C 14            [ 4] 3801 	inc	d
   162D 18 E0         [12] 3802 	jr	00101$
                           3803 ;src/main.c:1011: u8 CompareKeys() {
                           3804 ;	---------------------------------
                           3805 ; Function CompareKeys
                           3806 ; ---------------------------------
   162F                    3807 _CompareKeys::
                           3808 ;src/main.c:1012: if (doorKey[0] == playerKey[0] && 
   162F 21r0Fr00      [10] 3809 	ld	hl, #_doorKey + 0
   1632 4E            [ 7] 3810 	ld	c, (hl)
   1633 3Ar14r00      [13] 3811 	ld	a, (#_playerKey + 0)
   1636 91            [ 4] 3812 	sub	a, c
   1637 20 2B         [12] 3813 	jr	NZ,00102$
                           3814 ;src/main.c:1013: doorKey[1] == playerKey[1] &&
   1639 21r10r00      [10] 3815 	ld	hl, #_doorKey + 1
   163C 4E            [ 7] 3816 	ld	c, (hl)
   163D 3Ar15r00      [13] 3817 	ld	a, (#_playerKey + 1)
   1640 91            [ 4] 3818 	sub	a, c
   1641 20 21         [12] 3819 	jr	NZ,00102$
                           3820 ;src/main.c:1014: doorKey[2] == playerKey[2] && 
   1643 21r11r00      [10] 3821 	ld	hl, #_doorKey + 2
   1646 4E            [ 7] 3822 	ld	c, (hl)
   1647 3Ar16r00      [13] 3823 	ld	a, (#_playerKey + 2)
   164A 91            [ 4] 3824 	sub	a, c
   164B 20 17         [12] 3825 	jr	NZ,00102$
                           3826 ;src/main.c:1015: doorKey[3] == playerKey[3] &&
   164D 21r12r00      [10] 3827 	ld	hl, #_doorKey + 3
   1650 4E            [ 7] 3828 	ld	c, (hl)
   1651 3Ar17r00      [13] 3829 	ld	a, (#_playerKey + 3)
   1654 91            [ 4] 3830 	sub	a, c
   1655 20 0D         [12] 3831 	jr	NZ,00102$
                           3832 ;src/main.c:1016: doorKey[4] == playerKey[4]) 
   1657 21r13r00      [10] 3833 	ld	hl, #_doorKey + 4
   165A 4E            [ 7] 3834 	ld	c, (hl)
   165B 3Ar18r00      [13] 3835 	ld	a, (#_playerKey + 4)
   165E 91            [ 4] 3836 	sub	a, c
   165F 20 03         [12] 3837 	jr	NZ,00102$
                           3838 ;src/main.c:1017: return 1;
   1661 2E 01         [ 7] 3839 	ld	l, #0x01
   1663 C9            [10] 3840 	ret
   1664                    3841 00102$:
                           3842 ;src/main.c:1019: return 0;
   1664 2E 00         [ 7] 3843 	ld	l, #0x00
   1666 C9            [10] 3844 	ret
                           3845 ;src/main.c:1024: void CheckActiveTile(u8 player) {	
                           3846 ;	---------------------------------
                           3847 ; Function CheckActiveTile
                           3848 ; ---------------------------------
   1667                    3849 _CheckActiveTile::
   1667 DD E5         [15] 3850 	push	ix
   1669 DD 21 00 00   [14] 3851 	ld	ix,#0
   166D DD 39         [15] 3852 	add	ix,sp
   166F 21 FA FF      [10] 3853 	ld	hl, #-6
   1672 39            [11] 3854 	add	hl, sp
   1673 F9            [ 6] 3855 	ld	sp, hl
                           3856 ;src/main.c:1025: u8 currentTile = *GetTileNum(spr[player].x+3, spr[player].y+8);	
   1674 DD 4E 04      [19] 3857 	ld	c,4 (ix)
   1677 06 00         [ 7] 3858 	ld	b,#0x00
   1679 69            [ 4] 3859 	ld	l, c
   167A 60            [ 4] 3860 	ld	h, b
   167B 29            [11] 3861 	add	hl, hl
   167C 09            [11] 3862 	add	hl, bc
   167D 29            [11] 3863 	add	hl, hl
   167E 09            [11] 3864 	add	hl, bc
   167F 29            [11] 3865 	add	hl, hl
   1680 09            [11] 3866 	add	hl, bc
   1681 01r39r00      [10] 3867 	ld	bc,#_spr
   1684 09            [11] 3868 	add	hl,bc
   1685 4D            [ 4] 3869 	ld	c,l
   1686 44            [ 4] 3870 	ld	b,h
   1687 23            [ 6] 3871 	inc	hl
   1688 23            [ 6] 3872 	inc	hl
   1689 23            [ 6] 3873 	inc	hl
   168A 7E            [ 7] 3874 	ld	a, (hl)
   168B C6 08         [ 7] 3875 	add	a, #0x08
   168D 57            [ 4] 3876 	ld	d, a
   168E 69            [ 4] 3877 	ld	l, c
   168F 60            [ 4] 3878 	ld	h, b
   1690 23            [ 6] 3879 	inc	hl
   1691 23            [ 6] 3880 	inc	hl
   1692 7E            [ 7] 3881 	ld	a, (hl)
   1693 C6 03         [ 7] 3882 	add	a, #0x03
   1695 C5            [11] 3883 	push	bc
   1696 5F            [ 4] 3884 	ld	e, a
   1697 D5            [11] 3885 	push	de
   1698 CDr35r02      [17] 3886 	call	_GetTileNum
   169B F1            [10] 3887 	pop	af
   169C C1            [10] 3888 	pop	bc
   169D 7E            [ 7] 3889 	ld	a, (hl)
   169E DD 77 FB      [19] 3890 	ld	-5 (ix), a
                           3891 ;src/main.c:1026: u8 i = 0;
   16A1 DD 36 FA 00   [19] 3892 	ld	-6 (ix), #0x00
                           3893 ;src/main.c:1031: while (coinScore[player] > 0 && spr[player].objNum_mov < 5) {
   16A5 21 0C 00      [10] 3894 	ld	hl, #0x000c
   16A8 09            [11] 3895 	add	hl,bc
   16A9 DD 75 FC      [19] 3896 	ld	-4 (ix), l
   16AC DD 74 FD      [19] 3897 	ld	-3 (ix), h
                           3898 ;src/main.c:1029: if (currentTile >= TILESET_STORE && currentTile <= TILESET_STORE + 5) {
   16AF DD 7E FB      [19] 3899 	ld	a, -5 (ix)
   16B2 D6 27         [ 7] 3900 	sub	a, #0x27
   16B4 DAr87r17      [10] 3901 	jp	C, 00140$
   16B7 3E 2C         [ 7] 3902 	ld	a, #0x2c
   16B9 DD 96 FB      [19] 3903 	sub	a, -5 (ix)
   16BC DAr87r17      [10] 3904 	jp	C, 00140$
                           3905 ;src/main.c:1031: while (coinScore[player] > 0 && spr[player].objNum_mov < 5) {
   16BF                    3906 00112$:
   16BF 3Er0D         [ 7] 3907 	ld	a, #<(_coinScore)
   16C1 DD 86 04      [19] 3908 	add	a, 4 (ix)
   16C4 5F            [ 4] 3909 	ld	e, a
   16C5 3Es00         [ 7] 3910 	ld	a, #>(_coinScore)
   16C7 CE 00         [ 7] 3911 	adc	a, #0x00
   16C9 57            [ 4] 3912 	ld	d, a
   16CA 1A            [ 7] 3913 	ld	a, (de)
   16CB 47            [ 4] 3914 	ld	b,a
   16CC B7            [ 4] 3915 	or	a, a
   16CD CAr99r18      [10] 3916 	jp	Z, 00143$
   16D0 DD 6E FC      [19] 3917 	ld	l,-4 (ix)
   16D3 DD 66 FD      [19] 3918 	ld	h,-3 (ix)
   16D6 4E            [ 7] 3919 	ld	c, (hl)
   16D7 79            [ 4] 3920 	ld	a, c
   16D8 D6 05         [ 7] 3921 	sub	a, #0x05
   16DA D2r99r18      [10] 3922 	jp	NC, 00143$
                           3923 ;src/main.c:1032: if (coinScore[player] < 13) // no money left
                           3924 ;src/main.c:1033: nPObj = coinScore[player] + 3; // assign the corresponding object to the available money
   16DD 78            [ 4] 3925 	ld	a,b
   16DE FE 0D         [ 7] 3926 	cp	a,#0x0d
   16E0 30 08         [12] 3927 	jr	NC,00102$
   16E2 21rADr00      [10] 3928 	ld	hl, #_nPObj
   16E5 C6 03         [ 7] 3929 	add	a, #0x03
   16E7 77            [ 7] 3930 	ld	(hl), a
   16E8 18 05         [12] 3931 	jr	00103$
   16EA                    3932 00102$:
                           3933 ;src/main.c:1035: nPObj = 15; // assign the most expensive object
   16EA 21rADr00      [10] 3934 	ld	hl,#_nPObj + 0
   16ED 36 0F         [10] 3935 	ld	(hl), #0x0f
   16EF                    3936 00103$:
                           3937 ;src/main.c:1036: spr[player].objNum_mov++; // increases the number of objects the player carries
   16EF 0C            [ 4] 3938 	inc	c
   16F0 DD 6E FC      [19] 3939 	ld	l,-4 (ix)
   16F3 DD 66 FD      [19] 3940 	ld	h,-3 (ix)
   16F6 71            [ 7] 3941 	ld	(hl), c
                           3942 ;src/main.c:1037: potScore[player] += coinScore[player]; // increase the potion score
   16F7 FD 21r0Br00   [14] 3943 	ld	iy, #_potScore
   16FB DD 4E 04      [19] 3944 	ld	c,4 (ix)
   16FE 06 00         [ 7] 3945 	ld	b,#0x00
   1700 FD 09         [15] 3946 	add	iy, bc
   1702 FD 4E 00      [19] 3947 	ld	c, 0 (iy)
   1705 1A            [ 7] 3948 	ld	a, (de)
   1706 6F            [ 4] 3949 	ld	l, a
   1707 09            [11] 3950 	add	hl, bc
   1708 FD 75 00      [19] 3951 	ld	0 (iy), l
                           3952 ;src/main.c:1038: score[player] += coinScore[player] * 2; // increase the player score
   170B DD 6E 04      [19] 3953 	ld	l, 4 (ix)
   170E 26 00         [ 7] 3954 	ld	h, #0x00
   1710 29            [11] 3955 	add	hl, hl
   1711 4D            [ 4] 3956 	ld	c, l
   1712 44            [ 4] 3957 	ld	b, h
   1713 FD 21r05r00   [14] 3958 	ld	iy, #_score
   1717 FD 09         [15] 3959 	add	iy, bc
   1719 FD 4E 00      [19] 3960 	ld	c, 0 (iy)
   171C FD 46 01      [19] 3961 	ld	b, 1 (iy)
   171F 1A            [ 7] 3962 	ld	a, (de)
   1720 6F            [ 4] 3963 	ld	l, a
   1721 26 00         [ 7] 3964 	ld	h, #0x00
   1723 29            [11] 3965 	add	hl, hl
   1724 09            [11] 3966 	add	hl, bc
   1725 FD 75 00      [19] 3967 	ld	0 (iy), l
   1728 FD 74 01      [19] 3968 	ld	1 (iy), h
                           3969 ;src/main.c:1039: RefreshHighScore(player);
   172B D5            [11] 3970 	push	de
   172C DD 6E 04      [19] 3971 	ld	l, 4 (ix)
   172F CDrF7r0A      [17] 3972 	call	_RefreshHighScore
   1732 D1            [10] 3973 	pop	de
                           3974 ;src/main.c:1040: coinScore[player] -= nPObj - 3; // decrease the coin score
   1733 1A            [ 7] 3975 	ld	a, (de)
   1734 4F            [ 4] 3976 	ld	c, a
   1735 3ArADr00      [13] 3977 	ld	a,(#_nPObj + 0)
   1738 C6 FD         [ 7] 3978 	add	a, #0xfd
   173A 47            [ 4] 3979 	ld	b, a
   173B 79            [ 4] 3980 	ld	a, c
   173C 90            [ 4] 3981 	sub	a, b
   173D 12            [ 7] 3982 	ld	(de), a
                           3983 ;src/main.c:1041: if (!TwoPlayers) {
   173E 3Ar04r00      [13] 3984 	ld	a,(#_TwoPlayers + 0)
   1741 B7            [ 4] 3985 	or	a, a
   1742 20 34         [12] 3986 	jr	NZ,00110$
                           3987 ;src/main.c:1042: playerKey[spr[player].objNum_mov-1] = nPObj; // add object to key
   1744 DD 6E FC      [19] 3988 	ld	l,-4 (ix)
   1747 DD 66 FD      [19] 3989 	ld	h,-3 (ix)
   174A 4E            [ 7] 3990 	ld	c, (hl)
   174B 0D            [ 4] 3991 	dec	c
   174C 21r14r00      [10] 3992 	ld	hl, #_playerKey
   174F 06 00         [ 7] 3993 	ld	b, #0x00
   1751 09            [11] 3994 	add	hl, bc
   1752 3ArADr00      [13] 3995 	ld	a,(#_nPObj + 0)
   1755 77            [ 7] 3996 	ld	(hl), a
                           3997 ;src/main.c:1044: if (nMap == 0 && (nTip<3 || (nTip<4 && spr[0].objNum_mov >= 5)))
   1756 3Ar00r00      [13] 3998 	ld	a,(#_nMap + 0)
   1759 B7            [ 4] 3999 	or	a, a
   175A 20 1C         [12] 4000 	jr	NZ,00110$
   175C FD 21r1Fr00   [14] 4001 	ld	iy, #_nTip
   1760 FD 7E 00      [19] 4002 	ld	a, 0 (iy)
   1763 D6 03         [ 7] 4003 	sub	a, #0x03
   1765 38 0E         [12] 4004 	jr	C,00104$
   1767 FD 7E 00      [19] 4005 	ld	a, 0 (iy)
   176A D6 04         [ 7] 4006 	sub	a, #0x04
   176C 30 0A         [12] 4007 	jr	NC,00110$
   176E 3Ar45r00      [13] 4008 	ld	a, (#(_spr + 0x000c) + 0)
   1771 D6 05         [ 7] 4009 	sub	a, #0x05
   1773 38 03         [12] 4010 	jr	C,00110$
   1775                    4011 00104$:
                           4012 ;src/main.c:1045: PrintTip();
   1775 CDr79r08      [17] 4013 	call	_PrintTip
   1778                    4014 00110$:
                           4015 ;src/main.c:1047: DeleteObjectInStore();
   1778 CDr24r0F      [17] 4016 	call	_DeleteObjectInStore
                           4017 ;src/main.c:1048: AddObjectToScoreboard(player); 
   177B DD 6E 04      [19] 4018 	ld	l, 4 (ix)
   177E CDrD9r15      [17] 4019 	call	_AddObjectToScoreboard
                           4020 ;src/main.c:1049: RefreshScoreboard();
   1781 CDr80r0C      [17] 4021 	call	_RefreshScoreboard
   1784 C3rBFr16      [10] 4022 	jp	00112$
   1787                    4023 00140$:
                           4024 ;src/main.c:1054: else if (currentTile == TILESET_WELL && (potScore[player] > 0 || coinScore[player] > 0)) {	
   1787 DD 7E FB      [19] 4025 	ld	a, -5 (ix)
   178A D6 26         [ 7] 4026 	sub	a, #0x26
   178C C2r7Ar18      [10] 4027 	jp	NZ,00135$
   178F 3Er0B         [ 7] 4028 	ld	a, #<(_potScore)
   1791 DD 86 04      [19] 4029 	add	a, 4 (ix)
   1794 DD 77 FE      [19] 4030 	ld	-2 (ix), a
   1797 3Es00         [ 7] 4031 	ld	a, #>(_potScore)
   1799 CE 00         [ 7] 4032 	adc	a, #0x00
   179B DD 77 FF      [19] 4033 	ld	-1 (ix), a
   179E DD 6E FE      [19] 4034 	ld	l,-2 (ix)
   17A1 DD 66 FF      [19] 4035 	ld	h,-1 (ix)
   17A4 7E            [ 7] 4036 	ld	a, (hl)
   17A5 B7            [ 4] 4037 	or	a, a
   17A6 20 0E         [12] 4038 	jr	NZ,00134$
   17A8 01r0Dr00      [10] 4039 	ld	bc, #_coinScore+0
   17AB DD 6E 04      [19] 4040 	ld	l,4 (ix)
   17AE 26 00         [ 7] 4041 	ld	h,#0x00
   17B0 09            [11] 4042 	add	hl, bc
   17B1 7E            [ 7] 4043 	ld	a, (hl)
   17B2 B7            [ 4] 4044 	or	a, a
   17B3 CAr7Ar18      [10] 4045 	jp	Z, 00135$
   17B6                    4046 00134$:
                           4047 ;src/main.c:1057: if (player == 0)
   17B6 DD 7E 04      [19] 4048 	ld	a, 4 (ix)
   17B9 B7            [ 4] 4049 	or	a, a
   17BA 20 17         [12] 4050 	jr	NZ,00116$
                           4051 ;src/main.c:1059: cpct_px2byteM0(BG_COLOR, BG_COLOR), 20, 8);
   17BC 21 01 01      [10] 4052 	ld	hl, #0x0101
   17BF E5            [11] 4053 	push	hl
   17C0 CDr00r00      [17] 4054 	call	_cpct_px2byteM0
   17C3 26 00         [ 7] 4055 	ld	h, #0x00
                           4056 ;src/main.c:1058: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 7, 16), 
   17C5 01 14 08      [10] 4057 	ld	bc, #0x0814
   17C8 C5            [11] 4058 	push	bc
   17C9 E5            [11] 4059 	push	hl
   17CA 21 A7 C0      [10] 4060 	ld	hl, #0xc0a7
   17CD E5            [11] 4061 	push	hl
   17CE CDr00r00      [17] 4062 	call	_cpct_drawSolidBox
   17D1 18 15         [12] 4063 	jr	00117$
   17D3                    4064 00116$:
                           4065 ;src/main.c:1062: cpct_px2byteM0(BG_COLOR, BG_COLOR), 20, 8);
   17D3 21 01 01      [10] 4066 	ld	hl, #0x0101
   17D6 E5            [11] 4067 	push	hl
   17D7 CDr00r00      [17] 4068 	call	_cpct_px2byteM0
   17DA 26 00         [ 7] 4069 	ld	h, #0x00
                           4070 ;src/main.c:1061: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 46, 16), 
   17DC 01 14 08      [10] 4071 	ld	bc, #0x0814
   17DF C5            [11] 4072 	push	bc
   17E0 E5            [11] 4073 	push	hl
   17E1 21 CE C0      [10] 4074 	ld	hl, #0xc0ce
   17E4 E5            [11] 4075 	push	hl
   17E5 CDr00r00      [17] 4076 	call	_cpct_drawSolidBox
   17E8                    4077 00117$:
                           4078 ;src/main.c:1064: coinScore[player] = 0; 		// throwing money
   17E8 01r0Dr00      [10] 4079 	ld	bc, #_coinScore+0
   17EB DD 6E 04      [19] 4080 	ld	l,4 (ix)
   17EE 26 00         [ 7] 4081 	ld	h,#0x00
   17F0 09            [11] 4082 	add	hl, bc
   17F1 36 00         [10] 4083 	ld	(hl), #0x00
                           4084 ;src/main.c:1065: spr[player].objNum_mov = 0;	// throwing objects
   17F3 DD 6E FC      [19] 4085 	ld	l,-4 (ix)
   17F6 DD 66 FD      [19] 4086 	ld	h,-3 (ix)
   17F9 36 00         [10] 4087 	ld	(hl), #0x00
                           4088 ;src/main.c:1066: potScore[player] = 0;		// potion value to zero
   17FB DD 6E FE      [19] 4089 	ld	l,-2 (ix)
   17FE DD 66 FF      [19] 4090 	ld	h,-1 (ix)
   1801 36 00         [10] 4091 	ld	(hl), #0x00
                           4092 ;src/main.c:1068: if (!TwoPlayers) { // search for valid objects to retrieve them (only 1 player game)			
   1803 3Ar04r00      [13] 4093 	ld	a,(#_TwoPlayers + 0)
   1806 B7            [ 4] 4094 	or	a, a
   1807 20 6C         [12] 4095 	jr	NZ,00128$
                           4096 ;src/main.c:1069: while (i<5) {
   1809 01r14r00      [10] 4097 	ld	bc, #_playerKey+0
   180C                    4098 00124$:
   180C DD 7E FA      [19] 4099 	ld	a, -6 (ix)
   180F D6 05         [ 7] 4100 	sub	a, #0x05
   1811 30 5F         [12] 4101 	jr	NC,00126$
                           4102 ;src/main.c:1070: if (playerKey[i] == doorKey[i] ) {
   1813 DD 6E FA      [19] 4103 	ld	l,-6 (ix)
   1816 26 00         [ 7] 4104 	ld	h,#0x00
   1818 09            [11] 4105 	add	hl, bc
   1819 5E            [ 7] 4106 	ld	e, (hl)
   181A 3Er0F         [ 7] 4107 	ld	a, #<(_doorKey)
   181C DD 86 FA      [19] 4108 	add	a, -6 (ix)
   181F 6F            [ 4] 4109 	ld	l, a
   1820 3Es00         [ 7] 4110 	ld	a, #>(_doorKey)
   1822 CE 00         [ 7] 4111 	adc	a, #0x00
   1824 67            [ 4] 4112 	ld	h, a
   1825 7E            [ 7] 4113 	ld	a, (hl)
   1826 93            [ 4] 4114 	sub	a, e
   1827 20 34         [12] 4115 	jr	NZ,00161$
                           4116 ;src/main.c:1071: potScore[0] += playerKey[i] - 3; // increases potion value
   1829 21r0Br00      [10] 4117 	ld	hl, #_potScore + 0
   182C 6E            [ 7] 4118 	ld	l, (hl)
   182D 7B            [ 4] 4119 	ld	a, e
   182E C6 FD         [ 7] 4120 	add	a, #0xfd
   1830 85            [ 4] 4121 	add	a,l
   1831 32r0Br00      [13] 4122 	ld	(#_potScore),a
                           4123 ;src/main.c:1072: spr[0].objNum_mov++; // increases the number of objects		
   1834 3Ar45r00      [13] 4124 	ld	a, (#(_spr + 0x000c) + 0)
   1837 3C            [ 4] 4125 	inc	a
   1838 32r45r00      [13] 4126 	ld	(#(_spr + 0x000c)),a
                           4127 ;src/main.c:1074: PrintObject(playerKey[i++], spr[0].objNum_mov * 3 + 7, 16);					
   183B 5F            [ 4] 4128 	ld	e, a
   183C 87            [ 4] 4129 	add	a, a
   183D 83            [ 4] 4130 	add	a, e
   183E C6 07         [ 7] 4131 	add	a, #0x07
   1840 5F            [ 4] 4132 	ld	e, a
   1841 DD 6E FA      [19] 4133 	ld	l, -6 (ix)
   1844 DD 34 FA      [23] 4134 	inc	-6 (ix)
   1847 26 00         [ 7] 4135 	ld	h,#0x00
   1849 09            [11] 4136 	add	hl, bc
   184A 56            [ 7] 4137 	ld	d, (hl)
   184B C5            [11] 4138 	push	bc
   184C 3E 10         [ 7] 4139 	ld	a, #0x10
   184E F5            [11] 4140 	push	af
   184F 33            [ 6] 4141 	inc	sp
   1850 7B            [ 4] 4142 	ld	a, e
   1851 F5            [11] 4143 	push	af
   1852 33            [ 6] 4144 	inc	sp
   1853 D5            [11] 4145 	push	de
   1854 33            [ 6] 4146 	inc	sp
   1855 CDrF0r0D      [17] 4147 	call	_PrintObject
   1858 F1            [10] 4148 	pop	af
   1859 33            [ 6] 4149 	inc	sp
   185A C1            [10] 4150 	pop	bc
   185B 18 AF         [12] 4151 	jr	00124$
                           4152 ;src/main.c:1077: while (i<5)	
   185D                    4153 00161$:
   185D DD 5E FA      [19] 4154 	ld	e, -6 (ix)
   1860                    4155 00118$:
   1860 7B            [ 4] 4156 	ld	a, e
   1861 D6 05         [ 7] 4157 	sub	a, #0x05
   1863 30 A7         [12] 4158 	jr	NC,00124$
                           4159 ;src/main.c:1078: playerKey[i++] = 0;					
   1865 53            [ 4] 4160 	ld	d, e
   1866 1C            [ 4] 4161 	inc	e
   1867 DD 73 FA      [19] 4162 	ld	-6 (ix), e
   186A 6A            [ 4] 4163 	ld	l,d
   186B 26 00         [ 7] 4164 	ld	h,#0x00
   186D 09            [11] 4165 	add	hl, bc
   186E 36 00         [10] 4166 	ld	(hl), #0x00
   1870 18 EE         [12] 4167 	jr	00118$
   1872                    4168 00126$:
                           4169 ;src/main.c:1080: DeleteObjectInStore();
   1872 CDr24r0F      [17] 4170 	call	_DeleteObjectInStore
   1875                    4171 00128$:
                           4172 ;src/main.c:1082: RefreshScoreboard();
   1875 CDr80r0C      [17] 4173 	call	_RefreshScoreboard
   1878 18 1F         [12] 4174 	jr	00143$
   187A                    4175 00135$:
                           4176 ;src/main.c:1086: else if ((currentTile == TILESET_DOOR || currentTile == 30) && 
   187A DD 7E FB      [19] 4177 	ld	a, -5 (ix)
   187D D6 0E         [ 7] 4178 	sub	a, #0x0e
   187F 28 07         [12] 4179 	jr	Z,00132$
   1881 DD 7E FB      [19] 4180 	ld	a, -5 (ix)
   1884 D6 1E         [ 7] 4181 	sub	a, #0x1e
   1886 20 11         [12] 4182 	jr	NZ,00143$
   1888                    4183 00132$:
                           4184 ;src/main.c:1087: spr[0].objNum_mov == 5 && CompareKeys()) {
   1888 3Ar45r00      [13] 4185 	ld	a, (#(_spr + 0x000c) + 0)
   188B D6 05         [ 7] 4186 	sub	a, #0x05
   188D 20 0A         [12] 4187 	jr	NZ,00143$
   188F CDr2Fr16      [17] 4188 	call	_CompareKeys
   1892 7D            [ 4] 4189 	ld	a, l
   1893 B7            [ 4] 4190 	or	a, a
   1894 28 03         [12] 4191 	jr	Z,00143$
                           4192 ;src/main.c:1088: MakeDuel();	
   1896 CDrBFr23      [17] 4193 	call	_MakeDuel
   1899                    4194 00143$:
   1899 DD F9         [10] 4195 	ld	sp, ix
   189B DD E1         [14] 4196 	pop	ix
   189D C9            [10] 4197 	ret
                           4198 ;src/main.c:1106: void PrintSprite(TSpr *pSpr) __z88dk_fastcall {
                           4199 ;	---------------------------------
                           4200 ; Function PrintSprite
                           4201 ; ---------------------------------
   189E                    4202 _PrintSprite::
                           4203 ;src/main.c:1109: SPR_W, SPR_H, g_maskTable);
                           4204 ;src/main.c:1108: cpct_getScreenPtr(CPCT_VMEM_START, pSpr->x, pSpr->y), 
   189E 4D            [ 4] 4205 	ld	c,l
   189F 44            [ 4] 4206 	ld	b,h
   18A0 23            [ 6] 4207 	inc	hl
   18A1 23            [ 6] 4208 	inc	hl
   18A2 23            [ 6] 4209 	inc	hl
   18A3 56            [ 7] 4210 	ld	d, (hl)
   18A4 69            [ 4] 4211 	ld	l, c
   18A5 60            [ 4] 4212 	ld	h, b
   18A6 23            [ 6] 4213 	inc	hl
   18A7 23            [ 6] 4214 	inc	hl
   18A8 7E            [ 7] 4215 	ld	a, (hl)
   18A9 C5            [11] 4216 	push	bc
   18AA 5F            [ 4] 4217 	ld	e, a
   18AB D5            [11] 4218 	push	de
   18AC 21 00 C0      [10] 4219 	ld	hl, #0xc000
   18AF E5            [11] 4220 	push	hl
   18B0 CDr00r00      [17] 4221 	call	_cpct_getScreenPtr
   18B3 EB            [ 4] 4222 	ex	de,hl
   18B4 FD E1         [14] 4223 	pop	iy
   18B6 FD 6E 08      [19] 4224 	ld	l, 8 (iy)
   18B9 FD 66 09      [19] 4225 	ld	h, 9 (iy)
   18BC 4E            [ 7] 4226 	ld	c, (hl)
   18BD 23            [ 6] 4227 	inc	hl
   18BE 46            [ 7] 4228 	ld	b, (hl)
   18BF 21r00r01      [10] 4229 	ld	hl, #_g_maskTable
   18C2 E5            [11] 4230 	push	hl
   18C3 21 05 0C      [10] 4231 	ld	hl, #0x0c05
   18C6 E5            [11] 4232 	push	hl
   18C7 D5            [11] 4233 	push	de
   18C8 C5            [11] 4234 	push	bc
   18C9 CDr00r00      [17] 4235 	call	_cpct_drawSpriteMaskedAlignedTable
   18CC C9            [10] 4236 	ret
                           4237 ;src/main.c:1114: void DeleteSprite(TSpr *pSpr) __z88dk_fastcall {	
                           4238 ;	---------------------------------
                           4239 ; Function DeleteSprite
                           4240 ; ---------------------------------
   18CD                    4241 _DeleteSprite::
   18CD DD E5         [15] 4242 	push	ix
   18CF DD 21 00 00   [14] 4243 	ld	ix,#0
   18D3 DD 39         [15] 4244 	add	ix,sp
   18D5 F5            [11] 4245 	push	af
   18D6 3B            [ 6] 4246 	dec	sp
   18D7 4D            [ 4] 4247 	ld	c, l
   18D8 44            [ 4] 4248 	ld	b, h
                           4249 ;src/main.c:1116: 3 + (pSpr->px & 1), 3 + (pSpr->py & 3 ? 1 : 0),	
   18D9 C5            [11] 4250 	push	bc
   18DA FD E1         [14] 4251 	pop	iy
   18DC FD 5E 05      [19] 4252 	ld	e, 5 (iy)
   18DF 7B            [ 4] 4253 	ld	a, e
   18E0 E6 03         [ 7] 4254 	and	a, #0x03
   18E2 28 04         [12] 4255 	jr	Z,00103$
   18E4 3E 01         [ 7] 4256 	ld	a, #0x01
   18E6 18 02         [12] 4257 	jr	00104$
   18E8                    4258 00103$:
   18E8 3E 00         [ 7] 4259 	ld	a, #0x00
   18EA                    4260 00104$:
   18EA C6 03         [ 7] 4261 	add	a, #0x03
   18EC DD 77 FF      [19] 4262 	ld	-1 (ix), a
   18EF C5            [11] 4263 	push	bc
   18F0 FD E1         [14] 4264 	pop	iy
   18F2 FD 4E 04      [19] 4265 	ld	c, 4 (iy)
   18F5 79            [ 4] 4266 	ld	a, c
   18F6 E6 01         [ 7] 4267 	and	a, #0x01
   18F8 47            [ 4] 4268 	ld	b, a
   18F9 04            [ 4] 4269 	inc	b
   18FA 04            [ 4] 4270 	inc	b
   18FB 04            [ 4] 4271 	inc	b
                           4272 ;src/main.c:1115: cpct_etm_drawTileBox2x4(pSpr->px / 2, (pSpr->py - ORIG_MAP_Y) / 4, 
   18FC 16 00         [ 7] 4273 	ld	d, #0x00
   18FE 7B            [ 4] 4274 	ld	a, e
   18FF C6 E0         [ 7] 4275 	add	a, #0xe0
   1901 DD 77 FD      [19] 4276 	ld	-3 (ix), a
   1904 7A            [ 4] 4277 	ld	a, d
   1905 CE FF         [ 7] 4278 	adc	a, #0xff
   1907 DD 77 FE      [19] 4279 	ld	-2 (ix), a
   190A E1            [10] 4280 	pop	hl
   190B E5            [11] 4281 	push	hl
   190C DD CB FE 7E   [20] 4282 	bit	7, -2 (ix)
   1910 28 04         [12] 4283 	jr	Z,00105$
   1912 21 E3 FF      [10] 4284 	ld	hl, #0xffe3
   1915 19            [11] 4285 	add	hl, de
   1916                    4286 00105$:
   1916 CB 2C         [ 8] 4287 	sra	h
   1918 CB 1D         [ 8] 4288 	rr	l
   191A CB 2C         [ 8] 4289 	sra	h
   191C CB 1D         [ 8] 4290 	rr	l
   191E 5D            [ 4] 4291 	ld	e, l
   191F CB 39         [ 8] 4292 	srl	c
   1921 21 71 0F      [10] 4293 	ld	hl, #0x0f71
   1924 E5            [11] 4294 	push	hl
   1925 21 40 C1      [10] 4295 	ld	hl, #0xc140
   1928 E5            [11] 4296 	push	hl
   1929 3E 28         [ 7] 4297 	ld	a, #0x28
   192B F5            [11] 4298 	push	af
   192C 33            [ 6] 4299 	inc	sp
   192D DD 7E FF      [19] 4300 	ld	a, -1 (ix)
   1930 F5            [11] 4301 	push	af
   1931 33            [ 6] 4302 	inc	sp
   1932 C5            [11] 4303 	push	bc
   1933 33            [ 6] 4304 	inc	sp
   1934 43            [ 4] 4305 	ld	b, e
   1935 C5            [11] 4306 	push	bc
   1936 CDr00r00      [17] 4307 	call	_cpct_etm_drawTileBox2x4
   1939 DD F9         [10] 4308 	ld	sp, ix
   193B DD E1         [14] 4309 	pop	ix
   193D C9            [10] 4310 	ret
                           4311 ;src/main.c:1122: void AssignFrame(TSpr *pSpr, TFrm **anim) {
                           4312 ;	---------------------------------
                           4313 ; Function AssignFrame
                           4314 ; ---------------------------------
   193E                    4315 _AssignFrame::
   193E DD E5         [15] 4316 	push	ix
   1940 DD 21 00 00   [14] 4317 	ld	ix,#0
   1944 DD 39         [15] 4318 	add	ix,sp
                           4319 ;src/main.c:1123: u8 animPause = 2;
   1946 16 02         [ 7] 4320 	ld	d, #0x02
                           4321 ;src/main.c:1124: if (pSpr->num > 3) animPause = 1; // slow enemies (4 and 5) have no pause in animation
   1948 DD 6E 04      [19] 4322 	ld	l,4 (ix)
   194B DD 66 05      [19] 4323 	ld	h,5 (ix)
   194E 4E            [ 7] 4324 	ld	c, (hl)
   194F 3E 03         [ 7] 4325 	ld	a, #0x03
   1951 91            [ 4] 4326 	sub	a, c
   1952 30 02         [12] 4327 	jr	NC,00102$
   1954 16 01         [ 7] 4328 	ld	d, #0x01
   1956                    4329 00102$:
                           4330 ;src/main.c:1125: pSpr->frm = anim[pSpr->nFrm / animPause];	
   1956 7D            [ 4] 4331 	ld	a, l
   1957 C6 08         [ 7] 4332 	add	a, #0x08
   1959 4F            [ 4] 4333 	ld	c, a
   195A 7C            [ 4] 4334 	ld	a, h
   195B CE 00         [ 7] 4335 	adc	a, #0x00
   195D 47            [ 4] 4336 	ld	b, a
   195E E5            [11] 4337 	push	hl
   195F FD E1         [14] 4338 	pop	iy
   1961 FD 7E 0A      [19] 4339 	ld	a, 10 (iy)
   1964 C5            [11] 4340 	push	bc
   1965 5F            [ 4] 4341 	ld	e, a
   1966 D5            [11] 4342 	push	de
   1967 CDr00r00      [17] 4343 	call	__divuchar
   196A F1            [10] 4344 	pop	af
   196B C1            [10] 4345 	pop	bc
   196C 26 00         [ 7] 4346 	ld	h, #0x00
   196E 29            [11] 4347 	add	hl, hl
   196F EB            [ 4] 4348 	ex	de,hl
   1970 DD 6E 06      [19] 4349 	ld	l,6 (ix)
   1973 DD 66 07      [19] 4350 	ld	h,7 (ix)
   1976 19            [11] 4351 	add	hl, de
   1977 5E            [ 7] 4352 	ld	e, (hl)
   1978 23            [ 6] 4353 	inc	hl
   1979 56            [ 7] 4354 	ld	d, (hl)
   197A 7B            [ 4] 4355 	ld	a, e
   197B 02            [ 7] 4356 	ld	(bc), a
   197C 03            [ 6] 4357 	inc	bc
   197D 7A            [ 4] 4358 	ld	a, d
   197E 02            [ 7] 4359 	ld	(bc), a
   197F DD E1         [14] 4360 	pop	ix
   1981 C9            [10] 4361 	ret
                           4362 ;src/main.c:1130: void SelectFrame(TSpr *pSpr) __z88dk_fastcall {
                           4363 ;	---------------------------------
                           4364 ; Function SelectFrame
                           4365 ; ---------------------------------
   1982                    4366 _SelectFrame::
   1982 DD E5         [15] 4367 	push	ix
   1984 DD 21 00 00   [14] 4368 	ld	ix,#0
   1988 DD 39         [15] 4369 	add	ix,sp
   198A F5            [11] 4370 	push	af
   198B DD 75 FE      [19] 4371 	ld	-2 (ix), l
   198E DD 74 FF      [19] 4372 	ld	-1 (ix), h
                           4373 ;src/main.c:1132: if(pSpr->ident == SORCERER1) {
   1991 E1            [10] 4374 	pop	hl
   1992 E5            [11] 4375 	push	hl
   1993 23            [ 6] 4376 	inc	hl
   1994 4E            [ 7] 4377 	ld	c, (hl)
                           4378 ;src/main.c:1133: switch(pSpr->status) {
   1995 DD 7E FE      [19] 4379 	ld	a, -2 (ix)
   1998 C6 06         [ 7] 4380 	add	a, #0x06
   199A 5F            [ 4] 4381 	ld	e, a
   199B DD 7E FF      [19] 4382 	ld	a, -1 (ix)
   199E CE 00         [ 7] 4383 	adc	a, #0x00
   19A0 57            [ 4] 4384 	ld	d, a
                           4385 ;src/main.c:1132: if(pSpr->ident == SORCERER1) {
   19A1 79            [ 4] 4386 	ld	a, c
   19A2 B7            [ 4] 4387 	or	a, a
   19A3 20 75         [12] 4388 	jr	NZ,00149$
                           4389 ;src/main.c:1133: switch(pSpr->status) {
   19A5 1A            [ 7] 4390 	ld	a, (de)
   19A6 4F            [ 4] 4391 	ld	c, a
   19A7 3E 04         [ 7] 4392 	ld	a, #0x04
   19A9 91            [ 4] 4393 	sub	a, c
   19AA DArF3r1B      [10] 4394 	jp	C, 00151$
   19AD 06 00         [ 7] 4395 	ld	b, #0x00
   19AF 21rB6r19      [10] 4396 	ld	hl, #00245$
   19B2 09            [11] 4397 	add	hl, bc
   19B3 09            [11] 4398 	add	hl, bc
   19B4 09            [11] 4399 	add	hl, bc
   19B5 E9            [ 4] 4400 	jp	(hl)
   19B6                    4401 00245$:
   19B6 C3rC5r19      [10] 4402 	jp	00101$
   19B9 C3rD5r19      [10] 4403 	jp	00102$
   19BC C3rE5r19      [10] 4404 	jp	00103$
   19BF C3rF5r19      [10] 4405 	jp	00104$
   19C2 C3r05r1A      [10] 4406 	jp	00105$
                           4407 ;src/main.c:1134: case S_walkingUp: 		{AssignFrame(&spr[0], animUp_Sorcerer1); break;}
   19C5                    4408 00101$:
   19C5 21r1Br00      [10] 4409 	ld	hl, #_animUp_Sorcerer1
   19C8 E5            [11] 4410 	push	hl
   19C9 21r39r00      [10] 4411 	ld	hl, #_spr
   19CC E5            [11] 4412 	push	hl
   19CD CDr3Er19      [17] 4413 	call	_AssignFrame
   19D0 F1            [10] 4414 	pop	af
   19D1 F1            [10] 4415 	pop	af
   19D2 C3rF3r1B      [10] 4416 	jp	00151$
                           4417 ;src/main.c:1135: case S_walkingDown:		{AssignFrame(&spr[0], animDown_Sorcerer1); break;}
   19D5                    4418 00102$:
   19D5 21r1Fr00      [10] 4419 	ld	hl, #_animDown_Sorcerer1
   19D8 E5            [11] 4420 	push	hl
   19D9 21r39r00      [10] 4421 	ld	hl, #_spr
   19DC E5            [11] 4422 	push	hl
   19DD CDr3Er19      [17] 4423 	call	_AssignFrame
   19E0 F1            [10] 4424 	pop	af
   19E1 F1            [10] 4425 	pop	af
   19E2 C3rF3r1B      [10] 4426 	jp	00151$
                           4427 ;src/main.c:1136: case S_walkingLeft:		{AssignFrame(&spr[0], animLeft_Sorcerer1); break;}
   19E5                    4428 00103$:
   19E5 21r23r00      [10] 4429 	ld	hl, #_animLeft_Sorcerer1
   19E8 E5            [11] 4430 	push	hl
   19E9 21r39r00      [10] 4431 	ld	hl, #_spr
   19EC E5            [11] 4432 	push	hl
   19ED CDr3Er19      [17] 4433 	call	_AssignFrame
   19F0 F1            [10] 4434 	pop	af
   19F1 F1            [10] 4435 	pop	af
   19F2 C3rF3r1B      [10] 4436 	jp	00151$
                           4437 ;src/main.c:1137: case S_walkingRight:	{AssignFrame(&spr[0], animRight_Sorcerer1); break;}
   19F5                    4438 00104$:
   19F5 21r27r00      [10] 4439 	ld	hl, #_animRight_Sorcerer1
   19F8 E5            [11] 4440 	push	hl
   19F9 21r39r00      [10] 4441 	ld	hl, #_spr
   19FC E5            [11] 4442 	push	hl
   19FD CDr3Er19      [17] 4443 	call	_AssignFrame
   1A00 F1            [10] 4444 	pop	af
   1A01 F1            [10] 4445 	pop	af
   1A02 C3rF3r1B      [10] 4446 	jp	00151$
                           4447 ;src/main.c:1138: case S_stopped:			{spr[0].frm = &frmSorcerer1[spr[0].dir*2];}		
   1A05                    4448 00105$:
   1A05 01r0Br00      [10] 4449 	ld	bc, #_frmSorcerer1+0
   1A08 3Ar40r00      [13] 4450 	ld	a, (#_spr + 7)
   1A0B 87            [ 4] 4451 	add	a, a
   1A0C 6F            [ 4] 4452 	ld	l, a
   1A0D 26 00         [ 7] 4453 	ld	h, #0x00
   1A0F 29            [11] 4454 	add	hl, hl
   1A10 09            [11] 4455 	add	hl,bc
   1A11 4D            [ 4] 4456 	ld	c, l
   1A12 44            [ 4] 4457 	ld	b, h
   1A13 ED 43r41r00   [20] 4458 	ld	((_spr + 0x0008)), bc
                           4459 ;src/main.c:1139: }
   1A17 C3rF3r1B      [10] 4460 	jp	00151$
   1A1A                    4461 00149$:
                           4462 ;src/main.c:1142: else if(pSpr->ident == SORCERER2) {
   1A1A 79            [ 4] 4463 	ld	a, c
   1A1B 3D            [ 4] 4464 	dec	a
   1A1C 20 75         [12] 4465 	jr	NZ,00146$
                           4466 ;src/main.c:1143: switch(pSpr->status) {
   1A1E 1A            [ 7] 4467 	ld	a, (de)
   1A1F 4F            [ 4] 4468 	ld	c, a
   1A20 3E 04         [ 7] 4469 	ld	a, #0x04
   1A22 91            [ 4] 4470 	sub	a, c
   1A23 DArF3r1B      [10] 4471 	jp	C, 00151$
   1A26 06 00         [ 7] 4472 	ld	b, #0x00
   1A28 21r2Fr1A      [10] 4473 	ld	hl, #00248$
   1A2B 09            [11] 4474 	add	hl, bc
   1A2C 09            [11] 4475 	add	hl, bc
   1A2D 09            [11] 4476 	add	hl, bc
   1A2E E9            [ 4] 4477 	jp	(hl)
   1A2F                    4478 00248$:
   1A2F C3r3Er1A      [10] 4479 	jp	00107$
   1A32 C3r4Er1A      [10] 4480 	jp	00108$
   1A35 C3r5Er1A      [10] 4481 	jp	00109$
   1A38 C3r6Er1A      [10] 4482 	jp	00110$
   1A3B C3r7Er1A      [10] 4483 	jp	00111$
                           4484 ;src/main.c:1144: case S_walkingUp: 		{AssignFrame(&spr[1], animUp_Sorcerer2); break;}
   1A3E                    4485 00107$:
   1A3E 21r3Br00      [10] 4486 	ld	hl, #_animUp_Sorcerer2
   1A41 E5            [11] 4487 	push	hl
   1A42 21r48r00      [10] 4488 	ld	hl, #(_spr + 0x000f)
   1A45 E5            [11] 4489 	push	hl
   1A46 CDr3Er19      [17] 4490 	call	_AssignFrame
   1A49 F1            [10] 4491 	pop	af
   1A4A F1            [10] 4492 	pop	af
   1A4B C3rF3r1B      [10] 4493 	jp	00151$
                           4494 ;src/main.c:1145: case S_walkingDown:		{AssignFrame(&spr[1], animDown_Sorcerer2); break;}
   1A4E                    4495 00108$:
   1A4E 21r3Fr00      [10] 4496 	ld	hl, #_animDown_Sorcerer2
   1A51 E5            [11] 4497 	push	hl
   1A52 21r48r00      [10] 4498 	ld	hl, #(_spr + 0x000f)
   1A55 E5            [11] 4499 	push	hl
   1A56 CDr3Er19      [17] 4500 	call	_AssignFrame
   1A59 F1            [10] 4501 	pop	af
   1A5A F1            [10] 4502 	pop	af
   1A5B C3rF3r1B      [10] 4503 	jp	00151$
                           4504 ;src/main.c:1146: case S_walkingLeft:		{AssignFrame(&spr[1], animLeft_Sorcerer2); break;}
   1A5E                    4505 00109$:
   1A5E 21r43r00      [10] 4506 	ld	hl, #_animLeft_Sorcerer2
   1A61 E5            [11] 4507 	push	hl
   1A62 21r48r00      [10] 4508 	ld	hl, #(_spr + 0x000f)
   1A65 E5            [11] 4509 	push	hl
   1A66 CDr3Er19      [17] 4510 	call	_AssignFrame
   1A69 F1            [10] 4511 	pop	af
   1A6A F1            [10] 4512 	pop	af
   1A6B C3rF3r1B      [10] 4513 	jp	00151$
                           4514 ;src/main.c:1147: case S_walkingRight:	{AssignFrame(&spr[1], animRight_Sorcerer2); break;}
   1A6E                    4515 00110$:
   1A6E 21r47r00      [10] 4516 	ld	hl, #_animRight_Sorcerer2
   1A71 E5            [11] 4517 	push	hl
   1A72 21r48r00      [10] 4518 	ld	hl, #(_spr + 0x000f)
   1A75 E5            [11] 4519 	push	hl
   1A76 CDr3Er19      [17] 4520 	call	_AssignFrame
   1A79 F1            [10] 4521 	pop	af
   1A7A F1            [10] 4522 	pop	af
   1A7B C3rF3r1B      [10] 4523 	jp	00151$
                           4524 ;src/main.c:1148: case S_stopped:			{spr[1].frm = &frmSorcerer2[spr[1].dir*2];}	
   1A7E                    4525 00111$:
   1A7E 01r2Br00      [10] 4526 	ld	bc, #_frmSorcerer2+0
   1A81 3Ar4Fr00      [13] 4527 	ld	a, (#_spr + 22)
   1A84 87            [ 4] 4528 	add	a, a
   1A85 6F            [ 4] 4529 	ld	l, a
   1A86 26 00         [ 7] 4530 	ld	h, #0x00
   1A88 29            [11] 4531 	add	hl, hl
   1A89 09            [11] 4532 	add	hl,bc
   1A8A 4D            [ 4] 4533 	ld	c, l
   1A8B 44            [ 4] 4534 	ld	b, h
   1A8C ED 43r50r00   [20] 4535 	ld	((_spr + 0x0017)), bc
                           4536 ;src/main.c:1149: }
   1A90 C3rF3r1B      [10] 4537 	jp	00151$
   1A93                    4538 00146$:
                           4539 ;src/main.c:1153: switch(pSpr->dir) {
   1A93 DD 7E FE      [19] 4540 	ld	a, -2 (ix)
   1A96 C6 07         [ 7] 4541 	add	a, #0x07
   1A98 5F            [ 4] 4542 	ld	e, a
   1A99 DD 7E FF      [19] 4543 	ld	a, -1 (ix)
   1A9C CE 00         [ 7] 4544 	adc	a, #0x00
   1A9E 57            [ 4] 4545 	ld	d, a
                           4546 ;src/main.c:1152: else if(pSpr->ident == SENTINEL) {
   1A9F 79            [ 4] 4547 	ld	a, c
   1AA0 D6 02         [ 7] 4548 	sub	a, #0x02
   1AA2 20 57         [12] 4549 	jr	NZ,00143$
                           4550 ;src/main.c:1153: switch(pSpr->dir) {
   1AA4 1A            [ 7] 4551 	ld	a, (de)
   1AA5 B7            [ 4] 4552 	or	a, a
   1AA6 28 0F         [12] 4553 	jr	Z,00113$
   1AA8 FE 01         [ 7] 4554 	cp	a, #0x01
   1AAA 28 1C         [12] 4555 	jr	Z,00114$
   1AAC FE 02         [ 7] 4556 	cp	a, #0x02
   1AAE 28 29         [12] 4557 	jr	Z,00115$
   1AB0 D6 03         [ 7] 4558 	sub	a, #0x03
   1AB2 28 36         [12] 4559 	jr	Z,00116$
   1AB4 C3rF3r1B      [10] 4560 	jp	00151$
                           4561 ;src/main.c:1154: case D_up:				{AssignFrame(pSpr, animUp_Sentinel); break;}
   1AB7                    4562 00113$:
   1AB7 21r5Br00      [10] 4563 	ld	hl, #_animUp_Sentinel
   1ABA 4D            [ 4] 4564 	ld	c, l
   1ABB 44            [ 4] 4565 	ld	b, h
   1ABC E1            [10] 4566 	pop	hl
   1ABD E5            [11] 4567 	push	hl
   1ABE C5            [11] 4568 	push	bc
   1ABF E5            [11] 4569 	push	hl
   1AC0 CDr3Er19      [17] 4570 	call	_AssignFrame
   1AC3 F1            [10] 4571 	pop	af
   1AC4 F1            [10] 4572 	pop	af
   1AC5 C3rF3r1B      [10] 4573 	jp	00151$
                           4574 ;src/main.c:1155: case D_down:			{AssignFrame(pSpr, animDown_Sentinel); break;}
   1AC8                    4575 00114$:
   1AC8 21r5Fr00      [10] 4576 	ld	hl, #_animDown_Sentinel
   1ACB 4D            [ 4] 4577 	ld	c, l
   1ACC 44            [ 4] 4578 	ld	b, h
   1ACD E1            [10] 4579 	pop	hl
   1ACE E5            [11] 4580 	push	hl
   1ACF C5            [11] 4581 	push	bc
   1AD0 E5            [11] 4582 	push	hl
   1AD1 CDr3Er19      [17] 4583 	call	_AssignFrame
   1AD4 F1            [10] 4584 	pop	af
   1AD5 F1            [10] 4585 	pop	af
   1AD6 C3rF3r1B      [10] 4586 	jp	00151$
                           4587 ;src/main.c:1156: case D_left:			{AssignFrame(pSpr, animLeft_Sentinel); break;}
   1AD9                    4588 00115$:
   1AD9 21r63r00      [10] 4589 	ld	hl, #_animLeft_Sentinel
   1ADC 4D            [ 4] 4590 	ld	c, l
   1ADD 44            [ 4] 4591 	ld	b, h
   1ADE E1            [10] 4592 	pop	hl
   1ADF E5            [11] 4593 	push	hl
   1AE0 C5            [11] 4594 	push	bc
   1AE1 E5            [11] 4595 	push	hl
   1AE2 CDr3Er19      [17] 4596 	call	_AssignFrame
   1AE5 F1            [10] 4597 	pop	af
   1AE6 F1            [10] 4598 	pop	af
   1AE7 C3rF3r1B      [10] 4599 	jp	00151$
                           4600 ;src/main.c:1157: case D_right:			{AssignFrame(pSpr, animRight_Sentinel);}
   1AEA                    4601 00116$:
   1AEA 21r67r00      [10] 4602 	ld	hl, #_animRight_Sentinel
   1AED 4D            [ 4] 4603 	ld	c, l
   1AEE 44            [ 4] 4604 	ld	b, h
   1AEF E1            [10] 4605 	pop	hl
   1AF0 E5            [11] 4606 	push	hl
   1AF1 C5            [11] 4607 	push	bc
   1AF2 E5            [11] 4608 	push	hl
   1AF3 CDr3Er19      [17] 4609 	call	_AssignFrame
   1AF6 F1            [10] 4610 	pop	af
   1AF7 F1            [10] 4611 	pop	af
                           4612 ;src/main.c:1158: }
   1AF8 C3rF3r1B      [10] 4613 	jp	00151$
   1AFB                    4614 00143$:
                           4615 ;src/main.c:1161: else if(pSpr->ident == KNIGHT) {
   1AFB 79            [ 4] 4616 	ld	a, c
   1AFC D6 03         [ 7] 4617 	sub	a, #0x03
   1AFE 20 57         [12] 4618 	jr	NZ,00140$
                           4619 ;src/main.c:1162: switch(pSpr->dir) {
   1B00 1A            [ 7] 4620 	ld	a, (de)
   1B01 B7            [ 4] 4621 	or	a, a
   1B02 28 0F         [12] 4622 	jr	Z,00118$
   1B04 FE 01         [ 7] 4623 	cp	a, #0x01
   1B06 28 1C         [12] 4624 	jr	Z,00119$
   1B08 FE 02         [ 7] 4625 	cp	a, #0x02
   1B0A 28 29         [12] 4626 	jr	Z,00120$
   1B0C D6 03         [ 7] 4627 	sub	a, #0x03
   1B0E 28 36         [12] 4628 	jr	Z,00121$
   1B10 C3rF3r1B      [10] 4629 	jp	00151$
                           4630 ;src/main.c:1163: case D_up:				{AssignFrame(pSpr, animUp_Knight); break;}
   1B13                    4631 00118$:
   1B13 21r7Br00      [10] 4632 	ld	hl, #_animUp_Knight
   1B16 4D            [ 4] 4633 	ld	c, l
   1B17 44            [ 4] 4634 	ld	b, h
   1B18 E1            [10] 4635 	pop	hl
   1B19 E5            [11] 4636 	push	hl
   1B1A C5            [11] 4637 	push	bc
   1B1B E5            [11] 4638 	push	hl
   1B1C CDr3Er19      [17] 4639 	call	_AssignFrame
   1B1F F1            [10] 4640 	pop	af
   1B20 F1            [10] 4641 	pop	af
   1B21 C3rF3r1B      [10] 4642 	jp	00151$
                           4643 ;src/main.c:1164: case D_down:			{AssignFrame(pSpr, animDown_Knight); break;}
   1B24                    4644 00119$:
   1B24 21r7Fr00      [10] 4645 	ld	hl, #_animDown_Knight
   1B27 4D            [ 4] 4646 	ld	c, l
   1B28 44            [ 4] 4647 	ld	b, h
   1B29 E1            [10] 4648 	pop	hl
   1B2A E5            [11] 4649 	push	hl
   1B2B C5            [11] 4650 	push	bc
   1B2C E5            [11] 4651 	push	hl
   1B2D CDr3Er19      [17] 4652 	call	_AssignFrame
   1B30 F1            [10] 4653 	pop	af
   1B31 F1            [10] 4654 	pop	af
   1B32 C3rF3r1B      [10] 4655 	jp	00151$
                           4656 ;src/main.c:1165: case D_left:			{AssignFrame(pSpr, animLeft_Knight); break;}
   1B35                    4657 00120$:
   1B35 21r83r00      [10] 4658 	ld	hl, #_animLeft_Knight
   1B38 4D            [ 4] 4659 	ld	c, l
   1B39 44            [ 4] 4660 	ld	b, h
   1B3A E1            [10] 4661 	pop	hl
   1B3B E5            [11] 4662 	push	hl
   1B3C C5            [11] 4663 	push	bc
   1B3D E5            [11] 4664 	push	hl
   1B3E CDr3Er19      [17] 4665 	call	_AssignFrame
   1B41 F1            [10] 4666 	pop	af
   1B42 F1            [10] 4667 	pop	af
   1B43 C3rF3r1B      [10] 4668 	jp	00151$
                           4669 ;src/main.c:1166: case D_right:			{AssignFrame(pSpr, animRight_Knight);}
   1B46                    4670 00121$:
   1B46 21r87r00      [10] 4671 	ld	hl, #_animRight_Knight
   1B49 4D            [ 4] 4672 	ld	c, l
   1B4A 44            [ 4] 4673 	ld	b, h
   1B4B E1            [10] 4674 	pop	hl
   1B4C E5            [11] 4675 	push	hl
   1B4D C5            [11] 4676 	push	bc
   1B4E E5            [11] 4677 	push	hl
   1B4F CDr3Er19      [17] 4678 	call	_AssignFrame
   1B52 F1            [10] 4679 	pop	af
   1B53 F1            [10] 4680 	pop	af
                           4681 ;src/main.c:1167: }
   1B54 C3rF3r1B      [10] 4682 	jp	00151$
   1B57                    4683 00140$:
                           4684 ;src/main.c:1170: else if(pSpr->ident == GHOST) {
   1B57 79            [ 4] 4685 	ld	a, c
   1B58 D6 04         [ 7] 4686 	sub	a, #0x04
   1B5A 20 54         [12] 4687 	jr	NZ,00137$
                           4688 ;src/main.c:1171: switch(pSpr->dir) {
   1B5C 1A            [ 7] 4689 	ld	a, (de)
   1B5D B7            [ 4] 4690 	or	a, a
   1B5E 28 0F         [12] 4691 	jr	Z,00123$
   1B60 FE 01         [ 7] 4692 	cp	a, #0x01
   1B62 28 1C         [12] 4693 	jr	Z,00124$
   1B64 FE 02         [ 7] 4694 	cp	a, #0x02
   1B66 28 28         [12] 4695 	jr	Z,00125$
   1B68 D6 03         [ 7] 4696 	sub	a, #0x03
   1B6A 28 34         [12] 4697 	jr	Z,00126$
   1B6C C3rF3r1B      [10] 4698 	jp	00151$
                           4699 ;src/main.c:1172: case D_up:				{AssignFrame(pSpr, animUp_Ghost); break;}
   1B6F                    4700 00123$:
   1B6F 21r9Br00      [10] 4701 	ld	hl, #_animUp_Ghost
   1B72 4D            [ 4] 4702 	ld	c, l
   1B73 44            [ 4] 4703 	ld	b, h
   1B74 E1            [10] 4704 	pop	hl
   1B75 E5            [11] 4705 	push	hl
   1B76 C5            [11] 4706 	push	bc
   1B77 E5            [11] 4707 	push	hl
   1B78 CDr3Er19      [17] 4708 	call	_AssignFrame
   1B7B F1            [10] 4709 	pop	af
   1B7C F1            [10] 4710 	pop	af
   1B7D C3rF3r1B      [10] 4711 	jp	00151$
                           4712 ;src/main.c:1173: case D_down:			{AssignFrame(pSpr, animDown_Ghost); break;}
   1B80                    4713 00124$:
   1B80 21r9Fr00      [10] 4714 	ld	hl, #_animDown_Ghost
   1B83 4D            [ 4] 4715 	ld	c, l
   1B84 44            [ 4] 4716 	ld	b, h
   1B85 E1            [10] 4717 	pop	hl
   1B86 E5            [11] 4718 	push	hl
   1B87 C5            [11] 4719 	push	bc
   1B88 E5            [11] 4720 	push	hl
   1B89 CDr3Er19      [17] 4721 	call	_AssignFrame
   1B8C F1            [10] 4722 	pop	af
   1B8D F1            [10] 4723 	pop	af
   1B8E 18 63         [12] 4724 	jr	00151$
                           4725 ;src/main.c:1174: case D_left:			{AssignFrame(pSpr, animLeft_Ghost); break;}
   1B90                    4726 00125$:
   1B90 21rA3r00      [10] 4727 	ld	hl, #_animLeft_Ghost
   1B93 4D            [ 4] 4728 	ld	c, l
   1B94 44            [ 4] 4729 	ld	b, h
   1B95 E1            [10] 4730 	pop	hl
   1B96 E5            [11] 4731 	push	hl
   1B97 C5            [11] 4732 	push	bc
   1B98 E5            [11] 4733 	push	hl
   1B99 CDr3Er19      [17] 4734 	call	_AssignFrame
   1B9C F1            [10] 4735 	pop	af
   1B9D F1            [10] 4736 	pop	af
   1B9E 18 53         [12] 4737 	jr	00151$
                           4738 ;src/main.c:1175: case D_right:			{AssignFrame(pSpr, animRight_Ghost);}
   1BA0                    4739 00126$:
   1BA0 21rA7r00      [10] 4740 	ld	hl, #_animRight_Ghost
   1BA3 4D            [ 4] 4741 	ld	c, l
   1BA4 44            [ 4] 4742 	ld	b, h
   1BA5 E1            [10] 4743 	pop	hl
   1BA6 E5            [11] 4744 	push	hl
   1BA7 C5            [11] 4745 	push	bc
   1BA8 E5            [11] 4746 	push	hl
   1BA9 CDr3Er19      [17] 4747 	call	_AssignFrame
   1BAC F1            [10] 4748 	pop	af
   1BAD F1            [10] 4749 	pop	af
                           4750 ;src/main.c:1176: }
   1BAE 18 43         [12] 4751 	jr	00151$
   1BB0                    4752 00137$:
                           4753 ;src/main.c:1179: else if(pSpr->ident == WITCH) {
   1BB0 79            [ 4] 4754 	ld	a, c
   1BB1 D6 06         [ 7] 4755 	sub	a, #0x06
   1BB3 20 2B         [12] 4756 	jr	NZ,00134$
                           4757 ;src/main.c:1180: switch(pSpr->dir) {
   1BB5 1A            [ 7] 4758 	ld	a, (de)
   1BB6 FE 02         [ 7] 4759 	cp	a, #0x02
   1BB8 28 06         [12] 4760 	jr	Z,00128$
   1BBA D6 03         [ 7] 4761 	sub	a, #0x03
   1BBC 28 12         [12] 4762 	jr	Z,00129$
   1BBE 18 33         [12] 4763 	jr	00151$
                           4764 ;src/main.c:1181: case D_left:			{AssignFrame(pSpr, animLeft_Witch); break;}
   1BC0                    4765 00128$:
   1BC0 21rBBr00      [10] 4766 	ld	hl, #_animLeft_Witch
   1BC3 4D            [ 4] 4767 	ld	c, l
   1BC4 44            [ 4] 4768 	ld	b, h
   1BC5 E1            [10] 4769 	pop	hl
   1BC6 E5            [11] 4770 	push	hl
   1BC7 C5            [11] 4771 	push	bc
   1BC8 E5            [11] 4772 	push	hl
   1BC9 CDr3Er19      [17] 4773 	call	_AssignFrame
   1BCC F1            [10] 4774 	pop	af
   1BCD F1            [10] 4775 	pop	af
   1BCE 18 23         [12] 4776 	jr	00151$
                           4777 ;src/main.c:1182: case D_right:			{AssignFrame(pSpr, animRight_Witch);}
   1BD0                    4778 00129$:
   1BD0 21rBFr00      [10] 4779 	ld	hl, #_animRight_Witch
   1BD3 4D            [ 4] 4780 	ld	c, l
   1BD4 44            [ 4] 4781 	ld	b, h
   1BD5 E1            [10] 4782 	pop	hl
   1BD6 E5            [11] 4783 	push	hl
   1BD7 C5            [11] 4784 	push	bc
   1BD8 E5            [11] 4785 	push	hl
   1BD9 CDr3Er19      [17] 4786 	call	_AssignFrame
   1BDC F1            [10] 4787 	pop	af
   1BDD F1            [10] 4788 	pop	af
                           4789 ;src/main.c:1183: }
   1BDE 18 13         [12] 4790 	jr	00151$
   1BE0                    4791 00134$:
                           4792 ;src/main.c:1186: else if(pSpr->ident == BAT)	AssignFrame(pSpr, anim_Bat);
   1BE0 79            [ 4] 4793 	ld	a, c
   1BE1 D6 05         [ 7] 4794 	sub	a, #0x05
   1BE3 20 0E         [12] 4795 	jr	NZ,00151$
   1BE5 21rAFr00      [10] 4796 	ld	hl, #_anim_Bat
   1BE8 4D            [ 4] 4797 	ld	c, l
   1BE9 44            [ 4] 4798 	ld	b, h
   1BEA E1            [10] 4799 	pop	hl
   1BEB E5            [11] 4800 	push	hl
   1BEC C5            [11] 4801 	push	bc
   1BED E5            [11] 4802 	push	hl
   1BEE CDr3Er19      [17] 4803 	call	_AssignFrame
   1BF1 F1            [10] 4804 	pop	af
   1BF2 F1            [10] 4805 	pop	af
   1BF3                    4806 00151$:
   1BF3 DD F9         [10] 4807 	ld	sp, ix
   1BF5 DD E1         [14] 4808 	pop	ix
   1BF7 C9            [10] 4809 	ret
                           4810 ;src/main.c:1191: void PrintExplosion(TSpr *pSpr, u8 nFrame)
                           4811 ;	---------------------------------
                           4812 ; Function PrintExplosion
                           4813 ; ---------------------------------
   1BF8                    4814 _PrintExplosion::
   1BF8 DD E5         [15] 4815 	push	ix
   1BFA DD 21 00 00   [14] 4816 	ld	ix,#0
   1BFE DD 39         [15] 4817 	add	ix,sp
                           4818 ;src/main.c:1195: SPR_W, SPR_H, g_maskTable);
                           4819 ;src/main.c:1194: cpct_getScreenPtr(CPCT_VMEM_START, pSpr->x, pSpr->y), 
   1C00 DD 4E 04      [19] 4820 	ld	c,4 (ix)
   1C03 DD 46 05      [19] 4821 	ld	b,5 (ix)
   1C06 69            [ 4] 4822 	ld	l, c
   1C07 60            [ 4] 4823 	ld	h, b
   1C08 23            [ 6] 4824 	inc	hl
   1C09 23            [ 6] 4825 	inc	hl
   1C0A 23            [ 6] 4826 	inc	hl
   1C0B 56            [ 7] 4827 	ld	d, (hl)
   1C0C 69            [ 4] 4828 	ld	l, c
   1C0D 60            [ 4] 4829 	ld	h, b
   1C0E 23            [ 6] 4830 	inc	hl
   1C0F 23            [ 6] 4831 	inc	hl
   1C10 5E            [ 7] 4832 	ld	e, (hl)
   1C11 D5            [11] 4833 	push	de
   1C12 21 00 C0      [10] 4834 	ld	hl, #0xc000
   1C15 E5            [11] 4835 	push	hl
   1C16 CDr00r00      [17] 4836 	call	_cpct_getScreenPtr
   1C19 4D            [ 4] 4837 	ld	c, l
   1C1A 44            [ 4] 4838 	ld	b, h
                           4839 ;src/main.c:1193: cpct_drawSpriteMaskedAlignedTable(g_explosion[nFrame], 
   1C1B DD 5E 06      [19] 4840 	ld	e,6 (ix)
   1C1E 16 00         [ 7] 4841 	ld	d,#0x00
   1C20 6B            [ 4] 4842 	ld	l, e
   1C21 62            [ 4] 4843 	ld	h, d
   1C22 29            [11] 4844 	add	hl, hl
   1C23 19            [11] 4845 	add	hl, de
   1C24 29            [11] 4846 	add	hl, hl
   1C25 19            [11] 4847 	add	hl, de
   1C26 29            [11] 4848 	add	hl, hl
   1C27 19            [11] 4849 	add	hl, de
   1C28 29            [11] 4850 	add	hl, hl
   1C29 29            [11] 4851 	add	hl, hl
   1C2A 11r00r00      [10] 4852 	ld	de, #_g_explosion
   1C2D 19            [11] 4853 	add	hl, de
   1C2E 11r00r01      [10] 4854 	ld	de, #_g_maskTable
   1C31 D5            [11] 4855 	push	de
   1C32 11 05 0C      [10] 4856 	ld	de, #0x0c05
   1C35 D5            [11] 4857 	push	de
   1C36 C5            [11] 4858 	push	bc
   1C37 E5            [11] 4859 	push	hl
   1C38 CDr00r00      [17] 4860 	call	_cpct_drawSpriteMaskedAlignedTable
   1C3B DD E1         [14] 4861 	pop	ix
   1C3D C9            [10] 4862 	ret
                           4863 ;src/main.c:1200: void ExplodeSprite(u8 player, u8 deleteSpr)
                           4864 ;	---------------------------------
                           4865 ; Function ExplodeSprite
                           4866 ; ---------------------------------
   1C3E                    4867 _ExplodeSprite::
   1C3E DD E5         [15] 4868 	push	ix
   1C40 DD 21 00 00   [14] 4869 	ld	ix,#0
   1C44 DD 39         [15] 4870 	add	ix,sp
   1C46 21 F9 FF      [10] 4871 	ld	hl, #-7
   1C49 39            [11] 4872 	add	hl, sp
   1C4A F9            [ 6] 4873 	ld	sp, hl
                           4874 ;src/main.c:1204: while (ct++ < 2) {	
   1C4B 11r39r00      [10] 4875 	ld	de, #_spr+0
   1C4E DD 4E 04      [19] 4876 	ld	c,4 (ix)
   1C51 06 00         [ 7] 4877 	ld	b,#0x00
   1C53 69            [ 4] 4878 	ld	l, c
   1C54 60            [ 4] 4879 	ld	h, b
   1C55 29            [11] 4880 	add	hl, hl
   1C56 09            [11] 4881 	add	hl, bc
   1C57 29            [11] 4882 	add	hl, hl
   1C58 09            [11] 4883 	add	hl, bc
   1C59 29            [11] 4884 	add	hl, hl
   1C5A 09            [11] 4885 	add	hl, bc
   1C5B 19            [11] 4886 	add	hl,de
   1C5C 4D            [ 4] 4887 	ld	c, l
   1C5D 44            [ 4] 4888 	ld	b, h
   1C5E DD 71 FE      [19] 4889 	ld	-2 (ix), c
   1C61 DD 70 FF      [19] 4890 	ld	-1 (ix), b
   1C64 DD 71 FC      [19] 4891 	ld	-4 (ix), c
   1C67 DD 70 FD      [19] 4892 	ld	-3 (ix), b
   1C6A D5            [11] 4893 	push	de
   1C6B DD 5E 05      [19] 4894 	ld	e,5 (ix)
   1C6E 16 00         [ 7] 4895 	ld	d,#0x00
   1C70 6B            [ 4] 4896 	ld	l, e
   1C71 62            [ 4] 4897 	ld	h, d
   1C72 29            [11] 4898 	add	hl, hl
   1C73 19            [11] 4899 	add	hl, de
   1C74 29            [11] 4900 	add	hl, hl
   1C75 19            [11] 4901 	add	hl, de
   1C76 29            [11] 4902 	add	hl, hl
   1C77 19            [11] 4903 	add	hl, de
   1C78 D1            [10] 4904 	pop	de
   1C79 19            [11] 4905 	add	hl,de
   1C7A DD 75 FA      [19] 4906 	ld	-6 (ix), l
   1C7D DD 74 FB      [19] 4907 	ld	-5 (ix), h
   1C80 DD 36 F9 00   [19] 4908 	ld	-7 (ix), #0x00
   1C84                    4909 00103$:
   1C84 DD 7E F9      [19] 4910 	ld	a, -7 (ix)
   1C87 DD 34 F9      [23] 4911 	inc	-7 (ix)
   1C8A D6 02         [ 7] 4912 	sub	a, #0x02
   1C8C 30 49         [12] 4913 	jr	NC,00105$
                           4914 ;src/main.c:1205: PrintExplosion(&spr[player], 0); Pause(40);
   1C8E 59            [ 4] 4915 	ld	e, c
   1C8F 50            [ 4] 4916 	ld	d, b
   1C90 C5            [11] 4917 	push	bc
   1C91 AF            [ 4] 4918 	xor	a, a
   1C92 F5            [11] 4919 	push	af
   1C93 33            [ 6] 4920 	inc	sp
   1C94 D5            [11] 4921 	push	de
   1C95 CDrF8r1B      [17] 4922 	call	_PrintExplosion
   1C98 F1            [10] 4923 	pop	af
   1C99 33            [ 6] 4924 	inc	sp
   1C9A 21 28 00      [10] 4925 	ld	hl, #0x0028
   1C9D CDrFEr01      [17] 4926 	call	_Pause
   1CA0 C1            [10] 4927 	pop	bc
                           4928 ;src/main.c:1206: PrintExplosion(&spr[player], 1); Pause(40);
   1CA1 DD 5E FE      [19] 4929 	ld	e,-2 (ix)
   1CA4 DD 56 FF      [19] 4930 	ld	d,-1 (ix)
   1CA7 C5            [11] 4931 	push	bc
   1CA8 3E 01         [ 7] 4932 	ld	a, #0x01
   1CAA F5            [11] 4933 	push	af
   1CAB 33            [ 6] 4934 	inc	sp
   1CAC D5            [11] 4935 	push	de
   1CAD CDrF8r1B      [17] 4936 	call	_PrintExplosion
   1CB0 F1            [10] 4937 	pop	af
   1CB1 33            [ 6] 4938 	inc	sp
   1CB2 21 28 00      [10] 4939 	ld	hl, #0x0028
   1CB5 CDrFEr01      [17] 4940 	call	_Pause
   1CB8 C1            [10] 4941 	pop	bc
                           4942 ;src/main.c:1207: if (deleteSpr > FALSE) {
   1CB9 DD 7E 05      [19] 4943 	ld	a, 5 (ix)
   1CBC B7            [ 4] 4944 	or	a, a
   1CBD 28 C5         [12] 4945 	jr	Z,00103$
                           4946 ;src/main.c:1208: DeleteSprite(&spr[player]); // delete player
   1CBF DD 6E FC      [19] 4947 	ld	l,-4 (ix)
   1CC2 DD 66 FD      [19] 4948 	ld	h,-3 (ix)
   1CC5 C5            [11] 4949 	push	bc
   1CC6 CDrCDr18      [17] 4950 	call	_DeleteSprite
   1CC9 C1            [10] 4951 	pop	bc
                           4952 ;src/main.c:1209: PrintSprite(&spr[deleteSpr]); // reprint enemy, which may have been partially erased
   1CCA DD 6E FA      [19] 4953 	ld	l,-6 (ix)
   1CCD DD 66 FB      [19] 4954 	ld	h,-5 (ix)
   1CD0 C5            [11] 4955 	push	bc
   1CD1 CDr9Er18      [17] 4956 	call	_PrintSprite
   1CD4 C1            [10] 4957 	pop	bc
   1CD5 18 AD         [12] 4958 	jr	00103$
   1CD7                    4959 00105$:
                           4960 ;src/main.c:1212: PrintExplosion(&spr[player], 0); Pause(40);
   1CD7 59            [ 4] 4961 	ld	e, c
   1CD8 50            [ 4] 4962 	ld	d, b
   1CD9 C5            [11] 4963 	push	bc
   1CDA AF            [ 4] 4964 	xor	a, a
   1CDB F5            [11] 4965 	push	af
   1CDC 33            [ 6] 4966 	inc	sp
   1CDD D5            [11] 4967 	push	de
   1CDE CDrF8r1B      [17] 4968 	call	_PrintExplosion
   1CE1 F1            [10] 4969 	pop	af
   1CE2 33            [ 6] 4970 	inc	sp
   1CE3 21 28 00      [10] 4971 	ld	hl, #0x0028
   1CE6 CDrFEr01      [17] 4972 	call	_Pause
   1CE9 C1            [10] 4973 	pop	bc
                           4974 ;src/main.c:1213: if (deleteSpr > FALSE) {
   1CEA DD 7E 05      [19] 4975 	ld	a, 5 (ix)
   1CED B7            [ 4] 4976 	or	a, a
   1CEE 28 0E         [12] 4977 	jr	Z,00108$
                           4978 ;src/main.c:1214: DeleteSprite(&spr[player]);
   1CF0 69            [ 4] 4979 	ld	l, c
   1CF1 60            [ 4] 4980 	ld	h, b
   1CF2 CDrCDr18      [17] 4981 	call	_DeleteSprite
                           4982 ;src/main.c:1215: PrintSprite(&spr[deleteSpr]);
   1CF5 DD 6E FA      [19] 4983 	ld	l,-6 (ix)
   1CF8 DD 66 FB      [19] 4984 	ld	h,-5 (ix)
   1CFB CDr9Er18      [17] 4985 	call	_PrintSprite
   1CFE                    4986 00108$:
   1CFE DD F9         [10] 4987 	ld	sp, ix
   1D00 DD E1         [14] 4988 	pop	ix
   1D02 C9            [10] 4989 	ret
                           4990 ;src/main.c:1221: u8 SpriteCollision(u8 x, u8 y, TSpr *pSpr, u8 marginX) {
                           4991 ;	---------------------------------
                           4992 ; Function SpriteCollision
                           4993 ; ---------------------------------
   1D03                    4994 _SpriteCollision::
   1D03 DD E5         [15] 4995 	push	ix
   1D05 DD 21 00 00   [14] 4996 	ld	ix,#0
   1D09 DD 39         [15] 4997 	add	ix,sp
   1D0B 21 F9 FF      [10] 4998 	ld	hl, #-7
   1D0E 39            [11] 4999 	add	hl, sp
   1D0F F9            [ 6] 5000 	ld	sp, hl
                           5001 ;src/main.c:1222: u8 marginY = marginX+marginX;	
   1D10 DD 7E 08      [19] 5002 	ld	a, 8 (ix)
   1D13 87            [ 4] 5003 	add	a, a
   1D14 DD 77 F9      [19] 5004 	ld	-7 (ix), a
                           5005 ;src/main.c:1223: if (x+OBJ_W > pSpr->x-marginX && x-marginX < pSpr->x+SPR_W) // check the X coordinate with the sprite		
   1D17 DD 4E 04      [19] 5006 	ld	c, 4 (ix)
   1D1A 06 00         [ 7] 5007 	ld	b, #0x00
   1D1C 21 04 00      [10] 5008 	ld	hl, #0x0004
   1D1F 09            [11] 5009 	add	hl,bc
   1D20 DD 75 FA      [19] 5010 	ld	-6 (ix), l
   1D23 DD 74 FB      [19] 5011 	ld	-5 (ix), h
   1D26 DD 5E 06      [19] 5012 	ld	e,6 (ix)
   1D29 DD 56 07      [19] 5013 	ld	d,7 (ix)
   1D2C 6B            [ 4] 5014 	ld	l, e
   1D2D 62            [ 4] 5015 	ld	h, d
   1D2E 23            [ 6] 5016 	inc	hl
   1D2F 23            [ 6] 5017 	inc	hl
   1D30 6E            [ 7] 5018 	ld	l, (hl)
   1D31 26 00         [ 7] 5019 	ld	h, #0x00
   1D33 DD 7E 08      [19] 5020 	ld	a, 8 (ix)
   1D36 DD 77 FC      [19] 5021 	ld	-4 (ix), a
   1D39 DD 36 FD 00   [19] 5022 	ld	-3 (ix), #0x00
   1D3D 7D            [ 4] 5023 	ld	a, l
   1D3E DD 96 FC      [19] 5024 	sub	a, -4 (ix)
   1D41 DD 77 FE      [19] 5025 	ld	-2 (ix), a
   1D44 7C            [ 4] 5026 	ld	a, h
   1D45 DD 9E FD      [19] 5027 	sbc	a, -3 (ix)
   1D48 DD 77 FF      [19] 5028 	ld	-1 (ix), a
   1D4B DD 7E FE      [19] 5029 	ld	a, -2 (ix)
   1D4E DD 96 FA      [19] 5030 	sub	a, -6 (ix)
   1D51 DD 7E FF      [19] 5031 	ld	a, -1 (ix)
   1D54 DD 9E FB      [19] 5032 	sbc	a, -5 (ix)
   1D57 E2r5Cr1D      [10] 5033 	jp	PO, 00125$
   1D5A EE 80         [ 7] 5034 	xor	a, #0x80
   1D5C                    5035 00125$:
   1D5C F2rCDr1D      [10] 5036 	jp	P, 00105$
   1D5F 79            [ 4] 5037 	ld	a, c
   1D60 DD 96 FC      [19] 5038 	sub	a, -4 (ix)
   1D63 4F            [ 4] 5039 	ld	c, a
   1D64 78            [ 4] 5040 	ld	a, b
   1D65 DD 9E FD      [19] 5041 	sbc	a, -3 (ix)
   1D68 47            [ 4] 5042 	ld	b, a
   1D69 23            [ 6] 5043 	inc	hl
   1D6A 23            [ 6] 5044 	inc	hl
   1D6B 23            [ 6] 5045 	inc	hl
   1D6C 23            [ 6] 5046 	inc	hl
   1D6D 23            [ 6] 5047 	inc	hl
   1D6E 79            [ 4] 5048 	ld	a, c
   1D6F 95            [ 4] 5049 	sub	a, l
   1D70 78            [ 4] 5050 	ld	a, b
   1D71 9C            [ 4] 5051 	sbc	a, h
   1D72 E2r77r1D      [10] 5052 	jp	PO, 00126$
   1D75 EE 80         [ 7] 5053 	xor	a, #0x80
   1D77                    5054 00126$:
   1D77 F2rCDr1D      [10] 5055 	jp	P, 00105$
                           5056 ;src/main.c:1224: if (y+OBJ_H > pSpr->y-marginY && y-marginY < pSpr->y+SPR_H) // check the Y coordinate with the sprite
   1D7A DD 4E 05      [19] 5057 	ld	c, 5 (ix)
   1D7D 06 00         [ 7] 5058 	ld	b, #0x00
   1D7F 21 08 00      [10] 5059 	ld	hl, #0x0008
   1D82 09            [11] 5060 	add	hl,bc
   1D83 DD 75 FE      [19] 5061 	ld	-2 (ix), l
   1D86 DD 74 FF      [19] 5062 	ld	-1 (ix), h
   1D89 EB            [ 4] 5063 	ex	de,hl
   1D8A 23            [ 6] 5064 	inc	hl
   1D8B 23            [ 6] 5065 	inc	hl
   1D8C 23            [ 6] 5066 	inc	hl
   1D8D 5E            [ 7] 5067 	ld	e, (hl)
   1D8E 16 00         [ 7] 5068 	ld	d, #0x00
   1D90 DD 6E F9      [19] 5069 	ld	l, -7 (ix)
   1D93 26 00         [ 7] 5070 	ld	h, #0x00
   1D95 7B            [ 4] 5071 	ld	a, e
   1D96 95            [ 4] 5072 	sub	a, l
   1D97 DD 77 FC      [19] 5073 	ld	-4 (ix), a
   1D9A 7A            [ 4] 5074 	ld	a, d
   1D9B 9C            [ 4] 5075 	sbc	a, h
   1D9C DD 77 FD      [19] 5076 	ld	-3 (ix), a
   1D9F DD 7E FC      [19] 5077 	ld	a, -4 (ix)
   1DA2 DD 96 FE      [19] 5078 	sub	a, -2 (ix)
   1DA5 DD 7E FD      [19] 5079 	ld	a, -3 (ix)
   1DA8 DD 9E FF      [19] 5080 	sbc	a, -1 (ix)
   1DAB E2rB0r1D      [10] 5081 	jp	PO, 00127$
   1DAE EE 80         [ 7] 5082 	xor	a, #0x80
   1DB0                    5083 00127$:
   1DB0 F2rCDr1D      [10] 5084 	jp	P, 00105$
   1DB3 79            [ 4] 5085 	ld	a, c
   1DB4 95            [ 4] 5086 	sub	a, l
   1DB5 4F            [ 4] 5087 	ld	c, a
   1DB6 78            [ 4] 5088 	ld	a, b
   1DB7 9C            [ 4] 5089 	sbc	a, h
   1DB8 47            [ 4] 5090 	ld	b, a
   1DB9 21 0C 00      [10] 5091 	ld	hl, #0x000c
   1DBC 19            [11] 5092 	add	hl, de
   1DBD 79            [ 4] 5093 	ld	a, c
   1DBE 95            [ 4] 5094 	sub	a, l
   1DBF 78            [ 4] 5095 	ld	a, b
   1DC0 9C            [ 4] 5096 	sbc	a, h
   1DC1 E2rC6r1D      [10] 5097 	jp	PO, 00128$
   1DC4 EE 80         [ 7] 5098 	xor	a, #0x80
   1DC6                    5099 00128$:
   1DC6 F2rCDr1D      [10] 5100 	jp	P, 00105$
                           5101 ;src/main.c:1225: return TRUE;	
   1DC9 2E 01         [ 7] 5102 	ld	l, #0x01
   1DCB 18 02         [12] 5103 	jr	00107$
   1DCD                    5104 00105$:
                           5105 ;src/main.c:1226: return FALSE;
   1DCD 2E 00         [ 7] 5106 	ld	l, #0x00
   1DCF                    5107 00107$:
   1DCF DD F9         [10] 5108 	ld	sp, ix
   1DD1 DD E1         [14] 5109 	pop	ix
   1DD3 C9            [10] 5110 	ret
                           5111 ;src/main.c:1242: void MoveUp(TSpr *pSpr) __z88dk_fastcall { 
                           5112 ;	---------------------------------
                           5113 ; Function MoveUp
                           5114 ; ---------------------------------
   1DD4                    5115 _MoveUp::
   1DD4 DD E5         [15] 5116 	push	ix
   1DD6 DD 21 00 00   [14] 5117 	ld	ix,#0
   1DDA DD 39         [15] 5118 	add	ix,sp
   1DDC F5            [11] 5119 	push	af
   1DDD F5            [11] 5120 	push	af
                           5121 ;src/main.c:1244: if (pSpr->y > ORIG_MAP_Y && OnBackground(pSpr->x-1, pSpr->y-2)) {
   1DDE DD 75 FE      [19] 5122 	ld	-2 (ix), l
   1DE1 DD 74 FF      [19] 5123 	ld	-1 (ix), h
   1DE4 23            [ 6] 5124 	inc	hl
   1DE5 23            [ 6] 5125 	inc	hl
   1DE6 23            [ 6] 5126 	inc	hl
   1DE7 4D            [ 4] 5127 	ld	c,l
   1DE8 44            [ 4] 5128 	ld	b,h
   1DE9 0A            [ 7] 5129 	ld	a, (bc)
   1DEA 5F            [ 4] 5130 	ld	e, a
   1DEB 3E 20         [ 7] 5131 	ld	a, #0x20
   1DED 93            [ 4] 5132 	sub	a, e
   1DEE 30 6C         [12] 5133 	jr	NC,00107$
   1DF0 1D            [ 4] 5134 	dec	e
   1DF1 1D            [ 4] 5135 	dec	e
   1DF2 DD 7E FE      [19] 5136 	ld	a, -2 (ix)
   1DF5 C6 02         [ 7] 5137 	add	a, #0x02
   1DF7 DD 77 FC      [19] 5138 	ld	-4 (ix), a
   1DFA DD 7E FF      [19] 5139 	ld	a, -1 (ix)
   1DFD CE 00         [ 7] 5140 	adc	a, #0x00
   1DFF DD 77 FD      [19] 5141 	ld	-3 (ix), a
   1E02 E1            [10] 5142 	pop	hl
   1E03 E5            [11] 5143 	push	hl
   1E04 56            [ 7] 5144 	ld	d, (hl)
   1E05 15            [ 4] 5145 	dec	d
   1E06 C5            [11] 5146 	push	bc
   1E07 7B            [ 4] 5147 	ld	a, e
   1E08 F5            [11] 5148 	push	af
   1E09 33            [ 6] 5149 	inc	sp
   1E0A D5            [11] 5150 	push	de
   1E0B 33            [ 6] 5151 	inc	sp
   1E0C CDr74r02      [17] 5152 	call	_OnBackground
   1E0F F1            [10] 5153 	pop	af
   1E10 C1            [10] 5154 	pop	bc
   1E11 7D            [ 4] 5155 	ld	a, l
   1E12 B7            [ 4] 5156 	or	a, a
   1E13 28 47         [12] 5157 	jr	Z,00107$
                           5158 ;src/main.c:1245: pSpr->y -= 2;
   1E15 0A            [ 7] 5159 	ld	a, (bc)
   1E16 C6 FE         [ 7] 5160 	add	a, #0xfe
   1E18 02            [ 7] 5161 	ld	(bc), a
                           5162 ;src/main.c:1246: if (pSpr->power_maxV > 0 && OnBackground(pSpr->x-1, pSpr->y-2))
   1E19 D1            [10] 5163 	pop	de
   1E1A E1            [10] 5164 	pop	hl
   1E1B E5            [11] 5165 	push	hl
   1E1C D5            [11] 5166 	push	de
   1E1D 11 0E 00      [10] 5167 	ld	de, #0x000e
   1E20 19            [11] 5168 	add	hl, de
   1E21 7E            [ 7] 5169 	ld	a, (hl)
   1E22 B7            [ 4] 5170 	or	a, a
   1E23 28 1B         [12] 5171 	jr	Z,00102$
   1E25 0A            [ 7] 5172 	ld	a, (bc)
   1E26 5F            [ 4] 5173 	ld	e, a
   1E27 1D            [ 4] 5174 	dec	e
   1E28 1D            [ 4] 5175 	dec	e
   1E29 E1            [10] 5176 	pop	hl
   1E2A E5            [11] 5177 	push	hl
   1E2B 56            [ 7] 5178 	ld	d, (hl)
   1E2C 15            [ 4] 5179 	dec	d
   1E2D C5            [11] 5180 	push	bc
   1E2E 7B            [ 4] 5181 	ld	a, e
   1E2F F5            [11] 5182 	push	af
   1E30 33            [ 6] 5183 	inc	sp
   1E31 D5            [11] 5184 	push	de
   1E32 33            [ 6] 5185 	inc	sp
   1E33 CDr74r02      [17] 5186 	call	_OnBackground
   1E36 F1            [10] 5187 	pop	af
   1E37 C1            [10] 5188 	pop	bc
   1E38 7D            [ 4] 5189 	ld	a, l
   1E39 B7            [ 4] 5190 	or	a, a
   1E3A 28 04         [12] 5191 	jr	Z,00102$
                           5192 ;src/main.c:1247: pSpr->y -= 2; // powerUp speed*2
   1E3C 0A            [ 7] 5193 	ld	a, (bc)
   1E3D C6 FE         [ 7] 5194 	add	a, #0xfe
   1E3F 02            [ 7] 5195 	ld	(bc), a
   1E40                    5196 00102$:
                           5197 ;src/main.c:1249: pSpr->dir = D_up;
   1E40 DD 7E FE      [19] 5198 	ld	a, -2 (ix)
   1E43 C6 07         [ 7] 5199 	add	a, #0x07
   1E45 4F            [ 4] 5200 	ld	c, a
   1E46 DD 7E FF      [19] 5201 	ld	a, -1 (ix)
   1E49 CE 00         [ 7] 5202 	adc	a, #0x00
   1E4B 47            [ 4] 5203 	ld	b, a
   1E4C AF            [ 4] 5204 	xor	a, a
   1E4D 02            [ 7] 5205 	ld	(bc), a
                           5206 ;src/main.c:1250: pSpr->status = S_walkingUp;
   1E4E DD 7E FE      [19] 5207 	ld	a, -2 (ix)
   1E51 C6 06         [ 7] 5208 	add	a, #0x06
   1E53 4F            [ 4] 5209 	ld	c, a
   1E54 DD 7E FF      [19] 5210 	ld	a, -1 (ix)
   1E57 CE 00         [ 7] 5211 	adc	a, #0x00
   1E59 47            [ 4] 5212 	ld	b, a
   1E5A AF            [ 4] 5213 	xor	a, a
   1E5B 02            [ 7] 5214 	ld	(bc), a
   1E5C                    5215 00107$:
   1E5C DD F9         [10] 5216 	ld	sp, ix
   1E5E DD E1         [14] 5217 	pop	ix
   1E60 C9            [10] 5218 	ret
                           5219 ;src/main.c:1255: void MoveDown(TSpr *pSpr) __z88dk_fastcall {
                           5220 ;	---------------------------------
                           5221 ; Function MoveDown
                           5222 ; ---------------------------------
   1E61                    5223 _MoveDown::
   1E61 DD E5         [15] 5224 	push	ix
   1E63 DD 21 00 00   [14] 5225 	ld	ix,#0
   1E67 DD 39         [15] 5226 	add	ix,sp
   1E69 F5            [11] 5227 	push	af
   1E6A F5            [11] 5228 	push	af
                           5229 ;src/main.c:1257: if (pSpr->y + SPR_H < GLOBAL_MAX_Y && OnBackground(pSpr->x-1, pSpr->y+4)) {
   1E6B DD 75 FE      [19] 5230 	ld	-2 (ix), l
   1E6E DD 74 FF      [19] 5231 	ld	-1 (ix), h
   1E71 23            [ 6] 5232 	inc	hl
   1E72 23            [ 6] 5233 	inc	hl
   1E73 23            [ 6] 5234 	inc	hl
   1E74 4D            [ 4] 5235 	ld	c,l
   1E75 44            [ 4] 5236 	ld	b,h
   1E76 0A            [ 7] 5237 	ld	a, (bc)
   1E77 5F            [ 4] 5238 	ld	e, a
   1E78 6B            [ 4] 5239 	ld	l, e
   1E79 26 00         [ 7] 5240 	ld	h, #0x00
   1E7B D5            [11] 5241 	push	de
   1E7C 11 0C 00      [10] 5242 	ld	de, #0x000c
   1E7F 19            [11] 5243 	add	hl, de
   1E80 D1            [10] 5244 	pop	de
   1E81 7D            [ 4] 5245 	ld	a, l
   1E82 D6 C8         [ 7] 5246 	sub	a, #0xc8
   1E84 7C            [ 4] 5247 	ld	a, h
   1E85 17            [ 4] 5248 	rla
   1E86 3F            [ 4] 5249 	ccf
   1E87 1F            [ 4] 5250 	rra
   1E88 DE 80         [ 7] 5251 	sbc	a, #0x80
   1E8A 30 70         [12] 5252 	jr	NC,00107$
   1E8C 1C            [ 4] 5253 	inc	e
   1E8D 1C            [ 4] 5254 	inc	e
   1E8E 1C            [ 4] 5255 	inc	e
   1E8F 1C            [ 4] 5256 	inc	e
   1E90 DD 7E FE      [19] 5257 	ld	a, -2 (ix)
   1E93 C6 02         [ 7] 5258 	add	a, #0x02
   1E95 DD 77 FC      [19] 5259 	ld	-4 (ix), a
   1E98 DD 7E FF      [19] 5260 	ld	a, -1 (ix)
   1E9B CE 00         [ 7] 5261 	adc	a, #0x00
   1E9D DD 77 FD      [19] 5262 	ld	-3 (ix), a
   1EA0 E1            [10] 5263 	pop	hl
   1EA1 E5            [11] 5264 	push	hl
   1EA2 56            [ 7] 5265 	ld	d, (hl)
   1EA3 15            [ 4] 5266 	dec	d
   1EA4 C5            [11] 5267 	push	bc
   1EA5 7B            [ 4] 5268 	ld	a, e
   1EA6 F5            [11] 5269 	push	af
   1EA7 33            [ 6] 5270 	inc	sp
   1EA8 D5            [11] 5271 	push	de
   1EA9 33            [ 6] 5272 	inc	sp
   1EAA CDr74r02      [17] 5273 	call	_OnBackground
   1EAD F1            [10] 5274 	pop	af
   1EAE C1            [10] 5275 	pop	bc
   1EAF 7D            [ 4] 5276 	ld	a, l
   1EB0 B7            [ 4] 5277 	or	a, a
   1EB1 28 49         [12] 5278 	jr	Z,00107$
                           5279 ;src/main.c:1258: pSpr->y += 2;
   1EB3 0A            [ 7] 5280 	ld	a, (bc)
   1EB4 C6 02         [ 7] 5281 	add	a, #0x02
   1EB6 02            [ 7] 5282 	ld	(bc), a
                           5283 ;src/main.c:1259: if (pSpr->power_maxV > 0 && OnBackground(pSpr->x-1, pSpr->y+4))
   1EB7 D1            [10] 5284 	pop	de
   1EB8 E1            [10] 5285 	pop	hl
   1EB9 E5            [11] 5286 	push	hl
   1EBA D5            [11] 5287 	push	de
   1EBB 11 0E 00      [10] 5288 	ld	de, #0x000e
   1EBE 19            [11] 5289 	add	hl, de
   1EBF 7E            [ 7] 5290 	ld	a, (hl)
   1EC0 B7            [ 4] 5291 	or	a, a
   1EC1 28 1D         [12] 5292 	jr	Z,00102$
   1EC3 0A            [ 7] 5293 	ld	a, (bc)
   1EC4 5F            [ 4] 5294 	ld	e, a
   1EC5 1C            [ 4] 5295 	inc	e
   1EC6 1C            [ 4] 5296 	inc	e
   1EC7 1C            [ 4] 5297 	inc	e
   1EC8 1C            [ 4] 5298 	inc	e
   1EC9 E1            [10] 5299 	pop	hl
   1ECA E5            [11] 5300 	push	hl
   1ECB 56            [ 7] 5301 	ld	d, (hl)
   1ECC 15            [ 4] 5302 	dec	d
   1ECD C5            [11] 5303 	push	bc
   1ECE 7B            [ 4] 5304 	ld	a, e
   1ECF F5            [11] 5305 	push	af
   1ED0 33            [ 6] 5306 	inc	sp
   1ED1 D5            [11] 5307 	push	de
   1ED2 33            [ 6] 5308 	inc	sp
   1ED3 CDr74r02      [17] 5309 	call	_OnBackground
   1ED6 F1            [10] 5310 	pop	af
   1ED7 C1            [10] 5311 	pop	bc
   1ED8 7D            [ 4] 5312 	ld	a, l
   1ED9 B7            [ 4] 5313 	or	a, a
   1EDA 28 04         [12] 5314 	jr	Z,00102$
                           5315 ;src/main.c:1260: pSpr->y += 2; // powerUp speed*2
   1EDC 0A            [ 7] 5316 	ld	a, (bc)
   1EDD C6 02         [ 7] 5317 	add	a, #0x02
   1EDF 02            [ 7] 5318 	ld	(bc), a
   1EE0                    5319 00102$:
                           5320 ;src/main.c:1262: pSpr->dir = D_down;
   1EE0 DD 7E FE      [19] 5321 	ld	a, -2 (ix)
   1EE3 C6 07         [ 7] 5322 	add	a, #0x07
   1EE5 6F            [ 4] 5323 	ld	l, a
   1EE6 DD 7E FF      [19] 5324 	ld	a, -1 (ix)
   1EE9 CE 00         [ 7] 5325 	adc	a, #0x00
   1EEB 67            [ 4] 5326 	ld	h, a
   1EEC 36 01         [10] 5327 	ld	(hl), #0x01
                           5328 ;src/main.c:1263: pSpr->status = S_walkingDown;
   1EEE DD 7E FE      [19] 5329 	ld	a, -2 (ix)
   1EF1 C6 06         [ 7] 5330 	add	a, #0x06
   1EF3 6F            [ 4] 5331 	ld	l, a
   1EF4 DD 7E FF      [19] 5332 	ld	a, -1 (ix)
   1EF7 CE 00         [ 7] 5333 	adc	a, #0x00
   1EF9 67            [ 4] 5334 	ld	h, a
   1EFA 36 01         [10] 5335 	ld	(hl), #0x01
   1EFC                    5336 00107$:
   1EFC DD F9         [10] 5337 	ld	sp, ix
   1EFE DD E1         [14] 5338 	pop	ix
   1F00 C9            [10] 5339 	ret
                           5340 ;src/main.c:1268: void MoveLeft(TSpr *pSpr) __z88dk_fastcall {
                           5341 ;	---------------------------------
                           5342 ; Function MoveLeft
                           5343 ; ---------------------------------
   1F01                    5344 _MoveLeft::
   1F01 DD E5         [15] 5345 	push	ix
   1F03 DD 21 00 00   [14] 5346 	ld	ix,#0
   1F07 DD 39         [15] 5347 	add	ix,sp
   1F09 F5            [11] 5348 	push	af
   1F0A F5            [11] 5349 	push	af
                           5350 ;src/main.c:1270: if (OnBackground(pSpr->x-3, pSpr->y+1)) {
   1F0B DD 75 FE      [19] 5351 	ld	-2 (ix), l
   1F0E DD 74 FF      [19] 5352 	ld	-1 (ix), h
   1F11 23            [ 6] 5353 	inc	hl
   1F12 23            [ 6] 5354 	inc	hl
   1F13 23            [ 6] 5355 	inc	hl
   1F14 4D            [ 4] 5356 	ld	c,l
   1F15 44            [ 4] 5357 	ld	b,h
   1F16 0A            [ 7] 5358 	ld	a, (bc)
   1F17 57            [ 4] 5359 	ld	d, a
   1F18 14            [ 4] 5360 	inc	d
   1F19 DD 7E FE      [19] 5361 	ld	a, -2 (ix)
   1F1C C6 02         [ 7] 5362 	add	a, #0x02
   1F1E DD 77 FC      [19] 5363 	ld	-4 (ix), a
   1F21 DD 7E FF      [19] 5364 	ld	a, -1 (ix)
   1F24 CE 00         [ 7] 5365 	adc	a, #0x00
   1F26 DD 77 FD      [19] 5366 	ld	-3 (ix), a
   1F29 E1            [10] 5367 	pop	hl
   1F2A E5            [11] 5368 	push	hl
   1F2B 7E            [ 7] 5369 	ld	a, (hl)
   1F2C C6 FD         [ 7] 5370 	add	a, #0xfd
   1F2E C5            [11] 5371 	push	bc
   1F2F 5F            [ 4] 5372 	ld	e, a
   1F30 D5            [11] 5373 	push	de
   1F31 CDr74r02      [17] 5374 	call	_OnBackground
   1F34 F1            [10] 5375 	pop	af
   1F35 C1            [10] 5376 	pop	bc
   1F36 7D            [ 4] 5377 	ld	a, l
   1F37 B7            [ 4] 5378 	or	a, a
   1F38 28 4C         [12] 5379 	jr	Z,00106$
                           5380 ;src/main.c:1271: pSpr->x--;
   1F3A E1            [10] 5381 	pop	hl
   1F3B E5            [11] 5382 	push	hl
   1F3C 5E            [ 7] 5383 	ld	e, (hl)
   1F3D 1D            [ 4] 5384 	dec	e
   1F3E E1            [10] 5385 	pop	hl
   1F3F E5            [11] 5386 	push	hl
   1F40 73            [ 7] 5387 	ld	(hl), e
                           5388 ;src/main.c:1272: if (pSpr->power_maxV > 0 && OnBackground(pSpr->x-3, pSpr->y+1))
   1F41 D1            [10] 5389 	pop	de
   1F42 E1            [10] 5390 	pop	hl
   1F43 E5            [11] 5391 	push	hl
   1F44 D5            [11] 5392 	push	de
   1F45 11 0E 00      [10] 5393 	ld	de, #0x000e
   1F48 19            [11] 5394 	add	hl, de
   1F49 7E            [ 7] 5395 	ld	a, (hl)
   1F4A B7            [ 4] 5396 	or	a, a
   1F4B 28 1D         [12] 5397 	jr	Z,00102$
   1F4D 0A            [ 7] 5398 	ld	a, (bc)
   1F4E 4F            [ 4] 5399 	ld	c, a
   1F4F 0C            [ 4] 5400 	inc	c
   1F50 E1            [10] 5401 	pop	hl
   1F51 E5            [11] 5402 	push	hl
   1F52 7E            [ 7] 5403 	ld	a, (hl)
   1F53 C6 FD         [ 7] 5404 	add	a, #0xfd
   1F55 47            [ 4] 5405 	ld	b, a
   1F56 79            [ 4] 5406 	ld	a, c
   1F57 F5            [11] 5407 	push	af
   1F58 33            [ 6] 5408 	inc	sp
   1F59 C5            [11] 5409 	push	bc
   1F5A 33            [ 6] 5410 	inc	sp
   1F5B CDr74r02      [17] 5411 	call	_OnBackground
   1F5E F1            [10] 5412 	pop	af
   1F5F 7D            [ 4] 5413 	ld	a, l
   1F60 B7            [ 4] 5414 	or	a, a
   1F61 28 07         [12] 5415 	jr	Z,00102$
                           5416 ;src/main.c:1273: pSpr->x--; // powerUp speed*2
   1F63 E1            [10] 5417 	pop	hl
   1F64 E5            [11] 5418 	push	hl
   1F65 4E            [ 7] 5419 	ld	c, (hl)
   1F66 0D            [ 4] 5420 	dec	c
   1F67 E1            [10] 5421 	pop	hl
   1F68 E5            [11] 5422 	push	hl
   1F69 71            [ 7] 5423 	ld	(hl), c
   1F6A                    5424 00102$:
                           5425 ;src/main.c:1275: pSpr->dir = D_left;
   1F6A DD 7E FE      [19] 5426 	ld	a, -2 (ix)
   1F6D C6 07         [ 7] 5427 	add	a, #0x07
   1F6F 6F            [ 4] 5428 	ld	l, a
   1F70 DD 7E FF      [19] 5429 	ld	a, -1 (ix)
   1F73 CE 00         [ 7] 5430 	adc	a, #0x00
   1F75 67            [ 4] 5431 	ld	h, a
   1F76 36 02         [10] 5432 	ld	(hl), #0x02
                           5433 ;src/main.c:1276: pSpr->status = S_walkingLeft;
   1F78 DD 7E FE      [19] 5434 	ld	a, -2 (ix)
   1F7B C6 06         [ 7] 5435 	add	a, #0x06
   1F7D 6F            [ 4] 5436 	ld	l, a
   1F7E DD 7E FF      [19] 5437 	ld	a, -1 (ix)
   1F81 CE 00         [ 7] 5438 	adc	a, #0x00
   1F83 67            [ 4] 5439 	ld	h, a
   1F84 36 02         [10] 5440 	ld	(hl), #0x02
   1F86                    5441 00106$:
   1F86 DD F9         [10] 5442 	ld	sp, ix
   1F88 DD E1         [14] 5443 	pop	ix
   1F8A C9            [10] 5444 	ret
                           5445 ;src/main.c:1281: void MoveRight(TSpr *pSpr) __z88dk_fastcall { 
                           5446 ;	---------------------------------
                           5447 ; Function MoveRight
                           5448 ; ---------------------------------
   1F8B                    5449 _MoveRight::
   1F8B DD E5         [15] 5450 	push	ix
   1F8D DD 21 00 00   [14] 5451 	ld	ix,#0
   1F91 DD 39         [15] 5452 	add	ix,sp
   1F93 F5            [11] 5453 	push	af
   1F94 F5            [11] 5454 	push	af
                           5455 ;src/main.c:1283: if (OnBackground(pSpr->x+1, pSpr->y+1)) {
   1F95 DD 75 FE      [19] 5456 	ld	-2 (ix), l
   1F98 DD 74 FF      [19] 5457 	ld	-1 (ix), h
   1F9B 23            [ 6] 5458 	inc	hl
   1F9C 23            [ 6] 5459 	inc	hl
   1F9D 23            [ 6] 5460 	inc	hl
   1F9E 4D            [ 4] 5461 	ld	c,l
   1F9F 44            [ 4] 5462 	ld	b,h
   1FA0 0A            [ 7] 5463 	ld	a, (bc)
   1FA1 57            [ 4] 5464 	ld	d, a
   1FA2 14            [ 4] 5465 	inc	d
   1FA3 DD 7E FE      [19] 5466 	ld	a, -2 (ix)
   1FA6 C6 02         [ 7] 5467 	add	a, #0x02
   1FA8 DD 77 FC      [19] 5468 	ld	-4 (ix), a
   1FAB DD 7E FF      [19] 5469 	ld	a, -1 (ix)
   1FAE CE 00         [ 7] 5470 	adc	a, #0x00
   1FB0 DD 77 FD      [19] 5471 	ld	-3 (ix), a
   1FB3 E1            [10] 5472 	pop	hl
   1FB4 E5            [11] 5473 	push	hl
   1FB5 7E            [ 7] 5474 	ld	a, (hl)
   1FB6 3C            [ 4] 5475 	inc	a
   1FB7 C5            [11] 5476 	push	bc
   1FB8 5F            [ 4] 5477 	ld	e, a
   1FB9 D5            [11] 5478 	push	de
   1FBA CDr74r02      [17] 5479 	call	_OnBackground
   1FBD F1            [10] 5480 	pop	af
   1FBE C1            [10] 5481 	pop	bc
   1FBF 7D            [ 4] 5482 	ld	a, l
   1FC0 B7            [ 4] 5483 	or	a, a
   1FC1 28 4A         [12] 5484 	jr	Z,00106$
                           5485 ;src/main.c:1284: pSpr->x++;
   1FC3 E1            [10] 5486 	pop	hl
   1FC4 E5            [11] 5487 	push	hl
   1FC5 5E            [ 7] 5488 	ld	e, (hl)
   1FC6 1C            [ 4] 5489 	inc	e
   1FC7 E1            [10] 5490 	pop	hl
   1FC8 E5            [11] 5491 	push	hl
   1FC9 73            [ 7] 5492 	ld	(hl), e
                           5493 ;src/main.c:1285: if (pSpr->power_maxV > 0 && OnBackground(pSpr->x+1, pSpr->y+1)) 
   1FCA D1            [10] 5494 	pop	de
   1FCB E1            [10] 5495 	pop	hl
   1FCC E5            [11] 5496 	push	hl
   1FCD D5            [11] 5497 	push	de
   1FCE 11 0E 00      [10] 5498 	ld	de, #0x000e
   1FD1 19            [11] 5499 	add	hl, de
   1FD2 7E            [ 7] 5500 	ld	a, (hl)
   1FD3 B7            [ 4] 5501 	or	a, a
   1FD4 28 1B         [12] 5502 	jr	Z,00102$
   1FD6 0A            [ 7] 5503 	ld	a, (bc)
   1FD7 4F            [ 4] 5504 	ld	c, a
   1FD8 0C            [ 4] 5505 	inc	c
   1FD9 E1            [10] 5506 	pop	hl
   1FDA E5            [11] 5507 	push	hl
   1FDB 46            [ 7] 5508 	ld	b, (hl)
   1FDC 04            [ 4] 5509 	inc	b
   1FDD 79            [ 4] 5510 	ld	a, c
   1FDE F5            [11] 5511 	push	af
   1FDF 33            [ 6] 5512 	inc	sp
   1FE0 C5            [11] 5513 	push	bc
   1FE1 33            [ 6] 5514 	inc	sp
   1FE2 CDr74r02      [17] 5515 	call	_OnBackground
   1FE5 F1            [10] 5516 	pop	af
   1FE6 7D            [ 4] 5517 	ld	a, l
   1FE7 B7            [ 4] 5518 	or	a, a
   1FE8 28 07         [12] 5519 	jr	Z,00102$
                           5520 ;src/main.c:1286: pSpr->x++; // powerUp speed*2
   1FEA E1            [10] 5521 	pop	hl
   1FEB E5            [11] 5522 	push	hl
   1FEC 4E            [ 7] 5523 	ld	c, (hl)
   1FED 0C            [ 4] 5524 	inc	c
   1FEE E1            [10] 5525 	pop	hl
   1FEF E5            [11] 5526 	push	hl
   1FF0 71            [ 7] 5527 	ld	(hl), c
   1FF1                    5528 00102$:
                           5529 ;src/main.c:1288: pSpr->dir = D_right;
   1FF1 DD 7E FE      [19] 5530 	ld	a, -2 (ix)
   1FF4 C6 07         [ 7] 5531 	add	a, #0x07
   1FF6 6F            [ 4] 5532 	ld	l, a
   1FF7 DD 7E FF      [19] 5533 	ld	a, -1 (ix)
   1FFA CE 00         [ 7] 5534 	adc	a, #0x00
   1FFC 67            [ 4] 5535 	ld	h, a
   1FFD 36 03         [10] 5536 	ld	(hl), #0x03
                           5537 ;src/main.c:1289: pSpr->status = S_walkingRight;
   1FFF DD 7E FE      [19] 5538 	ld	a, -2 (ix)
   2002 C6 06         [ 7] 5539 	add	a, #0x06
   2004 6F            [ 4] 5540 	ld	l, a
   2005 DD 7E FF      [19] 5541 	ld	a, -1 (ix)
   2008 CE 00         [ 7] 5542 	adc	a, #0x00
   200A 67            [ 4] 5543 	ld	h, a
   200B 36 03         [10] 5544 	ld	(hl), #0x03
   200D                    5545 00106$:
   200D DD F9         [10] 5546 	ld	sp, ix
   200F DD E1         [14] 5547 	pop	ix
   2011 C9            [10] 5548 	ret
                           5549 ;src/main.c:1295: void WalkIn(TSpr *pSpr, u8 dir) {
                           5550 ;	---------------------------------
                           5551 ; Function WalkIn
                           5552 ; ---------------------------------
   2012                    5553 _WalkIn::
                           5554 ;src/main.c:1296: pSpr->nFrm = 0;
   2012 D1            [10] 5555 	pop	de
   2013 C1            [10] 5556 	pop	bc
   2014 C5            [11] 5557 	push	bc
   2015 D5            [11] 5558 	push	de
   2016 21 0A 00      [10] 5559 	ld	hl, #0x000a
   2019 09            [11] 5560 	add	hl, bc
   201A 36 00         [10] 5561 	ld	(hl), #0x00
                           5562 ;src/main.c:1297: pSpr->dir = dir;
   201C 21 07 00      [10] 5563 	ld	hl, #0x0007
   201F 09            [11] 5564 	add	hl, bc
   2020 FD 21 04 00   [14] 5565 	ld	iy, #4
   2024 FD 39         [15] 5566 	add	iy, sp
   2026 FD 7E 00      [19] 5567 	ld	a, 0 (iy)
   2029 77            [ 7] 5568 	ld	(hl), a
                           5569 ;src/main.c:1298: pSpr->status = dir;
   202A 21 06 00      [10] 5570 	ld	hl, #0x0006
   202D 09            [11] 5571 	add	hl, bc
   202E FD 7E 00      [19] 5572 	ld	a, 0 (iy)
   2031 77            [ 7] 5573 	ld	(hl), a
                           5574 ;src/main.c:1299: pSpr->print_minV = TRUE; // the sprite must be printed, it will move
   2032 21 0D 00      [10] 5575 	ld	hl, #0x000d
   2035 09            [11] 5576 	add	hl, bc
   2036 36 01         [10] 5577 	ld	(hl), #0x01
   2038 C9            [10] 5578 	ret
                           5579 ;src/main.c:1304: void Stop(TSpr *pSpr) __z88dk_fastcall {
                           5580 ;	---------------------------------
                           5581 ; Function Stop
                           5582 ; ---------------------------------
   2039                    5583 _Stop::
   2039 DD E5         [15] 5584 	push	ix
   203B DD 21 00 00   [14] 5585 	ld	ix,#0
   203F DD 39         [15] 5586 	add	ix,sp
   2041 F5            [11] 5587 	push	af
                           5588 ;src/main.c:1305: cpct_scanKeyboard_f(); // check the pressed keys
   2042 E5            [11] 5589 	push	hl
   2043 CDr00r00      [17] 5590 	call	_cpct_scanKeyboard_f
   2046 C1            [10] 5591 	pop	bc
                           5592 ;src/main.c:1306: if(cpct_isKeyPressed(ctlUp[pSpr->ident]))			WalkIn(pSpr, D_up);
   2047 11r23r00      [10] 5593 	ld	de, #_ctlUp+0
   204A 21 01 00      [10] 5594 	ld	hl, #0x0001
   204D 09            [11] 5595 	add	hl,bc
   204E E3            [19] 5596 	ex	(sp), hl
   204F E1            [10] 5597 	pop	hl
   2050 E5            [11] 5598 	push	hl
   2051 6E            [ 7] 5599 	ld	l, (hl)
   2052 26 00         [ 7] 5600 	ld	h, #0x00
   2054 29            [11] 5601 	add	hl, hl
   2055 19            [11] 5602 	add	hl, de
   2056 5E            [ 7] 5603 	ld	e, (hl)
   2057 23            [ 6] 5604 	inc	hl
   2058 66            [ 7] 5605 	ld	h, (hl)
   2059 C5            [11] 5606 	push	bc
   205A 6B            [ 4] 5607 	ld	l, e
   205B CDr00r00      [17] 5608 	call	_cpct_isKeyPressed
   205E C1            [10] 5609 	pop	bc
   205F 7D            [ 4] 5610 	ld	a, l
   2060 B7            [ 4] 5611 	or	a, a
   2061 28 0C         [12] 5612 	jr	Z,00119$
   2063 AF            [ 4] 5613 	xor	a, a
   2064 F5            [11] 5614 	push	af
   2065 33            [ 6] 5615 	inc	sp
   2066 C5            [11] 5616 	push	bc
   2067 CDr12r20      [17] 5617 	call	_WalkIn
   206A F1            [10] 5618 	pop	af
   206B 33            [ 6] 5619 	inc	sp
   206C C3r18r21      [10] 5620 	jp	00121$
   206F                    5621 00119$:
                           5622 ;src/main.c:1307: else if(cpct_isKeyPressed(ctlDown[pSpr->ident]))	WalkIn(pSpr, D_down);
   206F E1            [10] 5623 	pop	hl
   2070 E5            [11] 5624 	push	hl
   2071 6E            [ 7] 5625 	ld	l, (hl)
   2072 26 00         [ 7] 5626 	ld	h, #0x00
   2074 29            [11] 5627 	add	hl, hl
   2075 11r27r00      [10] 5628 	ld	de, #_ctlDown
   2078 19            [11] 5629 	add	hl, de
   2079 7E            [ 7] 5630 	ld	a, (hl)
   207A 23            [ 6] 5631 	inc	hl
   207B 66            [ 7] 5632 	ld	h, (hl)
   207C 6F            [ 4] 5633 	ld	l, a
   207D C5            [11] 5634 	push	bc
   207E CDr00r00      [17] 5635 	call	_cpct_isKeyPressed
   2081 C1            [10] 5636 	pop	bc
   2082 7D            [ 4] 5637 	ld	a, l
   2083 B7            [ 4] 5638 	or	a, a
   2084 28 0D         [12] 5639 	jr	Z,00116$
   2086 3E 01         [ 7] 5640 	ld	a, #0x01
   2088 F5            [11] 5641 	push	af
   2089 33            [ 6] 5642 	inc	sp
   208A C5            [11] 5643 	push	bc
   208B CDr12r20      [17] 5644 	call	_WalkIn
   208E F1            [10] 5645 	pop	af
   208F 33            [ 6] 5646 	inc	sp
   2090 C3r18r21      [10] 5647 	jp	00121$
   2093                    5648 00116$:
                           5649 ;src/main.c:1308: else if(cpct_isKeyPressed(ctlLeft[pSpr->ident]))	WalkIn(pSpr, D_left);
   2093 E1            [10] 5650 	pop	hl
   2094 E5            [11] 5651 	push	hl
   2095 6E            [ 7] 5652 	ld	l, (hl)
   2096 26 00         [ 7] 5653 	ld	h, #0x00
   2098 29            [11] 5654 	add	hl, hl
   2099 11r2Br00      [10] 5655 	ld	de, #_ctlLeft
   209C 19            [11] 5656 	add	hl, de
   209D 7E            [ 7] 5657 	ld	a, (hl)
   209E 23            [ 6] 5658 	inc	hl
   209F 66            [ 7] 5659 	ld	h, (hl)
   20A0 6F            [ 4] 5660 	ld	l, a
   20A1 C5            [11] 5661 	push	bc
   20A2 CDr00r00      [17] 5662 	call	_cpct_isKeyPressed
   20A5 C1            [10] 5663 	pop	bc
   20A6 7D            [ 4] 5664 	ld	a, l
   20A7 B7            [ 4] 5665 	or	a, a
   20A8 28 0C         [12] 5666 	jr	Z,00113$
   20AA 3E 02         [ 7] 5667 	ld	a, #0x02
   20AC F5            [11] 5668 	push	af
   20AD 33            [ 6] 5669 	inc	sp
   20AE C5            [11] 5670 	push	bc
   20AF CDr12r20      [17] 5671 	call	_WalkIn
   20B2 F1            [10] 5672 	pop	af
   20B3 33            [ 6] 5673 	inc	sp
   20B4 18 62         [12] 5674 	jr	00121$
   20B6                    5675 00113$:
                           5676 ;src/main.c:1309: else if(cpct_isKeyPressed(ctlRight[pSpr->ident]))	WalkIn(pSpr, D_right);	
   20B6 E1            [10] 5677 	pop	hl
   20B7 E5            [11] 5678 	push	hl
   20B8 6E            [ 7] 5679 	ld	l, (hl)
   20B9 26 00         [ 7] 5680 	ld	h, #0x00
   20BB 29            [11] 5681 	add	hl, hl
   20BC 11r2Fr00      [10] 5682 	ld	de, #_ctlRight
   20BF 19            [11] 5683 	add	hl, de
   20C0 7E            [ 7] 5684 	ld	a, (hl)
   20C1 23            [ 6] 5685 	inc	hl
   20C2 66            [ 7] 5686 	ld	h, (hl)
   20C3 6F            [ 4] 5687 	ld	l, a
   20C4 C5            [11] 5688 	push	bc
   20C5 CDr00r00      [17] 5689 	call	_cpct_isKeyPressed
   20C8 C1            [10] 5690 	pop	bc
   20C9 7D            [ 4] 5691 	ld	a, l
   20CA B7            [ 4] 5692 	or	a, a
   20CB 28 0C         [12] 5693 	jr	Z,00110$
   20CD 3E 03         [ 7] 5694 	ld	a, #0x03
   20CF F5            [11] 5695 	push	af
   20D0 33            [ 6] 5696 	inc	sp
   20D1 C5            [11] 5697 	push	bc
   20D2 CDr12r20      [17] 5698 	call	_WalkIn
   20D5 F1            [10] 5699 	pop	af
   20D6 33            [ 6] 5700 	inc	sp
   20D7 18 3F         [12] 5701 	jr	00121$
   20D9                    5702 00110$:
                           5703 ;src/main.c:1311: else if(cpct_isKeyPressed(ctlAbort)) {
   20D9 2Ar33r00      [16] 5704 	ld	hl, (_ctlAbort)
   20DC CDr00r00      [17] 5705 	call	_cpct_isKeyPressed
   20DF 7D            [ 4] 5706 	ld	a, l
   20E0 B7            [ 4] 5707 	or	a, a
   20E1 28 14         [12] 5708 	jr	Z,00107$
                           5709 ;src/main.c:1312: spr[0].lives_speed = 0;
   20E3 21r44r00      [10] 5710 	ld	hl, #(_spr + 0x000b)
   20E6 36 00         [10] 5711 	ld	(hl), #0x00
                           5712 ;src/main.c:1313: spr[1].lives_speed = 0;
   20E8 01r53r00      [10] 5713 	ld	bc, #_spr + 26
   20EB AF            [ 4] 5714 	xor	a, a
   20EC 02            [ 7] 5715 	ld	(bc), a
                           5716 ;src/main.c:1314: GameOver(2);
   20ED 3E 02         [ 7] 5717 	ld	a, #0x02
   20EF F5            [11] 5718 	push	af
   20F0 33            [ 6] 5719 	inc	sp
   20F1 CDr29r41      [17] 5720 	call	_GameOver
   20F4 33            [ 6] 5721 	inc	sp
   20F5 18 21         [12] 5722 	jr	00121$
   20F7                    5723 00107$:
                           5724 ;src/main.c:1317: else if(cpct_isKeyPressed(ctlPause)) {
   20F7 2Ar37r00      [16] 5725 	ld	hl, (_ctlPause)
   20FA CDr00r00      [17] 5726 	call	_cpct_isKeyPressed
   20FD 7D            [ 4] 5727 	ld	a, l
   20FE B7            [ 4] 5728 	or	a, a
   20FF 28 17         [12] 5729 	jr	Z,00121$
                           5730 ;src/main.c:1318: Wait4Key(ctlPause);
   2101 2Ar37r00      [16] 5731 	ld	hl, (_ctlPause)
   2104 E5            [11] 5732 	push	hl
   2105 CDrB9r0A      [17] 5733 	call	_Wait4Key
   2108 F1            [10] 5734 	pop	af
                           5735 ;src/main.c:1319: while (!cpct_isAnyKeyPressed());
   2109                    5736 00101$:
   2109 CDr00r00      [17] 5737 	call	_cpct_isAnyKeyPressed
   210C 7D            [ 4] 5738 	ld	a, l
   210D B7            [ 4] 5739 	or	a, a
   210E 28 F9         [12] 5740 	jr	Z,00101$
                           5741 ;src/main.c:1320: Wait4Key(ctlPause);
   2110 2Ar37r00      [16] 5742 	ld	hl, (_ctlPause)
   2113 E5            [11] 5743 	push	hl
   2114 CDrB9r0A      [17] 5744 	call	_Wait4Key
   2117 F1            [10] 5745 	pop	af
   2118                    5746 00121$:
   2118 DD F9         [10] 5747 	ld	sp, ix
   211A DD E1         [14] 5748 	pop	ix
   211C C9            [10] 5749 	ret
                           5750 ;src/main.c:1328: void WalkAnim(TSpr *pSpr, u8 dir) {
                           5751 ;	---------------------------------
                           5752 ; Function WalkAnim
                           5753 ; ---------------------------------
   211D                    5754 _WalkAnim::
   211D DD E5         [15] 5755 	push	ix
   211F DD 21 00 00   [14] 5756 	ld	ix,#0
   2123 DD 39         [15] 5757 	add	ix,sp
                           5758 ;src/main.c:1329: u8 animPause = 2;
   2125 0E 02         [ 7] 5759 	ld	c, #0x02
                           5760 ;src/main.c:1330: if (pSpr->num > 3) animPause = 1; // slow enemies (4 and 5) have no pause in animation
   2127 DD 5E 04      [19] 5761 	ld	e,4 (ix)
   212A DD 56 05      [19] 5762 	ld	d,5 (ix)
   212D 1A            [ 7] 5763 	ld	a, (de)
   212E 47            [ 4] 5764 	ld	b, a
   212F 3E 03         [ 7] 5765 	ld	a, #0x03
   2131 90            [ 4] 5766 	sub	a, b
   2132 30 02         [12] 5767 	jr	NC,00102$
   2134 0E 01         [ 7] 5768 	ld	c, #0x01
   2136                    5769 00102$:
                           5770 ;src/main.c:1331: pSpr->dir = dir;
   2136 21 07 00      [10] 5771 	ld	hl, #0x0007
   2139 19            [11] 5772 	add	hl, de
   213A DD 7E 06      [19] 5773 	ld	a, 6 (ix)
   213D 77            [ 7] 5774 	ld	(hl), a
                           5775 ;src/main.c:1332: if(++pSpr->nFrm == animPause*2) pSpr->nFrm = 0;
   213E FD 21 0A 00   [14] 5776 	ld	iy, #0x000a
   2142 FD 19         [15] 5777 	add	iy, de
   2144 FD 34 00      [23] 5778 	inc	0 (iy)
   2147 FD 5E 00      [19] 5779 	ld	e, 0 (iy)
   214A 06 00         [ 7] 5780 	ld	b, #0x00
   214C CB 21         [ 8] 5781 	sla	c
   214E CB 10         [ 8] 5782 	rl	b
   2150 16 00         [ 7] 5783 	ld	d, #0x00
   2152 79            [ 4] 5784 	ld	a, c
   2153 93            [ 4] 5785 	sub	a, e
   2154 20 08         [12] 5786 	jr	NZ,00105$
   2156 78            [ 4] 5787 	ld	a, b
   2157 92            [ 4] 5788 	sub	a, d
   2158 20 04         [12] 5789 	jr	NZ,00105$
   215A FD 36 00 00   [19] 5790 	ld	0 (iy), #0x00
   215E                    5791 00105$:
   215E DD E1         [14] 5792 	pop	ix
   2160 C9            [10] 5793 	ret
                           5794 ;src/main.c:1337: void Walk(TSpr *pSpr) __z88dk_fastcall {
                           5795 ;	---------------------------------
                           5796 ; Function Walk
                           5797 ; ---------------------------------
   2161                    5798 _Walk::
   2161 DD E5         [15] 5799 	push	ix
   2163 DD 21 00 00   [14] 5800 	ld	ix,#0
   2167 DD 39         [15] 5801 	add	ix,sp
   2169 F5            [11] 5802 	push	af
   216A F5            [11] 5803 	push	af
   216B DD 75 FE      [19] 5804 	ld	-2 (ix), l
   216E DD 74 FF      [19] 5805 	ld	-1 (ix), h
                           5806 ;src/main.c:1338: cpct_scanKeyboard_f(); // check the pressed keys
   2171 CDr00r00      [17] 5807 	call	_cpct_scanKeyboard_f
                           5808 ;src/main.c:1340: if(cpct_isKeyPressed(ctlRight[pSpr->ident])) {	
   2174 11r2Fr00      [10] 5809 	ld	de, #_ctlRight+0
   2177 DD 4E FE      [19] 5810 	ld	c,-2 (ix)
   217A DD 46 FF      [19] 5811 	ld	b,-1 (ix)
   217D 03            [ 6] 5812 	inc	bc
   217E 0A            [ 7] 5813 	ld	a, (bc)
   217F 6F            [ 4] 5814 	ld	l, a
   2180 26 00         [ 7] 5815 	ld	h, #0x00
   2182 29            [11] 5816 	add	hl, hl
   2183 19            [11] 5817 	add	hl, de
   2184 5E            [ 7] 5818 	ld	e, (hl)
   2185 23            [ 6] 5819 	inc	hl
   2186 66            [ 7] 5820 	ld	h, (hl)
   2187 C5            [11] 5821 	push	bc
   2188 6B            [ 4] 5822 	ld	l, e
   2189 CDr00r00      [17] 5823 	call	_cpct_isKeyPressed
   218C 5D            [ 4] 5824 	ld	e, l
   218D C1            [10] 5825 	pop	bc
   218E 0A            [ 7] 5826 	ld	a, (bc)
   218F 6F            [ 4] 5827 	ld	l, a
                           5828 ;src/main.c:1341: if (cpct_isKeyPressed(ctlUp[pSpr->ident])) 			MoveUp(pSpr);  // diagonal derecha-arriba
   2190 26 00         [ 7] 5829 	ld	h, #0x00
   2192 29            [11] 5830 	add	hl, hl
   2193 E3            [19] 5831 	ex	(sp), hl
                           5832 ;src/main.c:1340: if(cpct_isKeyPressed(ctlRight[pSpr->ident])) {	
   2194 7B            [ 4] 5833 	ld	a, e
   2195 B7            [ 4] 5834 	or	a, a
   2196 28 51         [12] 5835 	jr	Z,00121$
                           5836 ;src/main.c:1341: if (cpct_isKeyPressed(ctlUp[pSpr->ident])) 			MoveUp(pSpr);  // diagonal derecha-arriba
   2198 11r23r00      [10] 5837 	ld	de, #_ctlUp+0
   219B E1            [10] 5838 	pop	hl
   219C E5            [11] 5839 	push	hl
   219D 19            [11] 5840 	add	hl, de
   219E 5E            [ 7] 5841 	ld	e, (hl)
   219F 23            [ 6] 5842 	inc	hl
   21A0 66            [ 7] 5843 	ld	h, (hl)
   21A1 C5            [11] 5844 	push	bc
   21A2 6B            [ 4] 5845 	ld	l, e
   21A3 CDr00r00      [17] 5846 	call	_cpct_isKeyPressed
   21A6 C1            [10] 5847 	pop	bc
   21A7 7D            [ 4] 5848 	ld	a, l
   21A8 B7            [ 4] 5849 	or	a, a
   21A9 28 09         [12] 5850 	jr	Z,00104$
   21AB C1            [10] 5851 	pop	bc
   21AC E1            [10] 5852 	pop	hl
   21AD E5            [11] 5853 	push	hl
   21AE C5            [11] 5854 	push	bc
   21AF CDrD4r1D      [17] 5855 	call	_MoveUp
   21B2 18 1B         [12] 5856 	jr	00105$
   21B4                    5857 00104$:
                           5858 ;src/main.c:1342: else if(cpct_isKeyPressed(ctlDown[pSpr->ident]))	MoveDown(pSpr); // diagonal derecha-abajo
   21B4 11r27r00      [10] 5859 	ld	de, #_ctlDown+0
   21B7 0A            [ 7] 5860 	ld	a, (bc)
   21B8 6F            [ 4] 5861 	ld	l, a
   21B9 26 00         [ 7] 5862 	ld	h, #0x00
   21BB 29            [11] 5863 	add	hl, hl
   21BC 19            [11] 5864 	add	hl, de
   21BD 4E            [ 7] 5865 	ld	c, (hl)
   21BE 23            [ 6] 5866 	inc	hl
   21BF 66            [ 7] 5867 	ld	h, (hl)
   21C0 69            [ 4] 5868 	ld	l, c
   21C1 CDr00r00      [17] 5869 	call	_cpct_isKeyPressed
   21C4 7D            [ 4] 5870 	ld	a, l
   21C5 B7            [ 4] 5871 	or	a, a
   21C6 28 07         [12] 5872 	jr	Z,00105$
   21C8 C1            [10] 5873 	pop	bc
   21C9 E1            [10] 5874 	pop	hl
   21CA E5            [11] 5875 	push	hl
   21CB C5            [11] 5876 	push	bc
   21CC CDr61r1E      [17] 5877 	call	_MoveDown
   21CF                    5878 00105$:
                           5879 ;src/main.c:1343: MoveRight(pSpr);
   21CF C1            [10] 5880 	pop	bc
   21D0 E1            [10] 5881 	pop	hl
   21D1 E5            [11] 5882 	push	hl
   21D2 C5            [11] 5883 	push	bc
   21D3 CDr8Br1F      [17] 5884 	call	_MoveRight
                           5885 ;src/main.c:1344: WalkAnim(pSpr, D_right);
   21D6 3E 03         [ 7] 5886 	ld	a, #0x03
   21D8 F5            [11] 5887 	push	af
   21D9 33            [ 6] 5888 	inc	sp
   21DA DD 6E FE      [19] 5889 	ld	l,-2 (ix)
   21DD DD 66 FF      [19] 5890 	ld	h,-1 (ix)
   21E0 E5            [11] 5891 	push	hl
   21E1 CDr1Dr21      [17] 5892 	call	_WalkAnim
   21E4 F1            [10] 5893 	pop	af
   21E5 33            [ 6] 5894 	inc	sp
   21E6 C3rB9r22      [10] 5895 	jp	00123$
   21E9                    5896 00121$:
                           5897 ;src/main.c:1347: else if(cpct_isKeyPressed(ctlLeft[pSpr->ident])) {	
   21E9 11r2Br00      [10] 5898 	ld	de, #_ctlLeft+0
   21EC E1            [10] 5899 	pop	hl
   21ED E5            [11] 5900 	push	hl
   21EE 19            [11] 5901 	add	hl, de
   21EF 5E            [ 7] 5902 	ld	e, (hl)
   21F0 23            [ 6] 5903 	inc	hl
   21F1 66            [ 7] 5904 	ld	h, (hl)
   21F2 C5            [11] 5905 	push	bc
   21F3 6B            [ 4] 5906 	ld	l, e
   21F4 CDr00r00      [17] 5907 	call	_cpct_isKeyPressed
   21F7 5D            [ 4] 5908 	ld	e, l
   21F8 C1            [10] 5909 	pop	bc
                           5910 ;src/main.c:1340: if(cpct_isKeyPressed(ctlRight[pSpr->ident])) {	
   21F9 0A            [ 7] 5911 	ld	a, (bc)
   21FA 6F            [ 4] 5912 	ld	l, a
                           5913 ;src/main.c:1341: if (cpct_isKeyPressed(ctlUp[pSpr->ident])) 			MoveUp(pSpr);  // diagonal derecha-arriba
   21FB 26 00         [ 7] 5914 	ld	h, #0x00
   21FD 29            [11] 5915 	add	hl, hl
   21FE E3            [19] 5916 	ex	(sp), hl
                           5917 ;src/main.c:1347: else if(cpct_isKeyPressed(ctlLeft[pSpr->ident])) {	
   21FF 7B            [ 4] 5918 	ld	a, e
   2200 B7            [ 4] 5919 	or	a, a
   2201 28 50         [12] 5920 	jr	Z,00118$
                           5921 ;src/main.c:1348: if (cpct_isKeyPressed(ctlUp[pSpr->ident])) 			MoveUp(pSpr); // diagonal izda-arriba
   2203 11r23r00      [10] 5922 	ld	de, #_ctlUp+0
   2206 E1            [10] 5923 	pop	hl
   2207 E5            [11] 5924 	push	hl
   2208 19            [11] 5925 	add	hl, de
   2209 5E            [ 7] 5926 	ld	e, (hl)
   220A 23            [ 6] 5927 	inc	hl
   220B 66            [ 7] 5928 	ld	h, (hl)
   220C C5            [11] 5929 	push	bc
   220D 6B            [ 4] 5930 	ld	l, e
   220E CDr00r00      [17] 5931 	call	_cpct_isKeyPressed
   2211 C1            [10] 5932 	pop	bc
   2212 7D            [ 4] 5933 	ld	a, l
   2213 B7            [ 4] 5934 	or	a, a
   2214 28 09         [12] 5935 	jr	Z,00109$
   2216 C1            [10] 5936 	pop	bc
   2217 E1            [10] 5937 	pop	hl
   2218 E5            [11] 5938 	push	hl
   2219 C5            [11] 5939 	push	bc
   221A CDrD4r1D      [17] 5940 	call	_MoveUp
   221D 18 1B         [12] 5941 	jr	00110$
   221F                    5942 00109$:
                           5943 ;src/main.c:1349: else if(cpct_isKeyPressed(ctlDown[pSpr->ident]))	MoveDown(pSpr); // diagonal izda-abajo
   221F 0A            [ 7] 5944 	ld	a, (bc)
   2220 6F            [ 4] 5945 	ld	l, a
   2221 26 00         [ 7] 5946 	ld	h, #0x00
   2223 29            [11] 5947 	add	hl, hl
   2224 11r27r00      [10] 5948 	ld	de, #_ctlDown
   2227 19            [11] 5949 	add	hl, de
   2228 4E            [ 7] 5950 	ld	c, (hl)
   2229 23            [ 6] 5951 	inc	hl
   222A 66            [ 7] 5952 	ld	h, (hl)
   222B 69            [ 4] 5953 	ld	l, c
   222C CDr00r00      [17] 5954 	call	_cpct_isKeyPressed
   222F 7D            [ 4] 5955 	ld	a, l
   2230 B7            [ 4] 5956 	or	a, a
   2231 28 07         [12] 5957 	jr	Z,00110$
   2233 C1            [10] 5958 	pop	bc
   2234 E1            [10] 5959 	pop	hl
   2235 E5            [11] 5960 	push	hl
   2236 C5            [11] 5961 	push	bc
   2237 CDr61r1E      [17] 5962 	call	_MoveDown
   223A                    5963 00110$:
                           5964 ;src/main.c:1350: MoveLeft(pSpr); 
   223A C1            [10] 5965 	pop	bc
   223B E1            [10] 5966 	pop	hl
   223C E5            [11] 5967 	push	hl
   223D C5            [11] 5968 	push	bc
   223E CDr01r1F      [17] 5969 	call	_MoveLeft
                           5970 ;src/main.c:1351: WalkAnim(pSpr, D_left);
   2241 3E 02         [ 7] 5971 	ld	a, #0x02
   2243 F5            [11] 5972 	push	af
   2244 33            [ 6] 5973 	inc	sp
   2245 DD 6E FE      [19] 5974 	ld	l,-2 (ix)
   2248 DD 66 FF      [19] 5975 	ld	h,-1 (ix)
   224B E5            [11] 5976 	push	hl
   224C CDr1Dr21      [17] 5977 	call	_WalkAnim
   224F F1            [10] 5978 	pop	af
   2250 33            [ 6] 5979 	inc	sp
   2251 18 66         [12] 5980 	jr	00123$
   2253                    5981 00118$:
                           5982 ;src/main.c:1354: else if(cpct_isKeyPressed(ctlUp[pSpr->ident])) {
   2253 11r23r00      [10] 5983 	ld	de, #_ctlUp+0
   2256 E1            [10] 5984 	pop	hl
   2257 E5            [11] 5985 	push	hl
   2258 19            [11] 5986 	add	hl, de
   2259 5E            [ 7] 5987 	ld	e, (hl)
   225A 23            [ 6] 5988 	inc	hl
   225B 66            [ 7] 5989 	ld	h, (hl)
   225C C5            [11] 5990 	push	bc
   225D 6B            [ 4] 5991 	ld	l, e
   225E CDr00r00      [17] 5992 	call	_cpct_isKeyPressed
   2261 C1            [10] 5993 	pop	bc
   2262 7D            [ 4] 5994 	ld	a, l
   2263 B7            [ 4] 5995 	or	a, a
   2264 28 18         [12] 5996 	jr	Z,00115$
                           5997 ;src/main.c:1355: MoveUp(pSpr); 
   2266 C1            [10] 5998 	pop	bc
   2267 E1            [10] 5999 	pop	hl
   2268 E5            [11] 6000 	push	hl
   2269 C5            [11] 6001 	push	bc
   226A CDrD4r1D      [17] 6002 	call	_MoveUp
                           6003 ;src/main.c:1356: WalkAnim(pSpr, D_up);
   226D AF            [ 4] 6004 	xor	a, a
   226E F5            [11] 6005 	push	af
   226F 33            [ 6] 6006 	inc	sp
   2270 DD 6E FE      [19] 6007 	ld	l,-2 (ix)
   2273 DD 66 FF      [19] 6008 	ld	h,-1 (ix)
   2276 E5            [11] 6009 	push	hl
   2277 CDr1Dr21      [17] 6010 	call	_WalkAnim
   227A F1            [10] 6011 	pop	af
   227B 33            [ 6] 6012 	inc	sp
   227C 18 3B         [12] 6013 	jr	00123$
   227E                    6014 00115$:
                           6015 ;src/main.c:1359: else if(cpct_isKeyPressed(ctlDown[pSpr->ident])) {
   227E 0A            [ 7] 6016 	ld	a, (bc)
   227F 6F            [ 4] 6017 	ld	l, a
   2280 26 00         [ 7] 6018 	ld	h, #0x00
   2282 29            [11] 6019 	add	hl, hl
   2283 11r27r00      [10] 6020 	ld	de, #_ctlDown
   2286 19            [11] 6021 	add	hl, de
   2287 7E            [ 7] 6022 	ld	a, (hl)
   2288 23            [ 6] 6023 	inc	hl
   2289 66            [ 7] 6024 	ld	h, (hl)
   228A 6F            [ 4] 6025 	ld	l, a
   228B CDr00r00      [17] 6026 	call	_cpct_isKeyPressed
   228E 7D            [ 4] 6027 	ld	a, l
   228F B7            [ 4] 6028 	or	a, a
   2290 28 19         [12] 6029 	jr	Z,00112$
                           6030 ;src/main.c:1360: MoveDown(pSpr); 
   2292 C1            [10] 6031 	pop	bc
   2293 E1            [10] 6032 	pop	hl
   2294 E5            [11] 6033 	push	hl
   2295 C5            [11] 6034 	push	bc
   2296 CDr61r1E      [17] 6035 	call	_MoveDown
                           6036 ;src/main.c:1361: WalkAnim(pSpr, D_down);
   2299 3E 01         [ 7] 6037 	ld	a, #0x01
   229B F5            [11] 6038 	push	af
   229C 33            [ 6] 6039 	inc	sp
   229D DD 6E FE      [19] 6040 	ld	l,-2 (ix)
   22A0 DD 66 FF      [19] 6041 	ld	h,-1 (ix)
   22A3 E5            [11] 6042 	push	hl
   22A4 CDr1Dr21      [17] 6043 	call	_WalkAnim
   22A7 F1            [10] 6044 	pop	af
   22A8 33            [ 6] 6045 	inc	sp
   22A9 18 0E         [12] 6046 	jr	00123$
   22AB                    6047 00112$:
                           6048 ;src/main.c:1364: pSpr->status = S_stopped;
   22AB DD 7E FE      [19] 6049 	ld	a, -2 (ix)
   22AE C6 06         [ 7] 6050 	add	a, #0x06
   22B0 6F            [ 4] 6051 	ld	l, a
   22B1 DD 7E FF      [19] 6052 	ld	a, -1 (ix)
   22B4 CE 00         [ 7] 6053 	adc	a, #0x00
   22B6 67            [ 4] 6054 	ld	h, a
   22B7 36 04         [10] 6055 	ld	(hl), #0x04
   22B9                    6056 00123$:
   22B9 DD F9         [10] 6057 	ld	sp, ix
   22BB DD E1         [14] 6058 	pop	ix
   22BD C9            [10] 6059 	ret
                           6060 ;src/main.c:1369: void RunStatus(TSpr *pSpr) __z88dk_fastcall {
                           6061 ;	---------------------------------
                           6062 ; Function RunStatus
                           6063 ; ---------------------------------
   22BE                    6064 _RunStatus::
   22BE 4D            [ 4] 6065 	ld	c, l
   22BF 44            [ 4] 6066 	ld	b, h
                           6067 ;src/main.c:1370: if (pSpr->status == S_stopped)
   22C0 C5            [11] 6068 	push	bc
   22C1 FD E1         [14] 6069 	pop	iy
   22C3 FD 7E 06      [19] 6070 	ld	a, 6 (iy)
   22C6 D6 04         [ 7] 6071 	sub	a, #0x04
   22C8 20 05         [12] 6072 	jr	NZ,00102$
                           6073 ;src/main.c:1371: Stop(pSpr);
   22CA 69            [ 4] 6074 	ld	l, c
   22CB 60            [ 4] 6075 	ld	h, b
   22CC C3r39r20      [10] 6076 	jp  _Stop
   22CF                    6077 00102$:
                           6078 ;src/main.c:1373: Walk(pSpr);	
   22CF 69            [ 4] 6079 	ld	l, c
   22D0 60            [ 4] 6080 	ld	h, b
   22D1 C3r61r21      [10] 6081 	jp  _Walk
                           6082 ;src/main.c:1378: void PlayerLoop(TSpr *pSpr) __z88dk_fastcall {
                           6083 ;	---------------------------------
                           6084 ; Function PlayerLoop
                           6085 ; ---------------------------------
   22D4                    6086 _PlayerLoop::
   22D4 DD E5         [15] 6087 	push	ix
   22D6 DD 21 00 00   [14] 6088 	ld	ix,#0
   22DA DD 39         [15] 6089 	add	ix,sp
   22DC F5            [11] 6090 	push	af
   22DD 4D            [ 4] 6091 	ld	c, l
   22DE 44            [ 4] 6092 	ld	b, h
                           6093 ;src/main.c:1379: RunStatus(pSpr); // calls the appropriate function based on the status of the main sprites
   22DF C5            [11] 6094 	push	bc
   22E0 69            [ 4] 6095 	ld	l, c
   22E1 60            [ 4] 6096 	ld	h, b
   22E2 CDrBEr22      [17] 6097 	call	_RunStatus
   22E5 C1            [10] 6098 	pop	bc
                           6099 ;src/main.c:1380: if (pSpr->print_minV) { // does the sprite have to be reprinted?
   22E6 21 0D 00      [10] 6100 	ld	hl, #0x000d
   22E9 09            [11] 6101 	add	hl,bc
   22EA E3            [19] 6102 	ex	(sp), hl
   22EB E1            [10] 6103 	pop	hl
   22EC E5            [11] 6104 	push	hl
   22ED 7E            [ 7] 6105 	ld	a, (hl)
   22EE B7            [ 4] 6106 	or	a, a
   22EF 28 46         [12] 6107 	jr	Z,00106$
                           6108 ;src/main.c:1381: SelectFrame(pSpr); // we assign the next frame of the animation to the sprite
   22F1 C5            [11] 6109 	push	bc
   22F2 69            [ 4] 6110 	ld	l, c
   22F3 60            [ 4] 6111 	ld	h, b
   22F4 CDr82r19      [17] 6112 	call	_SelectFrame
   22F7 C1            [10] 6113 	pop	bc
                           6114 ;src/main.c:1382: DeleteSprite(pSpr); // delete the sprite
   22F8 C5            [11] 6115 	push	bc
   22F9 69            [ 4] 6116 	ld	l, c
   22FA 60            [ 4] 6117 	ld	h, b
   22FB CDrCDr18      [17] 6118 	call	_DeleteSprite
   22FE C1            [10] 6119 	pop	bc
                           6120 ;src/main.c:1383: pSpr->px = pSpr->x; // save the current X coordinate
   22FF 21 04 00      [10] 6121 	ld	hl, #0x0004
   2302 09            [11] 6122 	add	hl,bc
   2303 EB            [ 4] 6123 	ex	de,hl
   2304 69            [ 4] 6124 	ld	l, c
   2305 60            [ 4] 6125 	ld	h, b
   2306 23            [ 6] 6126 	inc	hl
   2307 23            [ 6] 6127 	inc	hl
   2308 7E            [ 7] 6128 	ld	a, (hl)
   2309 12            [ 7] 6129 	ld	(de), a
                           6130 ;src/main.c:1384: pSpr->py = pSpr->y; // save the current Y coordinate
   230A 21 05 00      [10] 6131 	ld	hl, #0x0005
   230D 09            [11] 6132 	add	hl,bc
   230E EB            [ 4] 6133 	ex	de,hl
   230F 69            [ 4] 6134 	ld	l, c
   2310 60            [ 4] 6135 	ld	h, b
   2311 23            [ 6] 6136 	inc	hl
   2312 23            [ 6] 6137 	inc	hl
   2313 23            [ 6] 6138 	inc	hl
   2314 7E            [ 7] 6139 	ld	a, (hl)
   2315 12            [ 7] 6140 	ld	(de), a
                           6141 ;src/main.c:1385: PrintSprite(pSpr); // paint the sprite in the new XY position
   2316 C5            [11] 6142 	push	bc
   2317 69            [ 4] 6143 	ld	l, c
   2318 60            [ 4] 6144 	ld	h, b
   2319 CDr9Er18      [17] 6145 	call	_PrintSprite
   231C C1            [10] 6146 	pop	bc
                           6147 ;src/main.c:1386: ctInactivity[pSpr->num] = 0; // on the move
   231D 11r1Cr00      [10] 6148 	ld	de, #_ctInactivity+0
   2320 0A            [ 7] 6149 	ld	a, (bc)
   2321 6F            [ 4] 6150 	ld	l, a
   2322 26 00         [ 7] 6151 	ld	h,#0x00
   2324 19            [11] 6152 	add	hl, de
   2325 36 00         [10] 6153 	ld	(hl), #0x00
                           6154 ;src/main.c:1387: if (pSpr->status == S_stopped) 
   2327 C5            [11] 6155 	push	bc
   2328 FD E1         [14] 6156 	pop	iy
   232A FD 7E 06      [19] 6157 	ld	a, 6 (iy)
   232D D6 04         [ 7] 6158 	sub	a, #0x04
   232F 20 1E         [12] 6159 	jr	NZ,00108$
                           6160 ;src/main.c:1388: pSpr->print_minV = FALSE; // if it is stopped it is no longer necessary to continue printing the sprite
   2331 E1            [10] 6161 	pop	hl
   2332 E5            [11] 6162 	push	hl
   2333 36 00         [10] 6163 	ld	(hl), #0x00
   2335 18 18         [12] 6164 	jr	00108$
   2337                    6165 00106$:
                           6166 ;src/main.c:1391: else if (ctMainLoop % 5 == 0)
   2337 C5            [11] 6167 	push	bc
   2338 21 05 00      [10] 6168 	ld	hl, #0x0005
   233B E5            [11] 6169 	push	hl
   233C 2Ar21r00      [16] 6170 	ld	hl, (_ctMainLoop)
   233F E5            [11] 6171 	push	hl
   2340 CDr00r00      [17] 6172 	call	__modsint
   2343 F1            [10] 6173 	pop	af
   2344 F1            [10] 6174 	pop	af
   2345 C1            [10] 6175 	pop	bc
   2346 7C            [ 4] 6176 	ld	a, h
   2347 B5            [ 4] 6177 	or	a,l
   2348 20 05         [12] 6178 	jr	NZ,00108$
                           6179 ;src/main.c:1392: PrintSprite(pSpr);
   234A 69            [ 4] 6180 	ld	l, c
   234B 60            [ 4] 6181 	ld	h, b
   234C CDr9Er18      [17] 6182 	call	_PrintSprite
   234F                    6183 00108$:
   234F DD F9         [10] 6184 	ld	sp, ix
   2351 DD E1         [14] 6185 	pop	ix
   2353 C9            [10] 6186 	ret
                           6187 ;src/main.c:1409: void ExplodePlayerInDuel(u8 player) __z88dk_fastcall {
                           6188 ;	---------------------------------
                           6189 ; Function ExplodePlayerInDuel
                           6190 ; ---------------------------------
   2354                    6191 _ExplodePlayerInDuel::
   2354 DD E5         [15] 6192 	push	ix
   2356 DD 21 00 00   [14] 6193 	ld	ix,#0
   235A DD 39         [15] 6194 	add	ix,sp
   235C 3B            [ 6] 6195 	dec	sp
   235D DD 75 FF      [19] 6196 	ld	-1 (ix), l
                           6197 ;src/main.c:1410: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, spr[player].x, 122), cpct_px2byteM0(4, 4), SPR_W, SPR_H);
   2360 21 04 04      [10] 6198 	ld	hl, #0x0404
   2363 E5            [11] 6199 	push	hl
   2364 CDr00r00      [17] 6200 	call	_cpct_px2byteM0
   2367 4D            [ 4] 6201 	ld	c, l
   2368 06 00         [ 7] 6202 	ld	b, #0x00
   236A DD 5E FF      [19] 6203 	ld	e,-1 (ix)
   236D 16 00         [ 7] 6204 	ld	d,#0x00
   236F 6B            [ 4] 6205 	ld	l, e
   2370 62            [ 4] 6206 	ld	h, d
   2371 29            [11] 6207 	add	hl, hl
   2372 19            [11] 6208 	add	hl, de
   2373 29            [11] 6209 	add	hl, hl
   2374 19            [11] 6210 	add	hl, de
   2375 29            [11] 6211 	add	hl, hl
   2376 19            [11] 6212 	add	hl, de
   2377 11r39r00      [10] 6213 	ld	de, #_spr
   237A 19            [11] 6214 	add	hl, de
   237B 23            [ 6] 6215 	inc	hl
   237C 23            [ 6] 6216 	inc	hl
   237D 7E            [ 7] 6217 	ld	a, (hl)
   237E C6 B0         [ 7] 6218 	add	a, #0xb0
   2380 5F            [ 4] 6219 	ld	e, a
   2381 3E 00         [ 7] 6220 	ld	a, #0x00
   2383 CE D4         [ 7] 6221 	adc	a, #0xd4
   2385 57            [ 4] 6222 	ld	d, a
   2386 D5            [11] 6223 	push	de
   2387 FD E1         [14] 6224 	pop	iy
   2389 E5            [11] 6225 	push	hl
   238A 11 05 0C      [10] 6226 	ld	de, #0x0c05
   238D D5            [11] 6227 	push	de
   238E C5            [11] 6228 	push	bc
   238F FD E5         [15] 6229 	push	iy
   2391 CDr00r00      [17] 6230 	call	_cpct_drawSolidBox
   2394 AF            [ 4] 6231 	xor	a, a
   2395 F5            [11] 6232 	push	af
   2396 33            [ 6] 6233 	inc	sp
   2397 DD 7E FF      [19] 6234 	ld	a, -1 (ix)
   239A F5            [11] 6235 	push	af
   239B 33            [ 6] 6236 	inc	sp
   239C CDr3Er1C      [17] 6237 	call	_ExplodeSprite
   239F F1            [10] 6238 	pop	af
   23A0 01 04 04      [10] 6239 	ld	bc, #0x0404
   23A3 C5            [11] 6240 	push	bc
   23A4 CDr00r00      [17] 6241 	call	_cpct_px2byteM0
   23A7 4D            [ 4] 6242 	ld	c, l
   23A8 E1            [10] 6243 	pop	hl
   23A9 06 00         [ 7] 6244 	ld	b, #0x00
   23AB 5E            [ 7] 6245 	ld	e, (hl)
   23AC 21 B0 D4      [10] 6246 	ld	hl, #0xd4b0
   23AF 16 00         [ 7] 6247 	ld	d, #0x00
   23B1 19            [11] 6248 	add	hl, de
   23B2 11 05 0C      [10] 6249 	ld	de, #0x0c05
   23B5 D5            [11] 6250 	push	de
   23B6 C5            [11] 6251 	push	bc
   23B7 E5            [11] 6252 	push	hl
   23B8 CDr00r00      [17] 6253 	call	_cpct_drawSolidBox
   23BB 33            [ 6] 6254 	inc	sp
   23BC DD E1         [14] 6255 	pop	ix
   23BE C9            [10] 6256 	ret
                           6257 ;src/main.c:1417: void MakeDuel() {
                           6258 ;	---------------------------------
                           6259 ; Function MakeDuel
                           6260 ; ---------------------------------
   23BF                    6261 _MakeDuel::
   23BF DD E5         [15] 6262 	push	ix
   23C1 DD 21 00 00   [14] 6263 	ld	ix,#0
   23C5 DD 39         [15] 6264 	add	ix,sp
   23C7 F5            [11] 6265 	push	af
   23C8 3B            [ 6] 6266 	dec	sp
                           6267 ;src/main.c:1420: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 18, 80), cpct_px2byteM0(4, 4), 45, 60);
   23C9 21 04 04      [10] 6268 	ld	hl, #0x0404
   23CC E5            [11] 6269 	push	hl
   23CD CDr00r00      [17] 6270 	call	_cpct_px2byteM0
   23D0 26 00         [ 7] 6271 	ld	h, #0x00
   23D2 01 2D 3C      [10] 6272 	ld	bc, #0x3c2d
   23D5 C5            [11] 6273 	push	bc
   23D6 E5            [11] 6274 	push	hl
   23D7 21 32 C3      [10] 6275 	ld	hl, #0xc332
   23DA E5            [11] 6276 	push	hl
   23DB CDr00r00      [17] 6277 	call	_cpct_drawSolidBox
                           6278 ;src/main.c:1421: PrintFrame(18,80,60,134);
   23DE 21 3C 86      [10] 6279 	ld	hl, #0x863c
   23E1 E5            [11] 6280 	push	hl
   23E2 21 12 50      [10] 6281 	ld	hl, #0x5012
   23E5 E5            [11] 6282 	push	hl
   23E6 CDr1Dr04      [17] 6283 	call	_PrintFrame
   23E9 F1            [10] 6284 	pop	af
   23EA F1            [10] 6285 	pop	af
                           6286 ;src/main.c:1423: spr[0].x = 23; spr[0].y = 122;
   23EB 21r3Br00      [10] 6287 	ld	hl, #(_spr + 0x0002)
   23EE 36 17         [10] 6288 	ld	(hl), #0x17
   23F0 21r3Cr00      [10] 6289 	ld	hl, #(_spr + 0x0003)
   23F3 36 7A         [10] 6290 	ld	(hl), #0x7a
                           6291 ;src/main.c:1425: cpct_getScreenPtr(CPCT_VMEM_START, spr[0].x, spr[0].y), SPR_W, SPR_H, g_maskTable);
   23F5 21r3Cr00      [10] 6292 	ld	hl, #(_spr + 0x0003) + 0
   23F8 56            [ 7] 6293 	ld	d, (hl)
   23F9 21r3Br00      [10] 6294 	ld	hl, #(_spr + 0x0002) + 0
   23FC 5E            [ 7] 6295 	ld	e, (hl)
   23FD D5            [11] 6296 	push	de
   23FE 21 00 C0      [10] 6297 	ld	hl, #0xc000
   2401 E5            [11] 6298 	push	hl
   2402 CDr00r00      [17] 6299 	call	_cpct_getScreenPtr
   2405 4D            [ 4] 6300 	ld	c, l
   2406 44            [ 4] 6301 	ld	b, h
                           6302 ;src/main.c:1424: cpct_drawSpriteMaskedAlignedTable(g_sorcerer1_06,
   2407 21r00r01      [10] 6303 	ld	hl, #_g_maskTable
   240A E5            [11] 6304 	push	hl
   240B 21 05 0C      [10] 6305 	ld	hl, #0x0c05
   240E E5            [11] 6306 	push	hl
   240F C5            [11] 6307 	push	bc
   2410 21r00r00      [10] 6308 	ld	hl, #_g_sorcerer1_06
   2413 E5            [11] 6309 	push	hl
   2414 CDr00r00      [17] 6310 	call	_cpct_drawSpriteMaskedAlignedTable
                           6311 ;src/main.c:1427: spr[1].x = 53; spr[1].y = 122;
   2417 21r4Ar00      [10] 6312 	ld	hl, #(_spr + 0x0011)
   241A 36 35         [10] 6313 	ld	(hl), #0x35
   241C 21r4Br00      [10] 6314 	ld	hl, #(_spr + 0x0012)
   241F 36 7A         [10] 6315 	ld	(hl), #0x7a
                           6316 ;src/main.c:1430: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, spr[1].y), SPR_W, SPR_H, g_maskTable);
   2421 3Ar4Br00      [13] 6317 	ld	a,(#(_spr + 0x0012) + 0)
   2424 DD 77 FE      [19] 6318 	ld	-2 (ix), a
   2427 3Ar4Ar00      [13] 6319 	ld	a,(#(_spr + 0x0011) + 0)
   242A DD 77 FF      [19] 6320 	ld	-1 (ix), a
                           6321 ;src/main.c:1428: if (TwoPlayers) {
   242D 3Ar04r00      [13] 6322 	ld	a,(#_TwoPlayers + 0)
   2430 B7            [ 4] 6323 	or	a, a
   2431 28 20         [12] 6324 	jr	Z,00102$
                           6325 ;src/main.c:1430: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, spr[1].y), SPR_W, SPR_H, g_maskTable);
   2433 DD 66 FE      [19] 6326 	ld	h, -2 (ix)
   2436 DD 6E FF      [19] 6327 	ld	l, -1 (ix)
   2439 E5            [11] 6328 	push	hl
   243A 21 00 C0      [10] 6329 	ld	hl, #0xc000
   243D E5            [11] 6330 	push	hl
   243E CDr00r00      [17] 6331 	call	_cpct_getScreenPtr
                           6332 ;src/main.c:1429: cpct_drawSpriteMaskedAlignedTable(g_sorcerer2_04, 
   2441 01r00r00      [10] 6333 	ld	bc, #_g_sorcerer2_04+0
   2444 11r00r01      [10] 6334 	ld	de, #_g_maskTable
   2447 D5            [11] 6335 	push	de
   2448 11 05 0C      [10] 6336 	ld	de, #0x0c05
   244B D5            [11] 6337 	push	de
   244C E5            [11] 6338 	push	hl
   244D C5            [11] 6339 	push	bc
   244E CDr00r00      [17] 6340 	call	_cpct_drawSpriteMaskedAlignedTable
   2451 18 1E         [12] 6341 	jr	00103$
   2453                    6342 00102$:
                           6343 ;src/main.c:1435: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, spr[1].y), SPR_W, SPR_H, g_maskTable);
   2453 DD 66 FE      [19] 6344 	ld	h, -2 (ix)
   2456 DD 6E FF      [19] 6345 	ld	l, -1 (ix)
   2459 E5            [11] 6346 	push	hl
   245A 21 00 C0      [10] 6347 	ld	hl, #0xc000
   245D E5            [11] 6348 	push	hl
   245E CDr00r00      [17] 6349 	call	_cpct_getScreenPtr
                           6350 ;src/main.c:1434: cpct_drawSpriteMaskedAlignedTable(g_door_0, 
   2461 01r00r00      [10] 6351 	ld	bc, #_g_door_0+0
   2464 11r00r01      [10] 6352 	ld	de, #_g_maskTable
   2467 D5            [11] 6353 	push	de
   2468 11 05 0C      [10] 6354 	ld	de, #0x0c05
   246B D5            [11] 6355 	push	de
   246C E5            [11] 6356 	push	hl
   246D C5            [11] 6357 	push	bc
   246E CDr00r00      [17] 6358 	call	_cpct_drawSpriteMaskedAlignedTable
   2471                    6359 00103$:
                           6360 ;src/main.c:1437: Pause(400);
   2471 21 90 01      [10] 6361 	ld	hl, #0x0190
   2474 CDrFEr01      [17] 6362 	call	_Pause
                           6363 ;src/main.c:1441: cpct_getScreenPtr(CPCT_VMEM_START, spr[0].x, spr[0].y), SPR_W, SPR_H, g_maskTable);
   2477 21r3Cr00      [10] 6364 	ld	hl, #(_spr + 0x0003) + 0
   247A 56            [ 7] 6365 	ld	d, (hl)
   247B 21r3Br00      [10] 6366 	ld	hl, #(_spr + 0x0002) + 0
   247E 5E            [ 7] 6367 	ld	e, (hl)
   247F D5            [11] 6368 	push	de
   2480 21 00 C0      [10] 6369 	ld	hl, #0xc000
   2483 E5            [11] 6370 	push	hl
   2484 CDr00r00      [17] 6371 	call	_cpct_getScreenPtr
                           6372 ;src/main.c:1440: cpct_drawSpriteMaskedAlignedTable(g_sorcerer1_08, 
   2487 01r00r00      [10] 6373 	ld	bc, #_g_sorcerer1_08+0
   248A 11r00r01      [10] 6374 	ld	de, #_g_maskTable
   248D D5            [11] 6375 	push	de
   248E 11 05 0C      [10] 6376 	ld	de, #0x0c05
   2491 D5            [11] 6377 	push	de
   2492 E5            [11] 6378 	push	hl
   2493 C5            [11] 6379 	push	bc
   2494 CDr00r00      [17] 6380 	call	_cpct_drawSpriteMaskedAlignedTable
                           6381 ;src/main.c:1442: spr[0].x += OBJ_W;
   2497 3Ar3Br00      [13] 6382 	ld	a, (#(_spr + 0x0002) + 0)
   249A C6 04         [ 7] 6383 	add	a, #0x04
   249C 32r3Br00      [13] 6384 	ld	(#(_spr + 0x0002)),a
                           6385 ;src/main.c:1443: if (TwoPlayers) {
   249F 3Ar04r00      [13] 6386 	ld	a,(#_TwoPlayers + 0)
   24A2 B7            [ 4] 6387 	or	a, a
   24A3 28 28         [12] 6388 	jr	Z,00148$
                           6389 ;src/main.c:1445: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, spr[1].y), SPR_W, SPR_H, g_maskTable);
   24A5 21r4Br00      [10] 6390 	ld	hl, #(_spr + 0x0012) + 0
   24A8 56            [ 7] 6391 	ld	d, (hl)
   24A9 21r4Ar00      [10] 6392 	ld	hl, #(_spr + 0x0011) + 0
   24AC 5E            [ 7] 6393 	ld	e, (hl)
   24AD D5            [11] 6394 	push	de
   24AE 21 00 C0      [10] 6395 	ld	hl, #0xc000
   24B1 E5            [11] 6396 	push	hl
   24B2 CDr00r00      [17] 6397 	call	_cpct_getScreenPtr
                           6398 ;src/main.c:1444: cpct_drawSpriteMaskedAlignedTable(g_sorcerer2_08, 
   24B5 01r00r00      [10] 6399 	ld	bc, #_g_sorcerer2_08+0
   24B8 11r00r01      [10] 6400 	ld	de, #_g_maskTable
   24BB D5            [11] 6401 	push	de
   24BC 11 05 0C      [10] 6402 	ld	de, #0x0c05
   24BF D5            [11] 6403 	push	de
   24C0 E5            [11] 6404 	push	hl
   24C1 C5            [11] 6405 	push	bc
   24C2 CDr00r00      [17] 6406 	call	_cpct_drawSpriteMaskedAlignedTable
                           6407 ;src/main.c:1446: spr[1].x -= OBJ_W;
   24C5 3Ar4Ar00      [13] 6408 	ld	a, (#(_spr + 0x0011) + 0)
   24C8 C6 FC         [ 7] 6409 	add	a, #0xfc
   24CA 32r4Ar00      [13] 6410 	ld	(#(_spr + 0x0011)),a
                           6411 ;src/main.c:1450: while (spr[0].x < 50)
   24CD                    6412 00148$:
   24CD                    6413 00110$:
                           6414 ;src/main.c:1425: cpct_getScreenPtr(CPCT_VMEM_START, spr[0].x, spr[0].y), SPR_W, SPR_H, g_maskTable);
   24CD 21r3Br00      [10] 6415 	ld	hl, #(_spr + 0x0002) + 0
   24D0 4E            [ 7] 6416 	ld	c, (hl)
                           6417 ;src/main.c:1450: while (spr[0].x < 50)
   24D1 79            [ 4] 6418 	ld	a, c
   24D2 D6 32         [ 7] 6419 	sub	a, #0x32
   24D4 D2r70r25      [10] 6420 	jp	NC, 00112$
                           6421 ;src/main.c:1453: spr[0].x ++;
   24D7 41            [ 4] 6422 	ld	b, c
   24D8 04            [ 4] 6423 	inc	b
   24D9 21r3Br00      [10] 6424 	ld	hl, #(_spr + 0x0002)
   24DC 70            [ 7] 6425 	ld	(hl), b
                           6426 ;src/main.c:1455: cpct_getScreenPtr(CPCT_VMEM_START, spr[0].x, 125), SHT_W, SHT_H, g_maskTable);
   24DD 3E 7D         [ 7] 6427 	ld	a, #0x7d
   24DF F5            [11] 6428 	push	af
   24E0 33            [ 6] 6429 	inc	sp
   24E1 C5            [11] 6430 	push	bc
   24E2 33            [ 6] 6431 	inc	sp
   24E3 21 00 C0      [10] 6432 	ld	hl, #0xc000
   24E6 E5            [11] 6433 	push	hl
   24E7 CDr00r00      [17] 6434 	call	_cpct_getScreenPtr
                           6435 ;src/main.c:1454: cpct_drawSpriteMaskedAlignedTable(g_magic_0, 
   24EA 01r00r01      [10] 6436 	ld	bc, #_g_maskTable
   24ED C5            [11] 6437 	push	bc
   24EE 01 04 08      [10] 6438 	ld	bc, #0x0804
   24F1 C5            [11] 6439 	push	bc
   24F2 E5            [11] 6440 	push	hl
   24F3 21r00r00      [10] 6441 	ld	hl, #_g_magic_0
   24F6 E5            [11] 6442 	push	hl
   24F7 CDr00r00      [17] 6443 	call	_cpct_drawSpriteMaskedAlignedTable
                           6444 ;src/main.c:1456: if (TwoPlayers) {
   24FA 3Ar04r00      [13] 6445 	ld	a,(#_TwoPlayers + 0)
   24FD B7            [ 4] 6446 	or	a, a
   24FE 28 26         [12] 6447 	jr	Z,00107$
                           6448 ;src/main.c:1457: spr[1].x --;
   2500 21r4Ar00      [10] 6449 	ld	hl, #(_spr + 0x0011) + 0
   2503 46            [ 7] 6450 	ld	b, (hl)
   2504 05            [ 4] 6451 	dec	b
   2505 21r4Ar00      [10] 6452 	ld	hl, #(_spr + 0x0011)
   2508 70            [ 7] 6453 	ld	(hl), b
                           6454 ;src/main.c:1459: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, 125), SHT_W, SHT_H, g_maskTable);
   2509 3E 7D         [ 7] 6455 	ld	a, #0x7d
   250B F5            [11] 6456 	push	af
   250C 33            [ 6] 6457 	inc	sp
   250D C5            [11] 6458 	push	bc
   250E 33            [ 6] 6459 	inc	sp
   250F 21 00 C0      [10] 6460 	ld	hl, #0xc000
   2512 E5            [11] 6461 	push	hl
   2513 CDr00r00      [17] 6462 	call	_cpct_getScreenPtr
                           6463 ;src/main.c:1458: cpct_drawSpriteMaskedAlignedTable(g_magic_1, 
   2516 01r00r01      [10] 6464 	ld	bc, #_g_maskTable
   2519 C5            [11] 6465 	push	bc
   251A 01 04 08      [10] 6466 	ld	bc, #0x0804
   251D C5            [11] 6467 	push	bc
   251E E5            [11] 6468 	push	hl
   251F 21r00r00      [10] 6469 	ld	hl, #_g_magic_1
   2522 E5            [11] 6470 	push	hl
   2523 CDr00r00      [17] 6471 	call	_cpct_drawSpriteMaskedAlignedTable
   2526                    6472 00107$:
                           6473 ;src/main.c:1461: Pause(12);
   2526 21 0C 00      [10] 6474 	ld	hl, #0x000c
   2529 CDrFEr01      [17] 6475 	call	_Pause
                           6476 ;src/main.c:1464: cpct_px2byteM0(4, 4), OBJ_W, OBJ_H);
   252C 21 04 04      [10] 6477 	ld	hl, #0x0404
   252F E5            [11] 6478 	push	hl
   2530 CDr00r00      [17] 6479 	call	_cpct_px2byteM0
   2533 4D            [ 4] 6480 	ld	c, l
   2534 06 00         [ 7] 6481 	ld	b, #0x00
                           6482 ;src/main.c:1463: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, spr[0].x, 125), 
   2536 21r3Br00      [10] 6483 	ld	hl, #(_spr + 0x0002) + 0
   2539 5E            [ 7] 6484 	ld	e, (hl)
   253A 21 B0 EC      [10] 6485 	ld	hl, #0xecb0
   253D 16 00         [ 7] 6486 	ld	d, #0x00
   253F 19            [11] 6487 	add	hl, de
   2540 11 04 08      [10] 6488 	ld	de, #0x0804
   2543 D5            [11] 6489 	push	de
   2544 C5            [11] 6490 	push	bc
   2545 E5            [11] 6491 	push	hl
   2546 CDr00r00      [17] 6492 	call	_cpct_drawSolidBox
                           6493 ;src/main.c:1465: if (TwoPlayers)
   2549 3Ar04r00      [13] 6494 	ld	a,(#_TwoPlayers + 0)
   254C B7            [ 4] 6495 	or	a, a
   254D CArCDr24      [10] 6496 	jp	Z, 00110$
                           6497 ;src/main.c:1467: cpct_px2byteM0(4, 4), OBJ_W, OBJ_H);
   2550 21 04 04      [10] 6498 	ld	hl, #0x0404
   2553 E5            [11] 6499 	push	hl
   2554 CDr00r00      [17] 6500 	call	_cpct_px2byteM0
   2557 4D            [ 4] 6501 	ld	c, l
   2558 06 00         [ 7] 6502 	ld	b, #0x00
                           6503 ;src/main.c:1466: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, spr[1].x, 125), 
   255A 21r4Ar00      [10] 6504 	ld	hl, #(_spr + 0x0011) + 0
   255D 5E            [ 7] 6505 	ld	e, (hl)
   255E 21 B0 EC      [10] 6506 	ld	hl, #0xecb0
   2561 16 00         [ 7] 6507 	ld	d, #0x00
   2563 19            [11] 6508 	add	hl, de
   2564 11 04 08      [10] 6509 	ld	de, #0x0804
   2567 D5            [11] 6510 	push	de
   2568 C5            [11] 6511 	push	bc
   2569 E5            [11] 6512 	push	hl
   256A CDr00r00      [17] 6513 	call	_cpct_drawSolidBox
   256D C3rCDr24      [10] 6514 	jp	00110$
   2570                    6515 00112$:
                           6516 ;src/main.c:1471: spr[0].x = 23;
   2570 21r3Br00      [10] 6517 	ld	hl, #(_spr + 0x0002)
   2573 36 17         [10] 6518 	ld	(hl), #0x17
                           6519 ;src/main.c:1473: cpct_getScreenPtr(CPCT_VMEM_START, spr[0].x, spr[0].y), SPR_W, SPR_H, g_maskTable);
   2575 21r3Cr00      [10] 6520 	ld	hl, #(_spr + 0x0003) + 0
   2578 46            [ 7] 6521 	ld	b, (hl)
   2579 21r3Br00      [10] 6522 	ld	hl, #(_spr + 0x0002) + 0
   257C 4E            [ 7] 6523 	ld	c, (hl)
   257D C5            [11] 6524 	push	bc
   257E 21 00 C0      [10] 6525 	ld	hl, #0xc000
   2581 E5            [11] 6526 	push	hl
   2582 CDr00r00      [17] 6527 	call	_cpct_getScreenPtr
                           6528 ;src/main.c:1472: cpct_drawSpriteMaskedAlignedTable(g_sorcerer1_06, 
   2585 01r00r01      [10] 6529 	ld	bc, #_g_maskTable
   2588 C5            [11] 6530 	push	bc
   2589 01 05 0C      [10] 6531 	ld	bc, #0x0c05
   258C C5            [11] 6532 	push	bc
   258D E5            [11] 6533 	push	hl
   258E 21r00r00      [10] 6534 	ld	hl, #_g_sorcerer1_06
   2591 E5            [11] 6535 	push	hl
   2592 CDr00r00      [17] 6536 	call	_cpct_drawSpriteMaskedAlignedTable
                           6537 ;src/main.c:1474: spr[1].x = 53;
   2595 21r4Ar00      [10] 6538 	ld	hl, #(_spr + 0x0011)
   2598 36 35         [10] 6539 	ld	(hl), #0x35
                           6540 ;src/main.c:1476: if (TwoPlayers) {
   259A 3Ar04r00      [13] 6541 	ld	a,(#_TwoPlayers + 0)
   259D B7            [ 4] 6542 	or	a, a
   259E 28 20         [12] 6543 	jr	Z,00114$
                           6544 ;src/main.c:1478: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, spr[1].y), SPR_W, SPR_H, g_maskTable);
   25A0 21r4Br00      [10] 6545 	ld	hl, #(_spr + 0x0012) + 0
   25A3 46            [ 7] 6546 	ld	b, (hl)
   25A4 21r4Ar00      [10] 6547 	ld	hl, #(_spr + 0x0011) + 0
   25A7 4E            [ 7] 6548 	ld	c, (hl)
   25A8 C5            [11] 6549 	push	bc
   25A9 21 00 C0      [10] 6550 	ld	hl, #0xc000
   25AC E5            [11] 6551 	push	hl
   25AD CDr00r00      [17] 6552 	call	_cpct_getScreenPtr
                           6553 ;src/main.c:1477: cpct_drawSpriteMaskedAlignedTable(g_sorcerer2_04, 
   25B0 01r00r00      [10] 6554 	ld	bc, #_g_sorcerer2_04+0
   25B3 11r00r01      [10] 6555 	ld	de, #_g_maskTable
   25B6 D5            [11] 6556 	push	de
   25B7 11 05 0C      [10] 6557 	ld	de, #0x0c05
   25BA D5            [11] 6558 	push	de
   25BB E5            [11] 6559 	push	hl
   25BC C5            [11] 6560 	push	bc
   25BD CDr00r00      [17] 6561 	call	_cpct_drawSpriteMaskedAlignedTable
   25C0                    6562 00114$:
                           6563 ;src/main.c:1482: if (potScore[0] > potScore[1]) {
   25C0 21r0Br00      [10] 6564 	ld	hl, #_potScore+0
   25C3 4E            [ 7] 6565 	ld	c, (hl)
   25C4 23            [ 6] 6566 	inc	hl
   25C5 5E            [ 7] 6567 	ld	e, (hl)
   25C6 7B            [ 4] 6568 	ld	a, e
   25C7 91            [ 4] 6569 	sub	a, c
   25C8 D2r48r26      [10] 6570 	jp	NC, 00126$
                           6571 ;src/main.c:1483: loser = 1;
   25CB DD 36 FD 01   [19] 6572 	ld	-3 (ix), #0x01
                           6573 ;src/main.c:1484: ExplodePlayerInDuel(loser);
   25CF 2E 01         [ 7] 6574 	ld	l, #0x01
   25D1 CDr54r23      [17] 6575 	call	_ExplodePlayerInDuel
                           6576 ;src/main.c:1430: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, spr[1].y), SPR_W, SPR_H, g_maskTable);
   25D4 21r4Br00      [10] 6577 	ld	hl, #(_spr + 0x0012) + 0
   25D7 4E            [ 7] 6578 	ld	c, (hl)
   25D8 21r4Ar00      [10] 6579 	ld	hl, #(_spr + 0x0011) + 0
   25DB 5E            [ 7] 6580 	ld	e, (hl)
                           6581 ;src/main.c:1485: if (TwoPlayers) {
   25DC 3Ar04r00      [13] 6582 	ld	a,(#_TwoPlayers + 0)
   25DF B7            [ 4] 6583 	or	a, a
   25E0 28 39         [12] 6584 	jr	Z,00118$
                           6585 ;src/main.c:1488: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, spr[1].y), SPR_W, SPR_H, g_maskTable);
   25E2 51            [ 4] 6586 	ld	d, c
   25E3 D5            [11] 6587 	push	de
   25E4 21 00 C0      [10] 6588 	ld	hl, #0xc000
   25E7 E5            [11] 6589 	push	hl
   25E8 CDr00r00      [17] 6590 	call	_cpct_getScreenPtr
                           6591 ;src/main.c:1487: cpct_drawSpriteMaskedAlignedTable(g_sorcerer2_09, 
   25EB 01r00r00      [10] 6592 	ld	bc, #_g_sorcerer2_09+0
   25EE 11r00r01      [10] 6593 	ld	de, #_g_maskTable
   25F1 D5            [11] 6594 	push	de
   25F2 11 05 0C      [10] 6595 	ld	de, #0x0c05
   25F5 D5            [11] 6596 	push	de
   25F6 E5            [11] 6597 	push	hl
   25F7 C5            [11] 6598 	push	bc
   25F8 CDr00r00      [17] 6599 	call	_cpct_drawSpriteMaskedAlignedTable
                           6600 ;src/main.c:1489: PrintText("PLAYER1", 30, 90, 0);
   25FB 21 5A 00      [10] 6601 	ld	hl, #0x005a
   25FE E5            [11] 6602 	push	hl
   25FF 3E 1E         [ 7] 6603 	ld	a, #0x1e
   2601 F5            [11] 6604 	push	af
   2602 33            [ 6] 6605 	inc	sp
   2603 21r32r27      [10] 6606 	ld	hl, #___str_29
   2606 E5            [11] 6607 	push	hl
   2607 CDr7Ar03      [17] 6608 	call	_PrintText
   260A F1            [10] 6609 	pop	af
   260B F1            [10] 6610 	pop	af
   260C 33            [ 6] 6611 	inc	sp
                           6612 ;src/main.c:1492: if (spr[0].lives_speed < 9) spr[0].lives_speed++;
   260D 01r44r00      [10] 6613 	ld	bc, #_spr + 11
   2610 0A            [ 7] 6614 	ld	a, (bc)
   2611 FE 09         [ 7] 6615 	cp	a, #0x09
   2613 D2rA9r26      [10] 6616 	jp	NC, 00127$
   2616 3C            [ 4] 6617 	inc	a
   2617 02            [ 7] 6618 	ld	(bc), a
   2618 C3rA9r26      [10] 6619 	jp	00127$
   261B                    6620 00118$:
                           6621 ;src/main.c:1497: cpct_getScreenPtr(CPCT_VMEM_START, spr[1].x, spr[1].y), SPR_W, SPR_H, g_maskTable);
   261B 51            [ 4] 6622 	ld	d, c
   261C D5            [11] 6623 	push	de
   261D 21 00 C0      [10] 6624 	ld	hl, #0xc000
   2620 E5            [11] 6625 	push	hl
   2621 CDr00r00      [17] 6626 	call	_cpct_getScreenPtr
                           6627 ;src/main.c:1496: cpct_drawSpriteMaskedAlignedTable(g_door_1, 
   2624 01r00r00      [10] 6628 	ld	bc, #_g_door_1+0
   2627 11r00r01      [10] 6629 	ld	de, #_g_maskTable
   262A D5            [11] 6630 	push	de
   262B 11 05 0C      [10] 6631 	ld	de, #0x0c05
   262E D5            [11] 6632 	push	de
   262F E5            [11] 6633 	push	hl
   2630 C5            [11] 6634 	push	bc
   2631 CDr00r00      [17] 6635 	call	_cpct_drawSpriteMaskedAlignedTable
                           6636 ;src/main.c:1498: PrintText("LEVEL", 33, 90, 0);
   2634 21 5A 00      [10] 6637 	ld	hl, #0x005a
   2637 E5            [11] 6638 	push	hl
   2638 3E 21         [ 7] 6639 	ld	a, #0x21
   263A F5            [11] 6640 	push	af
   263B 33            [ 6] 6641 	inc	sp
   263C 21r3Ar27      [10] 6642 	ld	hl, #___str_30
   263F E5            [11] 6643 	push	hl
   2640 CDr7Ar03      [17] 6644 	call	_PrintText
   2643 F1            [10] 6645 	pop	af
   2644 F1            [10] 6646 	pop	af
   2645 33            [ 6] 6647 	inc	sp
   2646 18 61         [12] 6648 	jr	00127$
   2648                    6649 00126$:
                           6650 ;src/main.c:1502: else if (potScore[0] < potScore[1]) {
   2648 79            [ 4] 6651 	ld	a, c
   2649 93            [ 4] 6652 	sub	a, e
   264A 30 47         [12] 6653 	jr	NC,00123$
                           6654 ;src/main.c:1503: loser = 0;
   264C DD 36 FD 00   [19] 6655 	ld	-3 (ix), #0x00
                           6656 ;src/main.c:1504: ExplodePlayerInDuel(loser);
   2650 2E 00         [ 7] 6657 	ld	l, #0x00
   2652 CDr54r23      [17] 6658 	call	_ExplodePlayerInDuel
                           6659 ;src/main.c:1507: cpct_getScreenPtr(CPCT_VMEM_START, spr[0].x, spr[0].y), SPR_W, SPR_H, g_maskTable);
   2655 21r3Cr00      [10] 6660 	ld	hl, #(_spr + 0x0003) + 0
   2658 56            [ 7] 6661 	ld	d, (hl)
   2659 21r3Br00      [10] 6662 	ld	hl, #(_spr + 0x0002) + 0
   265C 5E            [ 7] 6663 	ld	e, (hl)
   265D D5            [11] 6664 	push	de
   265E 21 00 C0      [10] 6665 	ld	hl, #0xc000
   2661 E5            [11] 6666 	push	hl
   2662 CDr00r00      [17] 6667 	call	_cpct_getScreenPtr
                           6668 ;src/main.c:1506: cpct_drawSpriteMaskedAlignedTable(g_sorcerer1_09, 
   2665 01r00r00      [10] 6669 	ld	bc, #_g_sorcerer1_09+0
   2668 11r00r01      [10] 6670 	ld	de, #_g_maskTable
   266B D5            [11] 6671 	push	de
   266C 11 05 0C      [10] 6672 	ld	de, #0x0c05
   266F D5            [11] 6673 	push	de
   2670 E5            [11] 6674 	push	hl
   2671 C5            [11] 6675 	push	bc
   2672 CDr00r00      [17] 6676 	call	_cpct_drawSpriteMaskedAlignedTable
                           6677 ;src/main.c:1508: PrintText("PLAYER2", 30, 90, 0);
   2675 21 5A 00      [10] 6678 	ld	hl, #0x005a
   2678 E5            [11] 6679 	push	hl
   2679 3E 1E         [ 7] 6680 	ld	a, #0x1e
   267B F5            [11] 6681 	push	af
   267C 33            [ 6] 6682 	inc	sp
   267D 21r40r27      [10] 6683 	ld	hl, #___str_31
   2680 E5            [11] 6684 	push	hl
   2681 CDr7Ar03      [17] 6685 	call	_PrintText
   2684 F1            [10] 6686 	pop	af
   2685 F1            [10] 6687 	pop	af
   2686 33            [ 6] 6688 	inc	sp
                           6689 ;src/main.c:1511: if (spr[1].lives_speed < 9) spr[1].lives_speed++;
   2687 01r53r00      [10] 6690 	ld	bc, #_spr + 26
   268A 0A            [ 7] 6691 	ld	a, (bc)
   268B FE 09         [ 7] 6692 	cp	a, #0x09
   268D 30 1A         [12] 6693 	jr	NC,00127$
   268F 3C            [ 4] 6694 	inc	a
   2690 02            [ 7] 6695 	ld	(bc), a
   2691 18 16         [12] 6696 	jr	00127$
   2693                    6697 00123$:
                           6698 ;src/main.c:1515: PrintText("NOBODY", 32, 90, 0);
   2693 01r48r27      [10] 6699 	ld	bc, #___str_32
   2696 21 5A 00      [10] 6700 	ld	hl, #0x005a
   2699 E5            [11] 6701 	push	hl
   269A 3E 20         [ 7] 6702 	ld	a, #0x20
   269C F5            [11] 6703 	push	af
   269D 33            [ 6] 6704 	inc	sp
   269E C5            [11] 6705 	push	bc
   269F CDr7Ar03      [17] 6706 	call	_PrintText
   26A2 F1            [10] 6707 	pop	af
   26A3 F1            [10] 6708 	pop	af
   26A4 33            [ 6] 6709 	inc	sp
                           6710 ;src/main.c:1516: loser = 2;
   26A5 DD 36 FD 02   [19] 6711 	ld	-3 (ix), #0x02
   26A9                    6712 00127$:
                           6713 ;src/main.c:1518: if (TwoPlayers)
   26A9 3Ar04r00      [13] 6714 	ld	a,(#_TwoPlayers + 0)
   26AC B7            [ 4] 6715 	or	a, a
   26AD 28 14         [12] 6716 	jr	Z,00129$
                           6717 ;src/main.c:1519: PrintText("WINS>", 33, 101, 0);
   26AF 21 65 00      [10] 6718 	ld	hl, #0x0065
   26B2 E5            [11] 6719 	push	hl
   26B3 3E 21         [ 7] 6720 	ld	a, #0x21
   26B5 F5            [11] 6721 	push	af
   26B6 33            [ 6] 6722 	inc	sp
   26B7 21r4Fr27      [10] 6723 	ld	hl, #___str_33
   26BA E5            [11] 6724 	push	hl
   26BB CDr7Ar03      [17] 6725 	call	_PrintText
   26BE F1            [10] 6726 	pop	af
   26BF F1            [10] 6727 	pop	af
   26C0 33            [ 6] 6728 	inc	sp
   26C1 18 12         [12] 6729 	jr	00130$
   26C3                    6730 00129$:
                           6731 ;src/main.c:1521: PrintText("COMPLETED", 27, 101, 0);	
   26C3 21 65 00      [10] 6732 	ld	hl, #0x0065
   26C6 E5            [11] 6733 	push	hl
   26C7 3E 1B         [ 7] 6734 	ld	a, #0x1b
   26C9 F5            [11] 6735 	push	af
   26CA 33            [ 6] 6736 	inc	sp
   26CB 21r55r27      [10] 6737 	ld	hl, #___str_34
   26CE E5            [11] 6738 	push	hl
   26CF CDr7Ar03      [17] 6739 	call	_PrintText
   26D2 F1            [10] 6740 	pop	af
   26D3 F1            [10] 6741 	pop	af
   26D4 33            [ 6] 6742 	inc	sp
   26D5                    6743 00130$:
                           6744 ;src/main.c:1523: Pause(1000);
   26D5 21 E8 03      [10] 6745 	ld	hl, #0x03e8
   26D8 CDrFEr01      [17] 6746 	call	_Pause
                           6747 ;src/main.c:1525: if (loser < 2) // if there is no tie
   26DB DD 7E FD      [19] 6748 	ld	a, -3 (ix)
   26DE D6 02         [ 7] 6749 	sub	a, #0x02
   26E0 3E 00         [ 7] 6750 	ld	a, #0x00
   26E2 17            [ 4] 6751 	rla
   26E3 DD 77 FF      [19] 6752 	ld	-1 (ix), a
   26E6 B7            [ 4] 6753 	or	a, a
   26E7 28 04         [12] 6754 	jr	Z,00132$
                           6755 ;src/main.c:1526: nMap++; // go to the next screen on the map
   26E9 21r00r00      [10] 6756 	ld	hl, #_nMap+0
   26EC 34            [11] 6757 	inc	(hl)
   26ED                    6758 00132$:
                           6759 ;src/main.c:1528: if (nMap == 12) { // screens are over. End of the game
   26ED 3Ar00r00      [13] 6760 	ld	a,(#_nMap + 0)
   26F0 D6 0C         [ 7] 6761 	sub	a, #0x0c
   26F2 20 12         [12] 6762 	jr	NZ,00137$
                           6763 ;src/main.c:1529: if (loser == 0)		
   26F4 DD 7E FD      [19] 6764 	ld	a, -3 (ix)
   26F7 B7            [ 4] 6765 	or	a, a
   26F8 20 07         [12] 6766 	jr	NZ,00134$
                           6767 ;src/main.c:1530: PrintEndGame(1); // player 2 wins
   26FA 2E 01         [ 7] 6768 	ld	l, #0x01
   26FC CDr21r07      [17] 6769 	call	_PrintEndGame
   26FF 18 05         [12] 6770 	jr	00137$
   2701                    6771 00134$:
                           6772 ;src/main.c:1532: PrintEndGame(0); // player 1 wins
   2701 2E 00         [ 7] 6773 	ld	l, #0x00
   2703 CDr21r07      [17] 6774 	call	_PrintEndGame
   2706                    6775 00137$:
                           6776 ;src/main.c:1536: ResetObjData(0);
   2706 2E 00         [ 7] 6777 	ld	l, #0x00
   2708 CDr99r0D      [17] 6778 	call	_ResetObjData
                           6779 ;src/main.c:1537: ResetObjData(1);
   270B 2E 01         [ 7] 6780 	ld	l, #0x01
   270D CDr99r0D      [17] 6781 	call	_ResetObjData
                           6782 ;src/main.c:1538: InitScoreboard();
   2710 CDr15r0B      [17] 6783 	call	_InitScoreboard
                           6784 ;src/main.c:1540: if (loser < 2 && TwoPlayers)
   2713 DD 7E FF      [19] 6785 	ld	a, -1 (ix)
   2716 B7            [ 4] 6786 	or	a, a
   2717 28 11         [12] 6787 	jr	Z,00139$
   2719 3Ar04r00      [13] 6788 	ld	a,(#_TwoPlayers + 0)
   271C B7            [ 4] 6789 	or	a, a
   271D 28 0B         [12] 6790 	jr	Z,00139$
                           6791 ;src/main.c:1541: GameOver(loser); // the player who loses a duel loses a life
   271F DD 7E FD      [19] 6792 	ld	a, -3 (ix)
   2722 F5            [11] 6793 	push	af
   2723 33            [ 6] 6794 	inc	sp
   2724 CDr29r41      [17] 6795 	call	_GameOver
   2727 33            [ 6] 6796 	inc	sp
   2728 18 03         [12] 6797 	jr	00142$
   272A                    6798 00139$:
                           6799 ;src/main.c:1543: ResetData();
   272A CDr4Ar40      [17] 6800 	call	_ResetData
   272D                    6801 00142$:
   272D DD F9         [10] 6802 	ld	sp, ix
   272F DD E1         [14] 6803 	pop	ix
   2731 C9            [10] 6804 	ret
   2732                    6805 ___str_29:
   2732 50 4C 41 59 45 52  6806 	.ascii "PLAYER1"
        31
   2739 00                 6807 	.db 0x00
   273A                    6808 ___str_30:
   273A 4C 45 56 45 4C     6809 	.ascii "LEVEL"
   273F 00                 6810 	.db 0x00
   2740                    6811 ___str_31:
   2740 50 4C 41 59 45 52  6812 	.ascii "PLAYER2"
        32
   2747 00                 6813 	.db 0x00
   2748                    6814 ___str_32:
   2748 4E 4F 42 4F 44 59  6815 	.ascii "NOBODY"
   274E 00                 6816 	.db 0x00
   274F                    6817 ___str_33:
   274F 57 49 4E 53 3E     6818 	.ascii "WINS>"
   2754 00                 6819 	.db 0x00
   2755                    6820 ___str_34:
   2755 43 4F 4D 50 4C 45  6821 	.ascii "COMPLETED"
        54 45 44
   275E 00                 6822 	.db 0x00
                           6823 ;src/main.c:1548: void CheckDuel() {
                           6824 ;	---------------------------------
                           6825 ; Function CheckDuel
                           6826 ; ---------------------------------
   275F                    6827 _CheckDuel::
                           6828 ;src/main.c:1549: if ((spr[0].objNum_mov == 5 || spr[1].objNum_mov == 5) && 
   275F 3Ar45r00      [13] 6829 	ld	a, (#_spr + 12)
   2762 D6 05         [ 7] 6830 	sub	a, #0x05
   2764 28 06         [12] 6831 	jr	Z,00105$
   2766 3Ar54r00      [13] 6832 	ld	a, (#_spr + 27)
   2769 D6 05         [ 7] 6833 	sub	a, #0x05
   276B C0            [11] 6834 	ret	NZ
   276C                    6835 00105$:
                           6836 ;src/main.c:1550: SpriteCollision(spr[0].x, spr[0].y, &spr[1], 0)) {				
   276C 21r3Cr00      [10] 6837 	ld	hl, #_spr + 3
   276F 56            [ 7] 6838 	ld	d, (hl)
   2770 21r3Br00      [10] 6839 	ld	hl, #_spr + 2
   2773 46            [ 7] 6840 	ld	b, (hl)
   2774 AF            [ 4] 6841 	xor	a, a
   2775 F5            [11] 6842 	push	af
   2776 33            [ 6] 6843 	inc	sp
   2777 21r48r00      [10] 6844 	ld	hl, #(_spr + 0x000f)
   277A E5            [11] 6845 	push	hl
   277B 58            [ 4] 6846 	ld	e, b
   277C D5            [11] 6847 	push	de
   277D CDr03r1D      [17] 6848 	call	_SpriteCollision
   2780 F1            [10] 6849 	pop	af
   2781 F1            [10] 6850 	pop	af
   2782 33            [ 6] 6851 	inc	sp
   2783 7D            [ 4] 6852 	ld	a, l
   2784 B7            [ 4] 6853 	or	a, a
   2785 C8            [11] 6854 	ret	Z
                           6855 ;src/main.c:1552: for(u8 i=0;i<6;i++)
   2786 0E 00         [ 7] 6856 	ld	c, #0x00
   2788                    6857 00107$:
   2788 79            [ 4] 6858 	ld	a, c
   2789 D6 06         [ 7] 6859 	sub	a, #0x06
   278B 30 16         [12] 6860 	jr	NC,00101$
                           6861 ;src/main.c:1553: DeleteSprite(&spr[i]);
   278D 06 00         [ 7] 6862 	ld	b,#0x00
   278F 69            [ 4] 6863 	ld	l, c
   2790 60            [ 4] 6864 	ld	h, b
   2791 29            [11] 6865 	add	hl, hl
   2792 09            [11] 6866 	add	hl, bc
   2793 29            [11] 6867 	add	hl, hl
   2794 09            [11] 6868 	add	hl, bc
   2795 29            [11] 6869 	add	hl, hl
   2796 09            [11] 6870 	add	hl, bc
   2797 11r39r00      [10] 6871 	ld	de, #_spr
   279A 19            [11] 6872 	add	hl, de
   279B C5            [11] 6873 	push	bc
   279C CDrCDr18      [17] 6874 	call	_DeleteSprite
   279F C1            [10] 6875 	pop	bc
                           6876 ;src/main.c:1552: for(u8 i=0;i<6;i++)
   27A0 0C            [ 4] 6877 	inc	c
   27A1 18 E5         [12] 6878 	jr	00107$
   27A3                    6879 00101$:
                           6880 ;src/main.c:1554: DeleteObject(0);
   27A3 2E 00         [ 7] 6881 	ld	l, #0x00
   27A5 CDr26r0E      [17] 6882 	call	_DeleteObject
                           6883 ;src/main.c:1555: DeleteObject(1);
   27A8 2E 01         [ 7] 6884 	ld	l, #0x01
   27AA CDr26r0E      [17] 6885 	call	_DeleteObject
                           6886 ;src/main.c:1557: MakeDuel();
   27AD C3rBFr23      [10] 6887 	jp  _MakeDuel
                           6888 ;src/main.c:1575: void MakeShot(u8 x, u8 y, u8 dir) {	
                           6889 ;	---------------------------------
                           6890 ; Function MakeShot
                           6891 ; ---------------------------------
   27B0                    6892 _MakeShot::
                           6893 ;src/main.c:1576: if (sht.active == FALSE) { // if there is no active shot...
   27B0 01rA2r00      [10] 6894 	ld	bc, #_sht+0
   27B3 21 04 00      [10] 6895 	ld	hl, #0x0004
   27B6 09            [11] 6896 	add	hl, bc
   27B7 7E            [ 7] 6897 	ld	a, (hl)
   27B8 B7            [ 4] 6898 	or	a, a
   27B9 C0            [11] 6899 	ret	NZ
                           6900 ;src/main.c:1577: sht.active = TRUE; // activate it
   27BA 36 01         [10] 6901 	ld	(hl), #0x01
                           6902 ;src/main.c:1578: sht.dir = dir; // the direction of the shot is that of the sprite that shoots
   27BC 21rA5r00      [10] 6903 	ld	hl, #(_sht + 0x0003)
   27BF FD 21 04 00   [14] 6904 	ld	iy, #4
   27C3 FD 39         [15] 6905 	add	iy, sp
   27C5 FD 7E 00      [19] 6906 	ld	a, 0 (iy)
   27C8 77            [ 7] 6907 	ld	(hl), a
                           6908 ;src/main.c:1579: sht.y = y + 5; // adjusts to the height of the gun (hand)
   27C9 59            [ 4] 6909 	ld	e, c
   27CA 50            [ 4] 6910 	ld	d, b
   27CB 13            [ 6] 6911 	inc	de
   27CC 21 03 00      [10] 6912 	ld	hl, #3+0
   27CF 39            [11] 6913 	add	hl, sp
   27D0 7E            [ 7] 6914 	ld	a, (hl)
   27D1 C6 05         [ 7] 6915 	add	a, #0x05
   27D3 12            [ 7] 6916 	ld	(de), a
                           6917 ;src/main.c:1581: if (sht.dir == D_right) sht.x = x + SPR_W;
   27D4 21 04 00      [10] 6918 	ld	hl, #4+0
   27D7 39            [11] 6919 	add	hl, sp
   27D8 7E            [ 7] 6920 	ld	a, (hl)
   27D9 D6 03         [ 7] 6921 	sub	a, #0x03
   27DB 20 09         [12] 6922 	jr	NZ,00102$
   27DD 21 02 00      [10] 6923 	ld	hl, #2+0
   27E0 39            [11] 6924 	add	hl, sp
   27E1 7E            [ 7] 6925 	ld	a, (hl)
   27E2 C6 05         [ 7] 6926 	add	a, #0x05
   27E4 02            [ 7] 6927 	ld	(bc), a
   27E5 C9            [10] 6928 	ret
   27E6                    6929 00102$:
                           6930 ;src/main.c:1582: else sht.x = x - SHT_W;
   27E6 21 02 00      [10] 6931 	ld	hl, #2+0
   27E9 39            [11] 6932 	add	hl, sp
   27EA 7E            [ 7] 6933 	ld	a, (hl)
   27EB C6 FC         [ 7] 6934 	add	a, #0xfc
   27ED 02            [ 7] 6935 	ld	(bc), a
   27EE C9            [10] 6936 	ret
                           6937 ;src/main.c:1588: void DeleteShot() {
                           6938 ;	---------------------------------
                           6939 ; Function DeleteShot
                           6940 ; ---------------------------------
   27EF                    6941 _DeleteShot::
   27EF DD E5         [15] 6942 	push	ix
   27F1 DD 21 00 00   [14] 6943 	ld	ix,#0
   27F5 DD 39         [15] 6944 	add	ix,sp
   27F7 F5            [11] 6945 	push	af
   27F8 3B            [ 6] 6946 	dec	sp
                           6947 ;src/main.c:1590: 2 + (sht.px & 1), 2 + (sht.y & 3 ? 1 : 0), 
   27F9 21rA3r00      [10] 6948 	ld	hl, #_sht + 1
   27FC 4E            [ 7] 6949 	ld	c, (hl)
   27FD 79            [ 4] 6950 	ld	a, c
   27FE E6 03         [ 7] 6951 	and	a, #0x03
   2800 28 04         [12] 6952 	jr	Z,00103$
   2802 16 01         [ 7] 6953 	ld	d, #0x01
   2804 18 02         [12] 6954 	jr	00104$
   2806                    6955 00103$:
   2806 16 00         [ 7] 6956 	ld	d, #0x00
   2808                    6957 00104$:
   2808 14            [ 4] 6958 	inc	d
   2809 14            [ 4] 6959 	inc	d
   280A 21rA4r00      [10] 6960 	ld	hl, #_sht + 2
   280D 5E            [ 7] 6961 	ld	e, (hl)
   280E 7B            [ 4] 6962 	ld	a, e
   280F E6 01         [ 7] 6963 	and	a, #0x01
   2811 C6 02         [ 7] 6964 	add	a, #0x02
   2813 DD 77 FF      [19] 6965 	ld	-1 (ix), a
                           6966 ;src/main.c:1589: cpct_etm_drawTileBox2x4(sht.px / 2, (sht.y - ORIG_MAP_Y) / 4, 
   2816 06 00         [ 7] 6967 	ld	b, #0x00
   2818 79            [ 4] 6968 	ld	a, c
   2819 C6 E0         [ 7] 6969 	add	a, #0xe0
   281B DD 77 FD      [19] 6970 	ld	-3 (ix), a
   281E 78            [ 4] 6971 	ld	a, b
   281F CE FF         [ 7] 6972 	adc	a, #0xff
   2821 DD 77 FE      [19] 6973 	ld	-2 (ix), a
   2824 E1            [10] 6974 	pop	hl
   2825 E5            [11] 6975 	push	hl
   2826 DD CB FE 7E   [20] 6976 	bit	7, -2 (ix)
   282A 28 04         [12] 6977 	jr	Z,00105$
   282C 21 E3 FF      [10] 6978 	ld	hl, #0xffe3
   282F 09            [11] 6979 	add	hl, bc
   2830                    6980 00105$:
   2830 CB 2C         [ 8] 6981 	sra	h
   2832 CB 1D         [ 8] 6982 	rr	l
   2834 CB 2C         [ 8] 6983 	sra	h
   2836 CB 1D         [ 8] 6984 	rr	l
   2838 4D            [ 4] 6985 	ld	c, l
   2839 CB 3B         [ 8] 6986 	srl	e
   283B 21 71 0F      [10] 6987 	ld	hl, #0x0f71
   283E E5            [11] 6988 	push	hl
   283F 21 40 C1      [10] 6989 	ld	hl, #0xc140
   2842 E5            [11] 6990 	push	hl
   2843 3E 28         [ 7] 6991 	ld	a, #0x28
   2845 F5            [11] 6992 	push	af
   2846 33            [ 6] 6993 	inc	sp
   2847 D5            [11] 6994 	push	de
   2848 33            [ 6] 6995 	inc	sp
   2849 DD 7E FF      [19] 6996 	ld	a, -1 (ix)
   284C F5            [11] 6997 	push	af
   284D 33            [ 6] 6998 	inc	sp
   284E 51            [ 4] 6999 	ld	d, c
   284F D5            [11] 7000 	push	de
   2850 CDr00r00      [17] 7001 	call	_cpct_etm_drawTileBox2x4
   2853 DD F9         [10] 7002 	ld	sp, ix
   2855 DD E1         [14] 7003 	pop	ix
   2857 C9            [10] 7004 	ret
                           7005 ;src/main.c:1595: void PrintShot(u8* magic) __z88dk_fastcall {
                           7006 ;	---------------------------------
                           7007 ; Function PrintShot
                           7008 ; ---------------------------------
   2858                    7009 _PrintShot::
                           7010 ;src/main.c:1596: DeleteShot(); // delete the previous shot
   2858 E5            [11] 7011 	push	hl
   2859 CDrEFr27      [17] 7012 	call	_DeleteShot
   285C C1            [10] 7013 	pop	bc
                           7014 ;src/main.c:1597: if (!sht.active) return; // outside the margins. no need to print
   285D 3ArA6r00      [13] 7015 	ld	a, (#_sht + 4)
   2860 B7            [ 4] 7016 	or	a, a
   2861 C8            [11] 7017 	ret	Z
                           7018 ;src/main.c:1599: SHT_W, SHT_H, g_maskTable);
                           7019 ;src/main.c:1598: cpct_drawSpriteMaskedAlignedTable(magic, cpct_getScreenPtr(CPCT_VMEM_START, sht.x, sht.y), 
   2862 21rA3r00      [10] 7020 	ld	hl, #_sht + 1
   2865 56            [ 7] 7021 	ld	d, (hl)
   2866 3ArA2r00      [13] 7022 	ld	a, (#_sht + 0)
   2869 C5            [11] 7023 	push	bc
   286A 5F            [ 4] 7024 	ld	e, a
   286B D5            [11] 7025 	push	de
   286C 21 00 C0      [10] 7026 	ld	hl, #0xc000
   286F E5            [11] 7027 	push	hl
   2870 CDr00r00      [17] 7028 	call	_cpct_getScreenPtr
   2873 C1            [10] 7029 	pop	bc
   2874 11r00r01      [10] 7030 	ld	de, #_g_maskTable
   2877 D5            [11] 7031 	push	de
   2878 11 04 08      [10] 7032 	ld	de, #0x0804
   287B D5            [11] 7033 	push	de
   287C E5            [11] 7034 	push	hl
   287D C5            [11] 7035 	push	bc
   287E CDr00r00      [17] 7036 	call	_cpct_drawSpriteMaskedAlignedTable
   2881 C9            [10] 7037 	ret
                           7038 ;src/main.c:1604: void MoveShot() {
                           7039 ;	---------------------------------
                           7040 ; Function MoveShot
                           7041 ; ---------------------------------
   2882                    7042 _MoveShot::
                           7043 ;src/main.c:1605: sht.px = sht.x; // save the current X coordinate
   2882 01rA2r00      [10] 7044 	ld	bc, #_sht+0
   2885 0A            [ 7] 7045 	ld	a, (bc)
   2886 32rA4r00      [13] 7046 	ld	(#(_sht + 0x0002)),a
                           7047 ;src/main.c:1607: if (sht.dir == D_right)	sht.x++; else sht.x--;
   2889 21rA5r00      [10] 7048 	ld	hl, #_sht + 3
   288C 56            [ 7] 7049 	ld	d, (hl)
                           7050 ;src/main.c:1605: sht.px = sht.x; // save the current X coordinate
   288D 0A            [ 7] 7051 	ld	a, (bc)
   288E 5F            [ 4] 7052 	ld	e, a
                           7053 ;src/main.c:1607: if (sht.dir == D_right)	sht.x++; else sht.x--;
   288F 7A            [ 4] 7054 	ld	a, d
   2890 D6 03         [ 7] 7055 	sub	a, #0x03
   2892 20 05         [12] 7056 	jr	NZ,00102$
   2894 1C            [ 4] 7057 	inc	e
   2895 7B            [ 4] 7058 	ld	a, e
   2896 02            [ 7] 7059 	ld	(bc), a
   2897 18 03         [12] 7060 	jr	00103$
   2899                    7061 00102$:
   2899 1D            [ 4] 7062 	dec	e
   289A 7B            [ 4] 7063 	ld	a, e
   289B 02            [ 7] 7064 	ld	(bc), a
   289C                    7065 00103$:
                           7066 ;src/main.c:1605: sht.px = sht.x; // save the current X coordinate
   289C 0A            [ 7] 7067 	ld	a, (bc)
   289D 5F            [ 4] 7068 	ld	e, a
                           7069 ;src/main.c:1609: if (sht.x + SHT_W >= GLOBAL_MAX_X || sht.x <= 0) {
   289E 6B            [ 4] 7070 	ld	l, e
   289F 26 00         [ 7] 7071 	ld	h, #0x00
   28A1 23            [ 6] 7072 	inc	hl
   28A2 23            [ 6] 7073 	inc	hl
   28A3 23            [ 6] 7074 	inc	hl
   28A4 23            [ 6] 7075 	inc	hl
   28A5 7D            [ 4] 7076 	ld	a, l
   28A6 D6 50         [ 7] 7077 	sub	a, #0x50
   28A8 7C            [ 4] 7078 	ld	a, h
   28A9 17            [ 4] 7079 	rla
   28AA 3F            [ 4] 7080 	ccf
   28AB 1F            [ 4] 7081 	rra
   28AC DE 80         [ 7] 7082 	sbc	a, #0x80
   28AE 30 03         [12] 7083 	jr	NC,00104$
   28B0 7B            [ 4] 7084 	ld	a, e
   28B1 B7            [ 4] 7085 	or	a, a
   28B2 C0            [11] 7086 	ret	NZ
   28B3                    7087 00104$:
                           7088 ;src/main.c:1610: sht.active = FALSE;
   28B3 21rA6r00      [10] 7089 	ld	hl, #(_sht + 0x0004)
   28B6 36 00         [10] 7090 	ld	(hl), #0x00
                           7091 ;src/main.c:1611: DeleteShot();
   28B8 C3rEFr27      [10] 7092 	jp  _DeleteShot
                           7093 ;src/main.c:1628: void PrintWizard(u8 shooting) __z88dk_fastcall {
                           7094 ;	---------------------------------
                           7095 ; Function PrintWizard
                           7096 ; ---------------------------------
   28BB                    7097 _PrintWizard::
   28BB 4D            [ 4] 7098 	ld	c, l
                           7099 ;src/main.c:1630: u8 x = 0;
   28BC 1E 00         [ 7] 7100 	ld	e, #0x00
                           7101 ;src/main.c:1632: if (spr[6].dir == D_left) { // on the right bank facing left
   28BE 3Ar9Ar00      [13] 7102 	ld	a, (#_spr + 97)
                           7103 ;src/main.c:1633: if (shooting) wizard = g_wizard_1;
   28C1 D6 02         [ 7] 7104 	sub	a,#0x02
   28C3 20 0F         [12] 7105 	jr	NZ,00108$
   28C5 B1            [ 4] 7106 	or	a,c
   28C6 28 05         [12] 7107 	jr	Z,00102$
   28C8 01r00r00      [10] 7108 	ld	bc, #_g_wizard_1+0
   28CB 18 03         [12] 7109 	jr	00103$
   28CD                    7110 00102$:
                           7111 ;src/main.c:1634: else wizard = g_wizard_0;
   28CD 01r00r00      [10] 7112 	ld	bc, #_g_wizard_0
   28D0                    7113 00103$:
                           7114 ;src/main.c:1635: x = 75;
   28D0 1E 4B         [ 7] 7115 	ld	e, #0x4b
   28D2 18 0C         [12] 7116 	jr	00109$
   28D4                    7117 00108$:
                           7118 ;src/main.c:1638: if (shooting) wizard = g_wizard_3; 
   28D4 79            [ 4] 7119 	ld	a, c
   28D5 B7            [ 4] 7120 	or	a, a
   28D6 28 05         [12] 7121 	jr	Z,00105$
   28D8 01r00r00      [10] 7122 	ld	bc, #_g_wizard_3
   28DB 18 03         [12] 7123 	jr	00109$
   28DD                    7124 00105$:
                           7125 ;src/main.c:1639: else wizard = g_wizard_2;
   28DD 01r00r00      [10] 7126 	ld	bc, #_g_wizard_2
   28E0                    7127 00109$:
                           7128 ;src/main.c:1643: SPR_W, SPR_H, g_maskTable); 							
                           7129 ;src/main.c:1642: cpct_drawSpriteMaskedAlignedTable(wizard, cpct_getScreenPtr(CPCT_VMEM_START, x, spr[6].y), 
   28E0 21r96r00      [10] 7130 	ld	hl, #_spr + 93
   28E3 56            [ 7] 7131 	ld	d, (hl)
   28E4 C5            [11] 7132 	push	bc
   28E5 D5            [11] 7133 	push	de
   28E6 21 00 C0      [10] 7134 	ld	hl, #0xc000
   28E9 E5            [11] 7135 	push	hl
   28EA CDr00r00      [17] 7136 	call	_cpct_getScreenPtr
   28ED C1            [10] 7137 	pop	bc
   28EE 11r00r01      [10] 7138 	ld	de, #_g_maskTable
   28F1 D5            [11] 7139 	push	de
   28F2 11 05 0C      [10] 7140 	ld	de, #0x0c05
   28F5 D5            [11] 7141 	push	de
   28F6 E5            [11] 7142 	push	hl
   28F7 C5            [11] 7143 	push	bc
   28F8 CDr00r00      [17] 7144 	call	_cpct_drawSpriteMaskedAlignedTable
   28FB C9            [10] 7145 	ret
                           7146 ;src/main.c:1648: void WizardAnim() {
                           7147 ;	---------------------------------
                           7148 ; Function WizardAnim
                           7149 ; ---------------------------------
   28FC                    7150 _WizardAnim::
                           7151 ;src/main.c:1649: if (ctWizardAnim > 0) {
   28FC FD 21r20r00   [14] 7152 	ld	iy, #_ctWizardAnim
   2900 FD 7E 00      [19] 7153 	ld	a, 0 (iy)
   2903 B7            [ 4] 7154 	or	a, a
   2904 C8            [11] 7155 	ret	Z
                           7156 ;src/main.c:1650: switch(ctWizardAnim++) {			
   2905 FD 4E 00      [19] 7157 	ld	c, 0 (iy)
   2908 FD 34 00      [23] 7158 	inc	0 (iy)
   290B 79            [ 4] 7159 	ld	a, c
   290C 3D            [ 4] 7160 	dec	a
   290D 28 39         [12] 7161 	jr	Z,00102$
   290F 79            [ 4] 7162 	ld	a,c
   2910 FE 02         [ 7] 7163 	cp	a,#0x02
   2912 28 41         [12] 7164 	jr	Z,00104$
   2914 FE 03         [ 7] 7165 	cp	a,#0x03
   2916 28 4B         [12] 7166 	jr	Z,00106$
   2918 FE 04         [ 7] 7167 	cp	a,#0x04
   291A 28 5A         [12] 7168 	jr	Z,00107$
   291C FE 05         [ 7] 7169 	cp	a,#0x05
   291E 28 61         [12] 7170 	jr	Z,00108$
   2920 FE 06         [ 7] 7171 	cp	a,#0x06
   2922 C8            [11] 7172 	ret	Z
   2923 FE 07         [ 7] 7173 	cp	a,#0x07
   2925 C8            [11] 7174 	ret	Z
   2926 FE 08         [ 7] 7175 	cp	a,#0x08
   2928 C8            [11] 7176 	ret	Z
   2929 FE 09         [ 7] 7177 	cp	a,#0x09
   292B C8            [11] 7178 	ret	Z
   292C FE 0A         [ 7] 7179 	cp	a,#0x0a
   292E C8            [11] 7180 	ret	Z
   292F FE 0B         [ 7] 7181 	cp	a,#0x0b
   2931 C8            [11] 7182 	ret	Z
   2932 FE 0C         [ 7] 7183 	cp	a,#0x0c
   2934 28 63         [12] 7184 	jr	Z,00115$
   2936 FE 1D         [ 7] 7185 	cp	a,#0x1d
   2938 28 0E         [12] 7186 	jr	Z,00102$
   293A FE 1E         [ 7] 7187 	cp	a,#0x1e
   293C 28 17         [12] 7188 	jr	Z,00104$
   293E FE 1F         [ 7] 7189 	cp	a,#0x1f
   2940 28 21         [12] 7190 	jr	Z,00106$
   2942 D6 20         [ 7] 7191 	sub	a, #0x20
   2944 28 5E         [12] 7192 	jr	Z,00116$
   2946 18 68         [12] 7193 	jr	00117$
                           7194 ;src/main.c:1653: case 29:	{ PrintExplosion(&spr[6], 0); break; }
   2948                    7195 00102$:
   2948 AF            [ 4] 7196 	xor	a, a
   2949 F5            [11] 7197 	push	af
   294A 33            [ 6] 7198 	inc	sp
   294B 21r93r00      [10] 7199 	ld	hl, #(_spr + 0x005a)
   294E E5            [11] 7200 	push	hl
   294F CDrF8r1B      [17] 7201 	call	_PrintExplosion
   2952 F1            [10] 7202 	pop	af
   2953 33            [ 6] 7203 	inc	sp
   2954 C9            [10] 7204 	ret
                           7205 ;src/main.c:1655: case 30:	{ PrintExplosion(&spr[6], 1); break; }
   2955                    7206 00104$:
   2955 3E 01         [ 7] 7207 	ld	a, #0x01
   2957 F5            [11] 7208 	push	af
   2958 33            [ 6] 7209 	inc	sp
   2959 21r93r00      [10] 7210 	ld	hl, #(_spr + 0x005a)
   295C E5            [11] 7211 	push	hl
   295D CDrF8r1B      [17] 7212 	call	_PrintExplosion
   2960 F1            [10] 7213 	pop	af
   2961 33            [ 6] 7214 	inc	sp
   2962 C9            [10] 7215 	ret
                           7216 ;src/main.c:1657: case 31:	{ DeleteSprite(&spr[6]); PrintExplosion(&spr[6], 0); break; }						
   2963                    7217 00106$:
   2963 21r93r00      [10] 7218 	ld	hl, #(_spr + 0x005a)
   2966 CDrCDr18      [17] 7219 	call	_DeleteSprite
   2969 AF            [ 4] 7220 	xor	a, a
   296A F5            [11] 7221 	push	af
   296B 33            [ 6] 7222 	inc	sp
   296C 21r93r00      [10] 7223 	ld	hl, #(_spr + 0x005a)
   296F E5            [11] 7224 	push	hl
   2970 CDrF8r1B      [17] 7225 	call	_PrintExplosion
   2973 F1            [10] 7226 	pop	af
   2974 33            [ 6] 7227 	inc	sp
   2975 C9            [10] 7228 	ret
                           7229 ;src/main.c:1659: case 4:		{ DeleteSprite(&spr[6]); PrintWizard(TRUE); break; }		
   2976                    7230 00107$:
   2976 21r93r00      [10] 7231 	ld	hl, #(_spr + 0x005a)
   2979 CDrCDr18      [17] 7232 	call	_DeleteSprite
   297C 2E 01         [ 7] 7233 	ld	l, #0x01
   297E C3rBBr28      [10] 7234 	jp  _PrintWizard
                           7235 ;src/main.c:1661: case 5:		{ MakeShot(spr[6].x, spr[6].y-3, spr[6].dir); break; }			
   2981                    7236 00108$:
   2981 21r9Ar00      [10] 7237 	ld	hl, #_spr + 97
   2984 56            [ 7] 7238 	ld	d, (hl)
   2985 3Ar96r00      [13] 7239 	ld	a, (#_spr + 93)
   2988 C6 FD         [ 7] 7240 	add	a, #0xfd
   298A 4F            [ 4] 7241 	ld	c, a
   298B 21r95r00      [10] 7242 	ld	hl, #_spr + 92
   298E 46            [ 7] 7243 	ld	b, (hl)
   298F 59            [ 4] 7244 	ld	e, c
   2990 D5            [11] 7245 	push	de
   2991 C5            [11] 7246 	push	bc
   2992 33            [ 6] 7247 	inc	sp
   2993 CDrB0r27      [17] 7248 	call	_MakeShot
   2996 F1            [10] 7249 	pop	af
   2997 33            [ 6] 7250 	inc	sp
   2998 C9            [10] 7251 	ret
                           7252 ;src/main.c:1670: case 12:    { DeleteSprite(&spr[6]); PrintWizard(FALSE); break;}
   2999                    7253 00115$:
   2999 21r93r00      [10] 7254 	ld	hl, #(_spr + 0x005a)
   299C CDrCDr18      [17] 7255 	call	_DeleteSprite
   299F 2E 00         [ 7] 7256 	ld	l, #0x00
   29A1 C3rBBr28      [10] 7257 	jp  _PrintWizard
                           7258 ;src/main.c:1672: case 32:    { DeleteSprite(&spr[6]); ctWizardAnim = 0; return; }
   29A4                    7259 00116$:
   29A4 21r93r00      [10] 7260 	ld	hl, #(_spr + 0x005a)
   29A7 CDrCDr18      [17] 7261 	call	_DeleteSprite
   29AA 21r20r00      [10] 7262 	ld	hl,#_ctWizardAnim + 0
   29AD 36 00         [10] 7263 	ld	(hl), #0x00
   29AF C9            [10] 7264 	ret
                           7265 ;src/main.c:1674: default:	{ PrintWizard(FALSE); break;	}			
   29B0                    7266 00117$:
   29B0 2E 00         [ 7] 7267 	ld	l, #0x00
                           7268 ;src/main.c:1675: }		
   29B2 C3rBBr28      [10] 7269 	jp  _PrintWizard
                           7270 ;src/main.c:1681: void MakeWizardAnim(u8 player) __z88dk_fastcall {
                           7271 ;	---------------------------------
                           7272 ; Function MakeWizardAnim
                           7273 ; ---------------------------------
   29B5                    7274 _MakeWizardAnim::
   29B5 4D            [ 4] 7275 	ld	c, l
                           7276 ;src/main.c:1682: if (ctInactivity[player]++ == 80 && !sht.active) {	
   29B6 11r1Cr00      [10] 7277 	ld	de, #_ctInactivity+0
   29B9 69            [ 4] 7278 	ld	l,c
   29BA 26 00         [ 7] 7279 	ld	h,#0x00
   29BC 19            [11] 7280 	add	hl, de
   29BD 46            [ 7] 7281 	ld	b, (hl)
   29BE 58            [ 4] 7282 	ld	e, b
   29BF 1C            [ 4] 7283 	inc	e
   29C0 73            [ 7] 7284 	ld	(hl), e
   29C1 78            [ 4] 7285 	ld	a, b
   29C2 D6 50         [ 7] 7286 	sub	a, #0x50
   29C4 C0            [11] 7287 	ret	NZ
   29C5 3ArA6r00      [13] 7288 	ld	a, (#(_sht + 0x0004) + 0)
   29C8 B7            [ 4] 7289 	or	a, a
   29C9 C0            [11] 7290 	ret	NZ
                           7291 ;src/main.c:1683: spr[6].y = spr[6].py = spr[player].y;
   29CA 11r39r00      [10] 7292 	ld	de, #_spr+0
   29CD 06 00         [ 7] 7293 	ld	b,#0x00
   29CF 69            [ 4] 7294 	ld	l, c
   29D0 60            [ 4] 7295 	ld	h, b
   29D1 29            [11] 7296 	add	hl, hl
   29D2 09            [11] 7297 	add	hl, bc
   29D3 29            [11] 7298 	add	hl, hl
   29D4 09            [11] 7299 	add	hl, bc
   29D5 29            [11] 7300 	add	hl, hl
   29D6 09            [11] 7301 	add	hl, bc
   29D7 19            [11] 7302 	add	hl,de
   29D8 4D            [ 4] 7303 	ld	c,l
   29D9 44            [ 4] 7304 	ld	b,h
   29DA 23            [ 6] 7305 	inc	hl
   29DB 23            [ 6] 7306 	inc	hl
   29DC 23            [ 6] 7307 	inc	hl
   29DD 7E            [ 7] 7308 	ld	a, (hl)
   29DE 32r98r00      [13] 7309 	ld	(#(_spr + 0x005f)),a
   29E1 32r96r00      [13] 7310 	ld	(#(_spr + 0x005d)),a
                           7311 ;src/main.c:1685: if (spr[player].x < 40) {
   29E4 69            [ 4] 7312 	ld	l, c
   29E5 60            [ 4] 7313 	ld	h, b
   29E6 23            [ 6] 7314 	inc	hl
   29E7 23            [ 6] 7315 	inc	hl
   29E8 4E            [ 7] 7316 	ld	c, (hl)
                           7317 ;src/main.c:1686: spr[6].x = spr[6].px = 74;		
   29E9 21 5E 00      [10] 7318 	ld	hl, #0x005e
   29EC 19            [11] 7319 	add	hl, de
                           7320 ;src/main.c:1687: spr[6].dir = D_left;
                           7321 ;src/main.c:1685: if (spr[player].x < 40) {
   29ED 79            [ 4] 7322 	ld	a, c
   29EE D6 28         [ 7] 7323 	sub	a, #0x28
   29F0 30 0E         [12] 7324 	jr	NC,00102$
                           7325 ;src/main.c:1686: spr[6].x = spr[6].px = 74;		
   29F2 36 4A         [10] 7326 	ld	(hl), #0x4a
   29F4 21r95r00      [10] 7327 	ld	hl, #(_spr + 0x005c)
   29F7 36 4A         [10] 7328 	ld	(hl), #0x4a
                           7329 ;src/main.c:1687: spr[6].dir = D_left;
   29F9 21r9Ar00      [10] 7330 	ld	hl, #(_spr + 0x0061)
   29FC 36 02         [10] 7331 	ld	(hl), #0x02
   29FE 18 0C         [12] 7332 	jr	00103$
   2A00                    7333 00102$:
                           7334 ;src/main.c:1690: spr[6].x = spr[6].px = 1;
   2A00 36 01         [10] 7335 	ld	(hl), #0x01
   2A02 21r95r00      [10] 7336 	ld	hl, #(_spr + 0x005c)
   2A05 36 01         [10] 7337 	ld	(hl), #0x01
                           7338 ;src/main.c:1691: spr[6].dir = D_right;
   2A07 21r9Ar00      [10] 7339 	ld	hl, #(_spr + 0x0061)
   2A0A 36 03         [10] 7340 	ld	(hl), #0x03
   2A0C                    7341 00103$:
                           7342 ;src/main.c:1693: ctWizardAnim++; // makes the wizard shooting animation start
   2A0C 21r20r00      [10] 7343 	ld	hl, #_ctWizardAnim+0
   2A0F 34            [11] 7344 	inc	(hl)
   2A10 C9            [10] 7345 	ret
                           7346 ;src/main.c:1711: void MoveEnemy(TSpr *pSpr) {
                           7347 ;	---------------------------------
                           7348 ; Function MoveEnemy
                           7349 ; ---------------------------------
   2A11                    7350 _MoveEnemy::
   2A11 DD E5         [15] 7351 	push	ix
   2A13 DD 21 00 00   [14] 7352 	ld	ix,#0
   2A17 DD 39         [15] 7353 	add	ix,sp
   2A19 21 F0 FF      [10] 7354 	ld	hl, #-16
   2A1C 39            [11] 7355 	add	hl, sp
   2A1D F9            [ 6] 7356 	ld	sp, hl
                           7357 ;src/main.c:1712: u8 z = 255;	// multipurpose variable
   2A1E DD 36 F0 FF   [19] 7358 	ld	-16 (ix), #0xff
                           7359 ;src/main.c:1713: switch(pSpr->objNum_mov) {
   2A22 DD 7E 04      [19] 7360 	ld	a, 4 (ix)
   2A25 DD 77 F1      [19] 7361 	ld	-15 (ix), a
   2A28 DD 7E 05      [19] 7362 	ld	a, 5 (ix)
   2A2B DD 77 F2      [19] 7363 	ld	-14 (ix), a
   2A2E DD 6E F1      [19] 7364 	ld	l,-15 (ix)
   2A31 DD 66 F2      [19] 7365 	ld	h,-14 (ix)
   2A34 11 0C 00      [10] 7366 	ld	de, #0x000c
   2A37 19            [11] 7367 	add	hl, de
   2A38 7E            [ 7] 7368 	ld	a, (hl)
   2A39 DD 77 F3      [19] 7369 	ld	-13 (ix), a
                           7370 ;src/main.c:1716: if (pSpr->dir == D_right) {
   2A3C DD 7E F1      [19] 7371 	ld	a, -15 (ix)
   2A3F C6 07         [ 7] 7372 	add	a, #0x07
   2A41 DD 77 F6      [19] 7373 	ld	-10 (ix), a
   2A44 DD 7E F2      [19] 7374 	ld	a, -14 (ix)
   2A47 CE 00         [ 7] 7375 	adc	a, #0x00
   2A49 DD 77 F7      [19] 7376 	ld	-9 (ix), a
                           7377 ;src/main.c:1718: if (pSpr->x < pSpr->power_maxV) 
   2A4C DD 7E F1      [19] 7378 	ld	a, -15 (ix)
   2A4F C6 02         [ 7] 7379 	add	a, #0x02
   2A51 DD 77 F4      [19] 7380 	ld	-12 (ix), a
   2A54 DD 7E F2      [19] 7381 	ld	a, -14 (ix)
   2A57 CE 00         [ 7] 7382 	adc	a, #0x00
   2A59 DD 77 F5      [19] 7383 	ld	-11 (ix), a
   2A5C DD 7E F1      [19] 7384 	ld	a, -15 (ix)
   2A5F C6 0E         [ 7] 7385 	add	a, #0x0e
   2A61 DD 77 F8      [19] 7386 	ld	-8 (ix), a
   2A64 DD 7E F2      [19] 7387 	ld	a, -14 (ix)
   2A67 CE 00         [ 7] 7388 	adc	a, #0x00
   2A69 DD 77 F9      [19] 7389 	ld	-7 (ix), a
                           7390 ;src/main.c:1719: pSpr->x = pSpr->x + pSpr->lives_speed;
   2A6C DD 7E F1      [19] 7391 	ld	a, -15 (ix)
   2A6F C6 0B         [ 7] 7392 	add	a, #0x0b
   2A71 DD 77 FC      [19] 7393 	ld	-4 (ix), a
   2A74 DD 7E F2      [19] 7394 	ld	a, -14 (ix)
   2A77 CE 00         [ 7] 7395 	adc	a, #0x00
   2A79 DD 77 FD      [19] 7396 	ld	-3 (ix), a
                           7397 ;src/main.c:1725: if (pSpr->x > pSpr->print_minV)  
   2A7C DD 7E F1      [19] 7398 	ld	a, -15 (ix)
   2A7F C6 0D         [ 7] 7399 	add	a, #0x0d
   2A81 DD 77 FA      [19] 7400 	ld	-6 (ix), a
   2A84 DD 7E F2      [19] 7401 	ld	a, -14 (ix)
   2A87 CE 00         [ 7] 7402 	adc	a, #0x00
   2A89 DD 77 FB      [19] 7403 	ld	-5 (ix), a
                           7404 ;src/main.c:1732: if (pSpr->y > (spr[0].y - SHT_H) && pSpr->y < (spr[0].y + SHT_H)) z = 0; // P1
   2A8C DD 7E F1      [19] 7405 	ld	a, -15 (ix)
   2A8F C6 03         [ 7] 7406 	add	a, #0x03
   2A91 DD 77 FE      [19] 7407 	ld	-2 (ix), a
   2A94 DD 7E F2      [19] 7408 	ld	a, -14 (ix)
   2A97 CE 00         [ 7] 7409 	adc	a, #0x00
   2A99 DD 77 FF      [19] 7410 	ld	-1 (ix), a
                           7411 ;src/main.c:1713: switch(pSpr->objNum_mov) {
   2A9C DD 7E F3      [19] 7412 	ld	a, -13 (ix)
   2A9F B7            [ 4] 7413 	or	a, a
   2AA0 28 1A         [12] 7414 	jr	Z,00101$
   2AA2 DD 7E F3      [19] 7415 	ld	a, -13 (ix)
   2AA5 3D            [ 4] 7416 	dec	a
   2AA6 CArE6r2B      [10] 7417 	jp	Z,00125$
   2AA9 DD 7E F3      [19] 7418 	ld	a, -13 (ix)
   2AAC D6 02         [ 7] 7419 	sub	a, #0x02
   2AAE CAr4Br2C      [10] 7420 	jp	Z,00135$
   2AB1 DD 7E F3      [19] 7421 	ld	a, -13 (ix)
   2AB4 D6 03         [ 7] 7422 	sub	a, #0x03
   2AB6 CAr8Ar2D      [10] 7423 	jp	Z,00152$
   2AB9 C3r9Cr2E      [10] 7424 	jp	00168$
                           7425 ;src/main.c:1715: case M_linear_X:
   2ABC                    7426 00101$:
                           7427 ;src/main.c:1716: if (pSpr->dir == D_right) {
   2ABC DD 6E F6      [19] 7428 	ld	l,-10 (ix)
   2ABF DD 66 F7      [19] 7429 	ld	h,-9 (ix)
   2AC2 7E            [ 7] 7430 	ld	a, (hl)
                           7431 ;src/main.c:1735: if (spr[z].x > pSpr->x) pSpr->dir = D_right; 
   2AC3 DD 6E F4      [19] 7432 	ld	l,-12 (ix)
   2AC6 DD 66 F5      [19] 7433 	ld	h,-11 (ix)
   2AC9 4E            [ 7] 7434 	ld	c, (hl)
                           7435 ;src/main.c:1716: if (pSpr->dir == D_right) {
   2ACA D6 03         [ 7] 7436 	sub	a, #0x03
   2ACC 20 27         [12] 7437 	jr	NZ,00109$
                           7438 ;src/main.c:1718: if (pSpr->x < pSpr->power_maxV) 
   2ACE DD 6E F8      [19] 7439 	ld	l,-8 (ix)
   2AD1 DD 66 F9      [19] 7440 	ld	h,-7 (ix)
   2AD4 46            [ 7] 7441 	ld	b, (hl)
   2AD5 79            [ 4] 7442 	ld	a, c
   2AD6 90            [ 4] 7443 	sub	a, b
   2AD7 30 12         [12] 7444 	jr	NC,00103$
                           7445 ;src/main.c:1719: pSpr->x = pSpr->x + pSpr->lives_speed;
   2AD9 DD 6E FC      [19] 7446 	ld	l,-4 (ix)
   2ADC DD 66 FD      [19] 7447 	ld	h,-3 (ix)
   2ADF 46            [ 7] 7448 	ld	b, (hl)
   2AE0 79            [ 4] 7449 	ld	a, c
   2AE1 80            [ 4] 7450 	add	a, b
   2AE2 DD 6E F4      [19] 7451 	ld	l,-12 (ix)
   2AE5 DD 66 F5      [19] 7452 	ld	h,-11 (ix)
   2AE8 77            [ 7] 7453 	ld	(hl), a
   2AE9 18 2E         [12] 7454 	jr	00110$
   2AEB                    7455 00103$:
                           7456 ;src/main.c:1721: pSpr->dir = D_left;
   2AEB DD 6E F6      [19] 7457 	ld	l,-10 (ix)
   2AEE DD 66 F7      [19] 7458 	ld	h,-9 (ix)
   2AF1 36 02         [10] 7459 	ld	(hl), #0x02
   2AF3 18 24         [12] 7460 	jr	00110$
   2AF5                    7461 00109$:
                           7462 ;src/main.c:1725: if (pSpr->x > pSpr->print_minV)  
   2AF5 DD 6E FA      [19] 7463 	ld	l,-6 (ix)
   2AF8 DD 66 FB      [19] 7464 	ld	h,-5 (ix)
   2AFB 7E            [ 7] 7465 	ld	a, (hl)
   2AFC 91            [ 4] 7466 	sub	a, c
   2AFD 30 12         [12] 7467 	jr	NC,00106$
                           7468 ;src/main.c:1726: pSpr->x = pSpr->x - pSpr->lives_speed;
   2AFF DD 6E FC      [19] 7469 	ld	l,-4 (ix)
   2B02 DD 66 FD      [19] 7470 	ld	h,-3 (ix)
   2B05 46            [ 7] 7471 	ld	b, (hl)
   2B06 79            [ 4] 7472 	ld	a, c
   2B07 90            [ 4] 7473 	sub	a, b
   2B08 DD 6E F4      [19] 7474 	ld	l,-12 (ix)
   2B0B DD 66 F5      [19] 7475 	ld	h,-11 (ix)
   2B0E 77            [ 7] 7476 	ld	(hl), a
   2B0F 18 08         [12] 7477 	jr	00110$
   2B11                    7478 00106$:
                           7479 ;src/main.c:1728: pSpr->dir = D_right; 
   2B11 DD 6E F6      [19] 7480 	ld	l,-10 (ix)
   2B14 DD 66 F7      [19] 7481 	ld	h,-9 (ix)
   2B17 36 03         [10] 7482 	ld	(hl), #0x03
   2B19                    7483 00110$:
                           7484 ;src/main.c:1731: if (pSpr->ident == WITCH) {
   2B19 DD 6E F1      [19] 7485 	ld	l,-15 (ix)
   2B1C DD 66 F2      [19] 7486 	ld	h,-14 (ix)
   2B1F 23            [ 6] 7487 	inc	hl
   2B20 7E            [ 7] 7488 	ld	a, (hl)
   2B21 D6 06         [ 7] 7489 	sub	a, #0x06
   2B23 C2r9Cr2E      [10] 7490 	jp	NZ,00168$
                           7491 ;src/main.c:1732: if (pSpr->y > (spr[0].y - SHT_H) && pSpr->y < (spr[0].y + SHT_H)) z = 0; // P1
   2B26 DD 6E FE      [19] 7492 	ld	l,-2 (ix)
   2B29 DD 66 FF      [19] 7493 	ld	h,-1 (ix)
   2B2C 5E            [ 7] 7494 	ld	e, (hl)
   2B2D 21r3Cr00      [10] 7495 	ld	hl, #_spr + 3
   2B30 4E            [ 7] 7496 	ld	c, (hl)
   2B31 06 00         [ 7] 7497 	ld	b, #0x00
   2B33 79            [ 4] 7498 	ld	a, c
   2B34 C6 F8         [ 7] 7499 	add	a, #0xf8
   2B36 6F            [ 4] 7500 	ld	l, a
   2B37 78            [ 4] 7501 	ld	a, b
   2B38 CE FF         [ 7] 7502 	adc	a, #0xff
   2B3A 67            [ 4] 7503 	ld	h, a
   2B3B 16 00         [ 7] 7504 	ld	d, #0x00
   2B3D 7D            [ 4] 7505 	ld	a, l
   2B3E 93            [ 4] 7506 	sub	a, e
   2B3F 7C            [ 4] 7507 	ld	a, h
   2B40 9A            [ 4] 7508 	sbc	a, d
   2B41 E2r46r2B      [10] 7509 	jp	PO, 00302$
   2B44 EE 80         [ 7] 7510 	xor	a, #0x80
   2B46                    7511 00302$:
   2B46 F2r5Fr2B      [10] 7512 	jp	P, 00115$
   2B49 21 08 00      [10] 7513 	ld	hl, #0x0008
   2B4C 09            [11] 7514 	add	hl, bc
   2B4D 7B            [ 4] 7515 	ld	a, e
   2B4E 95            [ 4] 7516 	sub	a, l
   2B4F 7A            [ 4] 7517 	ld	a, d
   2B50 9C            [ 4] 7518 	sbc	a, h
   2B51 E2r56r2B      [10] 7519 	jp	PO, 00303$
   2B54 EE 80         [ 7] 7520 	xor	a, #0x80
   2B56                    7521 00303$:
   2B56 F2r5Fr2B      [10] 7522 	jp	P, 00115$
   2B59 DD 36 F0 00   [19] 7523 	ld	-16 (ix), #0x00
   2B5D 18 2E         [12] 7524 	jr	00116$
   2B5F                    7525 00115$:
                           7526 ;src/main.c:1733: else if (pSpr->y > (spr[1].y - SHT_H) && pSpr->y < (spr[1].y + SHT_H)) z = 1; // P2
   2B5F 21r4Br00      [10] 7527 	ld	hl, #_spr + 18
   2B62 4E            [ 7] 7528 	ld	c, (hl)
   2B63 06 00         [ 7] 7529 	ld	b, #0x00
   2B65 79            [ 4] 7530 	ld	a, c
   2B66 C6 F8         [ 7] 7531 	add	a, #0xf8
   2B68 6F            [ 4] 7532 	ld	l, a
   2B69 78            [ 4] 7533 	ld	a, b
   2B6A CE FF         [ 7] 7534 	adc	a, #0xff
   2B6C 67            [ 4] 7535 	ld	h, a
   2B6D 7D            [ 4] 7536 	ld	a, l
   2B6E 93            [ 4] 7537 	sub	a, e
   2B6F 7C            [ 4] 7538 	ld	a, h
   2B70 9A            [ 4] 7539 	sbc	a, d
   2B71 E2r76r2B      [10] 7540 	jp	PO, 00304$
   2B74 EE 80         [ 7] 7541 	xor	a, #0x80
   2B76                    7542 00304$:
   2B76 F2r8Dr2B      [10] 7543 	jp	P, 00116$
   2B79 21 08 00      [10] 7544 	ld	hl, #0x0008
   2B7C 09            [11] 7545 	add	hl, bc
   2B7D 7B            [ 4] 7546 	ld	a, e
   2B7E 95            [ 4] 7547 	sub	a, l
   2B7F 7A            [ 4] 7548 	ld	a, d
   2B80 9C            [ 4] 7549 	sbc	a, h
   2B81 E2r86r2B      [10] 7550 	jp	PO, 00305$
   2B84 EE 80         [ 7] 7551 	xor	a, #0x80
   2B86                    7552 00305$:
   2B86 F2r8Dr2B      [10] 7553 	jp	P, 00116$
   2B89 DD 36 F0 01   [19] 7554 	ld	-16 (ix), #0x01
   2B8D                    7555 00116$:
                           7556 ;src/main.c:1734: if (z < 255) {
   2B8D DD 7E F0      [19] 7557 	ld	a, -16 (ix)
   2B90 D6 FF         [ 7] 7558 	sub	a, #0xff
   2B92 D2r9Cr2E      [10] 7559 	jp	NC, 00168$
                           7560 ;src/main.c:1735: if (spr[z].x > pSpr->x) pSpr->dir = D_right; 
   2B95 DD 4E F0      [19] 7561 	ld	c,-16 (ix)
   2B98 06 00         [ 7] 7562 	ld	b,#0x00
   2B9A 69            [ 4] 7563 	ld	l, c
   2B9B 60            [ 4] 7564 	ld	h, b
   2B9C 29            [11] 7565 	add	hl, hl
   2B9D 09            [11] 7566 	add	hl, bc
   2B9E 29            [11] 7567 	add	hl, hl
   2B9F 09            [11] 7568 	add	hl, bc
   2BA0 29            [11] 7569 	add	hl, hl
   2BA1 09            [11] 7570 	add	hl, bc
   2BA2 11r39r00      [10] 7571 	ld	de, #_spr
   2BA5 19            [11] 7572 	add	hl, de
   2BA6 23            [ 6] 7573 	inc	hl
   2BA7 23            [ 6] 7574 	inc	hl
   2BA8 4E            [ 7] 7575 	ld	c, (hl)
   2BA9 DD 6E F4      [19] 7576 	ld	l,-12 (ix)
   2BAC DD 66 F5      [19] 7577 	ld	h,-11 (ix)
   2BAF 7E            [ 7] 7578 	ld	a, (hl)
   2BB0 91            [ 4] 7579 	sub	a, c
   2BB1 30 0A         [12] 7580 	jr	NC,00119$
   2BB3 DD 6E F6      [19] 7581 	ld	l,-10 (ix)
   2BB6 DD 66 F7      [19] 7582 	ld	h,-9 (ix)
   2BB9 36 03         [10] 7583 	ld	(hl), #0x03
   2BBB 18 08         [12] 7584 	jr	00120$
   2BBD                    7585 00119$:
                           7586 ;src/main.c:1736: else pSpr->dir = D_left;
   2BBD DD 6E F6      [19] 7587 	ld	l,-10 (ix)
   2BC0 DD 66 F7      [19] 7588 	ld	h,-9 (ix)
   2BC3 36 02         [10] 7589 	ld	(hl), #0x02
   2BC5                    7590 00120$:
                           7591 ;src/main.c:1737: MakeShot(pSpr->x, pSpr->y, pSpr->dir);
   2BC5 DD 6E F6      [19] 7592 	ld	l,-10 (ix)
   2BC8 DD 66 F7      [19] 7593 	ld	h,-9 (ix)
   2BCB 7E            [ 7] 7594 	ld	a, (hl)
   2BCC DD 6E FE      [19] 7595 	ld	l,-2 (ix)
   2BCF DD 66 FF      [19] 7596 	ld	h,-1 (ix)
   2BD2 56            [ 7] 7597 	ld	d, (hl)
   2BD3 DD 6E F4      [19] 7598 	ld	l,-12 (ix)
   2BD6 DD 66 F5      [19] 7599 	ld	h,-11 (ix)
   2BD9 46            [ 7] 7600 	ld	b, (hl)
   2BDA F5            [11] 7601 	push	af
   2BDB 33            [ 6] 7602 	inc	sp
   2BDC 58            [ 4] 7603 	ld	e, b
   2BDD D5            [11] 7604 	push	de
   2BDE CDrB0r27      [17] 7605 	call	_MakeShot
   2BE1 F1            [10] 7606 	pop	af
   2BE2 33            [ 6] 7607 	inc	sp
                           7608 ;src/main.c:1740: break;
   2BE3 C3r9Cr2E      [10] 7609 	jp	00168$
                           7610 ;src/main.c:1743: case M_linear_Y:
   2BE6                    7611 00125$:
                           7612 ;src/main.c:1744: if (pSpr->dir == D_down) {
   2BE6 DD 6E F6      [19] 7613 	ld	l,-10 (ix)
   2BE9 DD 66 F7      [19] 7614 	ld	h,-9 (ix)
   2BEC 46            [ 7] 7615 	ld	b, (hl)
                           7616 ;src/main.c:1732: if (pSpr->y > (spr[0].y - SHT_H) && pSpr->y < (spr[0].y + SHT_H)) z = 0; // P1
   2BED DD 6E FE      [19] 7617 	ld	l,-2 (ix)
   2BF0 DD 66 FF      [19] 7618 	ld	h,-1 (ix)
   2BF3 4E            [ 7] 7619 	ld	c, (hl)
                           7620 ;src/main.c:1744: if (pSpr->dir == D_down) {
   2BF4 10 2B         [13] 7621 	djnz	00133$
                           7622 ;src/main.c:1746: if (pSpr->y < pSpr->power_maxV)
   2BF6 DD 6E F8      [19] 7623 	ld	l,-8 (ix)
   2BF9 DD 66 F9      [19] 7624 	ld	h,-7 (ix)
   2BFC 46            [ 7] 7625 	ld	b, (hl)
   2BFD 79            [ 4] 7626 	ld	a, c
   2BFE 90            [ 4] 7627 	sub	a, b
   2BFF 30 15         [12] 7628 	jr	NC,00127$
                           7629 ;src/main.c:1747: pSpr->y = pSpr->y + (pSpr->lives_speed*2);
   2C01 DD 6E FC      [19] 7630 	ld	l,-4 (ix)
   2C04 DD 66 FD      [19] 7631 	ld	h,-3 (ix)
   2C07 46            [ 7] 7632 	ld	b, (hl)
   2C08 CB 20         [ 8] 7633 	sla	b
   2C0A 79            [ 4] 7634 	ld	a, c
   2C0B 80            [ 4] 7635 	add	a, b
   2C0C DD 6E FE      [19] 7636 	ld	l,-2 (ix)
   2C0F DD 66 FF      [19] 7637 	ld	h,-1 (ix)
   2C12 77            [ 7] 7638 	ld	(hl), a
   2C13 C3r9Cr2E      [10] 7639 	jp	00168$
   2C16                    7640 00127$:
                           7641 ;src/main.c:1749: pSpr->dir = D_up;
   2C16 DD 6E F6      [19] 7642 	ld	l,-10 (ix)
   2C19 DD 66 F7      [19] 7643 	ld	h,-9 (ix)
   2C1C 36 00         [10] 7644 	ld	(hl), #0x00
   2C1E C3r9Cr2E      [10] 7645 	jp	00168$
   2C21                    7646 00133$:
                           7647 ;src/main.c:1753: if (pSpr->y > pSpr->print_minV) 
   2C21 DD 6E FA      [19] 7648 	ld	l,-6 (ix)
   2C24 DD 66 FB      [19] 7649 	ld	h,-5 (ix)
   2C27 7E            [ 7] 7650 	ld	a, (hl)
   2C28 91            [ 4] 7651 	sub	a, c
   2C29 30 15         [12] 7652 	jr	NC,00130$
                           7653 ;src/main.c:1754: pSpr->y = pSpr->y - (pSpr->lives_speed*2);
   2C2B DD 6E FC      [19] 7654 	ld	l,-4 (ix)
   2C2E DD 66 FD      [19] 7655 	ld	h,-3 (ix)
   2C31 46            [ 7] 7656 	ld	b, (hl)
   2C32 CB 20         [ 8] 7657 	sla	b
   2C34 79            [ 4] 7658 	ld	a, c
   2C35 90            [ 4] 7659 	sub	a, b
   2C36 DD 6E FE      [19] 7660 	ld	l,-2 (ix)
   2C39 DD 66 FF      [19] 7661 	ld	h,-1 (ix)
   2C3C 77            [ 7] 7662 	ld	(hl), a
   2C3D C3r9Cr2E      [10] 7663 	jp	00168$
   2C40                    7664 00130$:
                           7665 ;src/main.c:1756: pSpr->dir = D_down; 
   2C40 DD 6E F6      [19] 7666 	ld	l,-10 (ix)
   2C43 DD 66 F7      [19] 7667 	ld	h,-9 (ix)
   2C46 36 01         [10] 7668 	ld	(hl), #0x01
                           7669 ;src/main.c:1758: break;
   2C48 C3r9Cr2E      [10] 7670 	jp	00168$
                           7671 ;src/main.c:1761: case M_linear_XY:		
   2C4B                    7672 00135$:
                           7673 ;src/main.c:1763: if (pSpr->dir == D_up && OnBackground(pSpr->x, pSpr->y - (pSpr->lives_speed*2)-8))
   2C4B DD 6E F6      [19] 7674 	ld	l,-10 (ix)
   2C4E DD 66 F7      [19] 7675 	ld	h,-9 (ix)
   2C51 7E            [ 7] 7676 	ld	a, (hl)
   2C52 B7            [ 4] 7677 	or	a, a
   2C53 20 41         [12] 7678 	jr	NZ,00149$
   2C55 DD 6E FE      [19] 7679 	ld	l,-2 (ix)
   2C58 DD 66 FF      [19] 7680 	ld	h,-1 (ix)
   2C5B 4E            [ 7] 7681 	ld	c, (hl)
   2C5C DD 6E FC      [19] 7682 	ld	l,-4 (ix)
   2C5F DD 66 FD      [19] 7683 	ld	h,-3 (ix)
   2C62 46            [ 7] 7684 	ld	b, (hl)
   2C63 CB 20         [ 8] 7685 	sla	b
   2C65 79            [ 4] 7686 	ld	a, c
   2C66 90            [ 4] 7687 	sub	a, b
   2C67 C6 F8         [ 7] 7688 	add	a, #0xf8
   2C69 57            [ 4] 7689 	ld	d, a
   2C6A DD 6E F4      [19] 7690 	ld	l,-12 (ix)
   2C6D DD 66 F5      [19] 7691 	ld	h,-11 (ix)
   2C70 5E            [ 7] 7692 	ld	e, (hl)
   2C71 D5            [11] 7693 	push	de
   2C72 CDr74r02      [17] 7694 	call	_OnBackground
   2C75 F1            [10] 7695 	pop	af
   2C76 7D            [ 4] 7696 	ld	a, l
   2C77 B7            [ 4] 7697 	or	a, a
   2C78 28 1C         [12] 7698 	jr	Z,00149$
                           7699 ;src/main.c:1764: pSpr->y = pSpr->y - (pSpr->lives_speed*2);			
   2C7A DD 6E FE      [19] 7700 	ld	l,-2 (ix)
   2C7D DD 66 FF      [19] 7701 	ld	h,-1 (ix)
   2C80 4E            [ 7] 7702 	ld	c, (hl)
   2C81 DD 6E FC      [19] 7703 	ld	l,-4 (ix)
   2C84 DD 66 FD      [19] 7704 	ld	h,-3 (ix)
   2C87 46            [ 7] 7705 	ld	b, (hl)
   2C88 CB 20         [ 8] 7706 	sla	b
   2C8A 79            [ 4] 7707 	ld	a, c
   2C8B 90            [ 4] 7708 	sub	a, b
   2C8C DD 6E FE      [19] 7709 	ld	l,-2 (ix)
   2C8F DD 66 FF      [19] 7710 	ld	h,-1 (ix)
   2C92 77            [ 7] 7711 	ld	(hl), a
   2C93 C3r9Cr2E      [10] 7712 	jp	00168$
   2C96                    7713 00149$:
                           7714 ;src/main.c:1766: else if (pSpr->dir == D_down && OnBackground(pSpr->x, pSpr->y + (pSpr->lives_speed*2)+2))
   2C96 DD 6E F6      [19] 7715 	ld	l,-10 (ix)
   2C99 DD 66 F7      [19] 7716 	ld	h,-9 (ix)
   2C9C 4E            [ 7] 7717 	ld	c, (hl)
   2C9D 0D            [ 4] 7718 	dec	c
   2C9E 20 40         [12] 7719 	jr	NZ,00145$
   2CA0 DD 6E FE      [19] 7720 	ld	l,-2 (ix)
   2CA3 DD 66 FF      [19] 7721 	ld	h,-1 (ix)
   2CA6 4E            [ 7] 7722 	ld	c, (hl)
   2CA7 DD 6E FC      [19] 7723 	ld	l,-4 (ix)
   2CAA DD 66 FD      [19] 7724 	ld	h,-3 (ix)
   2CAD 6E            [ 7] 7725 	ld	l, (hl)
   2CAE CB 25         [ 8] 7726 	sla	l
   2CB0 09            [11] 7727 	add	hl, bc
   2CB1 55            [ 4] 7728 	ld	d, l
   2CB2 14            [ 4] 7729 	inc	d
   2CB3 14            [ 4] 7730 	inc	d
   2CB4 DD 6E F4      [19] 7731 	ld	l,-12 (ix)
   2CB7 DD 66 F5      [19] 7732 	ld	h,-11 (ix)
   2CBA 5E            [ 7] 7733 	ld	e, (hl)
   2CBB D5            [11] 7734 	push	de
   2CBC CDr74r02      [17] 7735 	call	_OnBackground
   2CBF F1            [10] 7736 	pop	af
   2CC0 7D            [ 4] 7737 	ld	a, l
   2CC1 B7            [ 4] 7738 	or	a, a
   2CC2 28 1C         [12] 7739 	jr	Z,00145$
                           7740 ;src/main.c:1767: pSpr->y = pSpr->y + (pSpr->lives_speed*2);
   2CC4 DD 6E FE      [19] 7741 	ld	l,-2 (ix)
   2CC7 DD 66 FF      [19] 7742 	ld	h,-1 (ix)
   2CCA 4E            [ 7] 7743 	ld	c, (hl)
   2CCB DD 6E FC      [19] 7744 	ld	l,-4 (ix)
   2CCE DD 66 FD      [19] 7745 	ld	h,-3 (ix)
   2CD1 46            [ 7] 7746 	ld	b, (hl)
   2CD2 CB 20         [ 8] 7747 	sla	b
   2CD4 79            [ 4] 7748 	ld	a, c
   2CD5 80            [ 4] 7749 	add	a, b
   2CD6 DD 6E FE      [19] 7750 	ld	l,-2 (ix)
   2CD9 DD 66 FF      [19] 7751 	ld	h,-1 (ix)
   2CDC 77            [ 7] 7752 	ld	(hl), a
   2CDD C3r9Cr2E      [10] 7753 	jp	00168$
   2CE0                    7754 00145$:
                           7755 ;src/main.c:1769: else if (pSpr->dir == D_left && OnBackground((pSpr->x - pSpr->lives_speed)-3, pSpr->y))
   2CE0 DD 6E F6      [19] 7756 	ld	l,-10 (ix)
   2CE3 DD 66 F7      [19] 7757 	ld	h,-9 (ix)
   2CE6 7E            [ 7] 7758 	ld	a, (hl)
   2CE7 D6 02         [ 7] 7759 	sub	a, #0x02
   2CE9 20 3D         [12] 7760 	jr	NZ,00141$
   2CEB DD 6E FE      [19] 7761 	ld	l,-2 (ix)
   2CEE DD 66 FF      [19] 7762 	ld	h,-1 (ix)
   2CF1 56            [ 7] 7763 	ld	d, (hl)
   2CF2 DD 6E F4      [19] 7764 	ld	l,-12 (ix)
   2CF5 DD 66 F5      [19] 7765 	ld	h,-11 (ix)
   2CF8 4E            [ 7] 7766 	ld	c, (hl)
   2CF9 DD 6E FC      [19] 7767 	ld	l,-4 (ix)
   2CFC DD 66 FD      [19] 7768 	ld	h,-3 (ix)
   2CFF 5E            [ 7] 7769 	ld	e, (hl)
   2D00 79            [ 4] 7770 	ld	a, c
   2D01 93            [ 4] 7771 	sub	a, e
   2D02 C6 FD         [ 7] 7772 	add	a, #0xfd
   2D04 5F            [ 4] 7773 	ld	e,a
   2D05 D5            [11] 7774 	push	de
   2D06 CDr74r02      [17] 7775 	call	_OnBackground
   2D09 F1            [10] 7776 	pop	af
   2D0A 7D            [ 4] 7777 	ld	a, l
   2D0B B7            [ 4] 7778 	or	a, a
   2D0C 28 1A         [12] 7779 	jr	Z,00141$
                           7780 ;src/main.c:1770: pSpr->x = pSpr->x - pSpr->lives_speed;
   2D0E DD 6E F4      [19] 7781 	ld	l,-12 (ix)
   2D11 DD 66 F5      [19] 7782 	ld	h,-11 (ix)
   2D14 4E            [ 7] 7783 	ld	c, (hl)
   2D15 DD 6E FC      [19] 7784 	ld	l,-4 (ix)
   2D18 DD 66 FD      [19] 7785 	ld	h,-3 (ix)
   2D1B 46            [ 7] 7786 	ld	b, (hl)
   2D1C 79            [ 4] 7787 	ld	a, c
   2D1D 90            [ 4] 7788 	sub	a, b
   2D1E DD 6E F4      [19] 7789 	ld	l,-12 (ix)
   2D21 DD 66 F5      [19] 7790 	ld	h,-11 (ix)
   2D24 77            [ 7] 7791 	ld	(hl), a
   2D25 C3r9Cr2E      [10] 7792 	jp	00168$
   2D28                    7793 00141$:
                           7794 ;src/main.c:1772: else if (pSpr->dir == D_right && OnBackground((pSpr->x + pSpr->lives_speed)+1, pSpr->y))
   2D28 DD 6E F6      [19] 7795 	ld	l,-10 (ix)
   2D2B DD 66 F7      [19] 7796 	ld	h,-9 (ix)
   2D2E 7E            [ 7] 7797 	ld	a, (hl)
   2D2F D6 03         [ 7] 7798 	sub	a, #0x03
   2D31 20 3C         [12] 7799 	jr	NZ,00137$
   2D33 DD 6E FE      [19] 7800 	ld	l,-2 (ix)
   2D36 DD 66 FF      [19] 7801 	ld	h,-1 (ix)
   2D39 56            [ 7] 7802 	ld	d, (hl)
   2D3A DD 6E F4      [19] 7803 	ld	l,-12 (ix)
   2D3D DD 66 F5      [19] 7804 	ld	h,-11 (ix)
   2D40 4E            [ 7] 7805 	ld	c, (hl)
   2D41 DD 6E FC      [19] 7806 	ld	l,-4 (ix)
   2D44 DD 66 FD      [19] 7807 	ld	h,-3 (ix)
   2D47 6E            [ 7] 7808 	ld	l, (hl)
   2D48 09            [11] 7809 	add	hl, bc
   2D49 45            [ 4] 7810 	ld	b, l
   2D4A 04            [ 4] 7811 	inc	b
   2D4B 58            [ 4] 7812 	ld	e, b
   2D4C D5            [11] 7813 	push	de
   2D4D CDr74r02      [17] 7814 	call	_OnBackground
   2D50 F1            [10] 7815 	pop	af
   2D51 7D            [ 4] 7816 	ld	a, l
   2D52 B7            [ 4] 7817 	or	a, a
   2D53 28 1A         [12] 7818 	jr	Z,00137$
                           7819 ;src/main.c:1773: pSpr->x = pSpr->x + pSpr->lives_speed;
   2D55 DD 6E F4      [19] 7820 	ld	l,-12 (ix)
   2D58 DD 66 F5      [19] 7821 	ld	h,-11 (ix)
   2D5B 4E            [ 7] 7822 	ld	c, (hl)
   2D5C DD 6E FC      [19] 7823 	ld	l,-4 (ix)
   2D5F DD 66 FD      [19] 7824 	ld	h,-3 (ix)
   2D62 46            [ 7] 7825 	ld	b, (hl)
   2D63 79            [ 4] 7826 	ld	a, c
   2D64 80            [ 4] 7827 	add	a, b
   2D65 DD 6E F4      [19] 7828 	ld	l,-12 (ix)
   2D68 DD 66 F5      [19] 7829 	ld	h,-11 (ix)
   2D6B 77            [ 7] 7830 	ld	(hl), a
   2D6C C3r9Cr2E      [10] 7831 	jp	00168$
   2D6F                    7832 00137$:
                           7833 ;src/main.c:1775: else pSpr->dir = cpct_getRandom_lcg_u8(0) / 65; // 0-1-2-3			
   2D6F 2E 00         [ 7] 7834 	ld	l, #0x00
   2D71 CDr00r00      [17] 7835 	call	_cpct_getRandom_lcg_u8
   2D74 45            [ 4] 7836 	ld	b, l
   2D75 3E 41         [ 7] 7837 	ld	a, #0x41
   2D77 F5            [11] 7838 	push	af
   2D78 33            [ 6] 7839 	inc	sp
   2D79 C5            [11] 7840 	push	bc
   2D7A 33            [ 6] 7841 	inc	sp
   2D7B CDr00r00      [17] 7842 	call	__divuchar
   2D7E F1            [10] 7843 	pop	af
   2D7F 4D            [ 4] 7844 	ld	c, l
   2D80 DD 6E F6      [19] 7845 	ld	l,-10 (ix)
   2D83 DD 66 F7      [19] 7846 	ld	h,-9 (ix)
   2D86 71            [ 7] 7847 	ld	(hl), c
                           7848 ;src/main.c:1776: break;
   2D87 C3r9Cr2E      [10] 7849 	jp	00168$
                           7850 ;src/main.c:1779: case M_chaser:
   2D8A                    7851 00152$:
                           7852 ;src/main.c:1780: if (ctMainLoop % pSpr->lives_speed == 0) {
   2D8A DD 6E FC      [19] 7853 	ld	l,-4 (ix)
   2D8D DD 66 FD      [19] 7854 	ld	h,-3 (ix)
   2D90 4E            [ 7] 7855 	ld	c, (hl)
   2D91 06 00         [ 7] 7856 	ld	b, #0x00
   2D93 C5            [11] 7857 	push	bc
   2D94 2Ar21r00      [16] 7858 	ld	hl, (_ctMainLoop)
   2D97 E5            [11] 7859 	push	hl
   2D98 CDr00r00      [17] 7860 	call	__modsint
   2D9B F1            [10] 7861 	pop	af
   2D9C F1            [10] 7862 	pop	af
   2D9D 7C            [ 4] 7863 	ld	a, h
                           7864 ;src/main.c:1781: z = 0;
   2D9E B5            [ 4] 7865 	or	a,l
   2D9F C2r9Cr2E      [10] 7866 	jp	NZ,00168$
   2DA2 4F            [ 4] 7867 	ld	c,a
                           7868 ;src/main.c:1783: if (TwoPlayers)
   2DA3 3Ar04r00      [13] 7869 	ld	a,(#_TwoPlayers + 0)
   2DA6 B7            [ 4] 7870 	or	a, a
   2DA7 CAr2Dr2E      [10] 7871 	jp	Z, 00154$
                           7872 ;src/main.c:1784: z = Abs(pSpr->x - spr[1].x)*2 + Abs(pSpr->y - spr[1].y) <
   2DAA DD 6E F4      [19] 7873 	ld	l,-12 (ix)
   2DAD DD 66 F5      [19] 7874 	ld	h,-11 (ix)
   2DB0 4E            [ 7] 7875 	ld	c, (hl)
   2DB1 06 00         [ 7] 7876 	ld	b, #0x00
   2DB3 21r4Ar00      [10] 7877 	ld	hl, #_spr + 17
   2DB6 5E            [ 7] 7878 	ld	e, (hl)
   2DB7 16 00         [ 7] 7879 	ld	d, #0x00
   2DB9 79            [ 4] 7880 	ld	a, c
   2DBA 93            [ 4] 7881 	sub	a, e
   2DBB 6F            [ 4] 7882 	ld	l, a
   2DBC 78            [ 4] 7883 	ld	a, b
   2DBD 9A            [ 4] 7884 	sbc	a, d
   2DBE 67            [ 4] 7885 	ld	h, a
   2DBF CDr00r00      [17] 7886 	call	_Abs
   2DC2 29            [11] 7887 	add	hl, hl
   2DC3 4D            [ 4] 7888 	ld	c, l
   2DC4 44            [ 4] 7889 	ld	b, h
   2DC5 DD 6E FE      [19] 7890 	ld	l,-2 (ix)
   2DC8 DD 66 FF      [19] 7891 	ld	h,-1 (ix)
   2DCB 5E            [ 7] 7892 	ld	e, (hl)
   2DCC 16 00         [ 7] 7893 	ld	d, #0x00
   2DCE 21r4Br00      [10] 7894 	ld	hl, #_spr + 18
   2DD1 6E            [ 7] 7895 	ld	l, (hl)
   2DD2 26 00         [ 7] 7896 	ld	h, #0x00
   2DD4 7B            [ 4] 7897 	ld	a, e
   2DD5 95            [ 4] 7898 	sub	a, l
   2DD6 6F            [ 4] 7899 	ld	l, a
   2DD7 7A            [ 4] 7900 	ld	a, d
   2DD8 9C            [ 4] 7901 	sbc	a, h
   2DD9 67            [ 4] 7902 	ld	h, a
   2DDA C5            [11] 7903 	push	bc
   2DDB CDr00r00      [17] 7904 	call	_Abs
   2DDE C1            [10] 7905 	pop	bc
   2DDF 09            [11] 7906 	add	hl,bc
   2DE0 DD 75 FA      [19] 7907 	ld	-6 (ix), l
   2DE3 DD 74 FB      [19] 7908 	ld	-5 (ix), h
                           7909 ;src/main.c:1785: Abs(pSpr->x - spr[0].x)*2 + Abs(pSpr->y - spr[0].y);
   2DE6 DD 6E F4      [19] 7910 	ld	l,-12 (ix)
   2DE9 DD 66 F5      [19] 7911 	ld	h,-11 (ix)
   2DEC 4E            [ 7] 7912 	ld	c, (hl)
   2DED 06 00         [ 7] 7913 	ld	b, #0x00
   2DEF 21r3Br00      [10] 7914 	ld	hl, #_spr + 2
   2DF2 5E            [ 7] 7915 	ld	e, (hl)
   2DF3 16 00         [ 7] 7916 	ld	d, #0x00
   2DF5 79            [ 4] 7917 	ld	a, c
   2DF6 93            [ 4] 7918 	sub	a, e
   2DF7 6F            [ 4] 7919 	ld	l, a
   2DF8 78            [ 4] 7920 	ld	a, b
   2DF9 9A            [ 4] 7921 	sbc	a, d
   2DFA 67            [ 4] 7922 	ld	h, a
   2DFB CDr00r00      [17] 7923 	call	_Abs
   2DFE 29            [11] 7924 	add	hl, hl
   2DFF 4D            [ 4] 7925 	ld	c, l
   2E00 44            [ 4] 7926 	ld	b, h
   2E01 DD 6E FE      [19] 7927 	ld	l,-2 (ix)
   2E04 DD 66 FF      [19] 7928 	ld	h,-1 (ix)
   2E07 5E            [ 7] 7929 	ld	e, (hl)
   2E08 16 00         [ 7] 7930 	ld	d, #0x00
   2E0A 21r3Cr00      [10] 7931 	ld	hl, #_spr + 3
   2E0D 6E            [ 7] 7932 	ld	l, (hl)
   2E0E 26 00         [ 7] 7933 	ld	h, #0x00
   2E10 7B            [ 4] 7934 	ld	a, e
   2E11 95            [ 4] 7935 	sub	a, l
   2E12 6F            [ 4] 7936 	ld	l, a
   2E13 7A            [ 4] 7937 	ld	a, d
   2E14 9C            [ 4] 7938 	sbc	a, h
   2E15 67            [ 4] 7939 	ld	h, a
   2E16 C5            [11] 7940 	push	bc
   2E17 CDr00r00      [17] 7941 	call	_Abs
   2E1A C1            [10] 7942 	pop	bc
   2E1B 09            [11] 7943 	add	hl, bc
   2E1C DD 7E FA      [19] 7944 	ld	a, -6 (ix)
   2E1F 95            [ 4] 7945 	sub	a, l
   2E20 DD 7E FB      [19] 7946 	ld	a, -5 (ix)
   2E23 9C            [ 4] 7947 	sbc	a, h
   2E24 E2r29r2E      [10] 7948 	jp	PO, 00314$
   2E27 EE 80         [ 7] 7949 	xor	a, #0x80
   2E29                    7950 00314$:
   2E29 07            [ 4] 7951 	rlca
   2E2A E6 01         [ 7] 7952 	and	a,#0x01
   2E2C 4F            [ 4] 7953 	ld	c, a
   2E2D                    7954 00154$:
                           7955 ;src/main.c:1787: if (pSpr->x < spr[z].x) {
   2E2D DD 6E F4      [19] 7956 	ld	l,-12 (ix)
   2E30 DD 66 F5      [19] 7957 	ld	h,-11 (ix)
   2E33 46            [ 7] 7958 	ld	b, (hl)
   2E34 11r39r00      [10] 7959 	ld	de, #_spr+0
   2E37 D5            [11] 7960 	push	de
   2E38 59            [ 4] 7961 	ld	e,c
   2E39 16 00         [ 7] 7962 	ld	d,#0x00
   2E3B 6B            [ 4] 7963 	ld	l, e
   2E3C 62            [ 4] 7964 	ld	h, d
   2E3D 29            [11] 7965 	add	hl, hl
   2E3E 19            [11] 7966 	add	hl, de
   2E3F 29            [11] 7967 	add	hl, hl
   2E40 19            [11] 7968 	add	hl, de
   2E41 29            [11] 7969 	add	hl, hl
   2E42 19            [11] 7970 	add	hl, de
   2E43 D1            [10] 7971 	pop	de
   2E44 19            [11] 7972 	add	hl,de
   2E45 5D            [ 4] 7973 	ld	e,l
   2E46 54            [ 4] 7974 	ld	d,h
   2E47 23            [ 6] 7975 	inc	hl
   2E48 23            [ 6] 7976 	inc	hl
   2E49 4E            [ 7] 7977 	ld	c, (hl)
   2E4A 78            [ 4] 7978 	ld	a, b
   2E4B 91            [ 4] 7979 	sub	a, c
   2E4C 30 12         [12] 7980 	jr	NC,00158$
                           7981 ;src/main.c:1788: pSpr->x++;
   2E4E 04            [ 4] 7982 	inc	b
   2E4F DD 6E F4      [19] 7983 	ld	l,-12 (ix)
   2E52 DD 66 F5      [19] 7984 	ld	h,-11 (ix)
   2E55 70            [ 7] 7985 	ld	(hl), b
                           7986 ;src/main.c:1789: pSpr->dir = D_right;
   2E56 DD 6E F6      [19] 7987 	ld	l,-10 (ix)
   2E59 DD 66 F7      [19] 7988 	ld	h,-9 (ix)
   2E5C 36 03         [10] 7989 	ld	(hl), #0x03
   2E5E 18 14         [12] 7990 	jr	00159$
   2E60                    7991 00158$:
                           7992 ;src/main.c:1792: else if (pSpr->x > spr[z].x) {
   2E60 79            [ 4] 7993 	ld	a, c
   2E61 90            [ 4] 7994 	sub	a, b
   2E62 30 10         [12] 7995 	jr	NC,00159$
                           7996 ;src/main.c:1793: pSpr->x--;
   2E64 05            [ 4] 7997 	dec	b
   2E65 DD 6E F4      [19] 7998 	ld	l,-12 (ix)
   2E68 DD 66 F5      [19] 7999 	ld	h,-11 (ix)
   2E6B 70            [ 7] 8000 	ld	(hl), b
                           8001 ;src/main.c:1794: pSpr->dir = D_left;
   2E6C DD 6E F6      [19] 8002 	ld	l,-10 (ix)
   2E6F DD 66 F7      [19] 8003 	ld	h,-9 (ix)
   2E72 36 02         [10] 8004 	ld	(hl), #0x02
   2E74                    8005 00159$:
                           8006 ;src/main.c:1797: if (pSpr->y < spr[z].y) {
   2E74 DD 6E FE      [19] 8007 	ld	l,-2 (ix)
   2E77 DD 66 FF      [19] 8008 	ld	h,-1 (ix)
   2E7A 4E            [ 7] 8009 	ld	c, (hl)
   2E7B EB            [ 4] 8010 	ex	de,hl
   2E7C 23            [ 6] 8011 	inc	hl
   2E7D 23            [ 6] 8012 	inc	hl
   2E7E 23            [ 6] 8013 	inc	hl
   2E7F 46            [ 7] 8014 	ld	b, (hl)
   2E80 79            [ 4] 8015 	ld	a, c
   2E81 90            [ 4] 8016 	sub	a, b
   2E82 30 0B         [12] 8017 	jr	NC,00163$
                           8018 ;src/main.c:1798: pSpr->y+=2;
   2E84 0C            [ 4] 8019 	inc	c
   2E85 0C            [ 4] 8020 	inc	c
   2E86 DD 6E FE      [19] 8021 	ld	l,-2 (ix)
   2E89 DD 66 FF      [19] 8022 	ld	h,-1 (ix)
   2E8C 71            [ 7] 8023 	ld	(hl), c
   2E8D 18 0D         [12] 8024 	jr	00168$
   2E8F                    8025 00163$:
                           8026 ;src/main.c:1801: else if (pSpr->y > spr[z].y) {
   2E8F 78            [ 4] 8027 	ld	a, b
   2E90 91            [ 4] 8028 	sub	a, c
   2E91 30 09         [12] 8029 	jr	NC,00168$
                           8030 ;src/main.c:1802: pSpr->y-=2;
   2E93 0D            [ 4] 8031 	dec	c
   2E94 0D            [ 4] 8032 	dec	c
   2E95 DD 6E FE      [19] 8033 	ld	l,-2 (ix)
   2E98 DD 66 FF      [19] 8034 	ld	h,-1 (ix)
   2E9B 71            [ 7] 8035 	ld	(hl), c
                           8036 ;src/main.c:1806: }
   2E9C                    8037 00168$:
   2E9C DD F9         [10] 8038 	ld	sp, ix
   2E9E DD E1         [14] 8039 	pop	ix
   2EA0 C9            [10] 8040 	ret
                           8041 ;src/main.c:1811: void SetEnemyParams(u8 i, u8 ident, u8 mov, u8 dir, u8 speed, u8 x, u8 y, u8 minV, u8 maxV) {
                           8042 ;	---------------------------------
                           8043 ; Function SetEnemyParams
                           8044 ; ---------------------------------
   2EA1                    8045 _SetEnemyParams::
   2EA1 DD E5         [15] 8046 	push	ix
   2EA3 DD 21 00 00   [14] 8047 	ld	ix,#0
   2EA7 DD 39         [15] 8048 	add	ix,sp
                           8049 ;src/main.c:1812: spr[i].num = i;
   2EA9 01r39r00      [10] 8050 	ld	bc, #_spr+0
   2EAC DD 5E 04      [19] 8051 	ld	e,4 (ix)
   2EAF 16 00         [ 7] 8052 	ld	d,#0x00
   2EB1 6B            [ 4] 8053 	ld	l, e
   2EB2 62            [ 4] 8054 	ld	h, d
   2EB3 29            [11] 8055 	add	hl, hl
   2EB4 19            [11] 8056 	add	hl, de
   2EB5 29            [11] 8057 	add	hl, hl
   2EB6 19            [11] 8058 	add	hl, de
   2EB7 29            [11] 8059 	add	hl, hl
   2EB8 19            [11] 8060 	add	hl, de
   2EB9 09            [11] 8061 	add	hl,bc
   2EBA 4D            [ 4] 8062 	ld	c, l
   2EBB 44            [ 4] 8063 	ld	b, h
   2EBC DD 7E 04      [19] 8064 	ld	a, 4 (ix)
   2EBF 02            [ 7] 8065 	ld	(bc), a
                           8066 ;src/main.c:1813: spr[i].ident = ident; 
   2EC0 59            [ 4] 8067 	ld	e, c
   2EC1 50            [ 4] 8068 	ld	d, b
   2EC2 13            [ 6] 8069 	inc	de
   2EC3 DD 7E 05      [19] 8070 	ld	a, 5 (ix)
   2EC6 12            [ 7] 8071 	ld	(de), a
                           8072 ;src/main.c:1814: spr[i].objNum_mov = mov;	 
   2EC7 21 0C 00      [10] 8073 	ld	hl, #0x000c
   2ECA 09            [11] 8074 	add	hl, bc
   2ECB DD 7E 06      [19] 8075 	ld	a, 6 (ix)
   2ECE 77            [ 7] 8076 	ld	(hl), a
                           8077 ;src/main.c:1815: spr[i].dir = dir; 
   2ECF 21 07 00      [10] 8078 	ld	hl, #0x0007
   2ED2 09            [11] 8079 	add	hl, bc
   2ED3 DD 7E 07      [19] 8080 	ld	a, 7 (ix)
   2ED6 77            [ 7] 8081 	ld	(hl), a
                           8082 ;src/main.c:1816: spr[i].lives_speed = speed;
   2ED7 21 0B 00      [10] 8083 	ld	hl, #0x000b
   2EDA 09            [11] 8084 	add	hl, bc
   2EDB DD 7E 08      [19] 8085 	ld	a, 8 (ix)
   2EDE 77            [ 7] 8086 	ld	(hl), a
                           8087 ;src/main.c:1817: spr[i].x = spr[i].px = x;
   2EDF 59            [ 4] 8088 	ld	e, c
   2EE0 50            [ 4] 8089 	ld	d, b
   2EE1 13            [ 6] 8090 	inc	de
   2EE2 13            [ 6] 8091 	inc	de
   2EE3 21 04 00      [10] 8092 	ld	hl, #0x0004
   2EE6 09            [11] 8093 	add	hl, bc
   2EE7 DD 7E 09      [19] 8094 	ld	a, 9 (ix)
   2EEA 77            [ 7] 8095 	ld	(hl), a
   2EEB DD 7E 09      [19] 8096 	ld	a, 9 (ix)
   2EEE 12            [ 7] 8097 	ld	(de), a
                           8098 ;src/main.c:1818: spr[i].y = spr[i].py = y;
   2EEF 59            [ 4] 8099 	ld	e, c
   2EF0 50            [ 4] 8100 	ld	d, b
   2EF1 13            [ 6] 8101 	inc	de
   2EF2 13            [ 6] 8102 	inc	de
   2EF3 13            [ 6] 8103 	inc	de
   2EF4 21 05 00      [10] 8104 	ld	hl, #0x0005
   2EF7 09            [11] 8105 	add	hl, bc
   2EF8 DD 7E 0A      [19] 8106 	ld	a, 10 (ix)
   2EFB 77            [ 7] 8107 	ld	(hl), a
   2EFC DD 7E 0A      [19] 8108 	ld	a, 10 (ix)
   2EFF 12            [ 7] 8109 	ld	(de), a
                           8110 ;src/main.c:1819: spr[i].print_minV = minV;
   2F00 21 0D 00      [10] 8111 	ld	hl, #0x000d
   2F03 09            [11] 8112 	add	hl, bc
   2F04 DD 7E 0B      [19] 8113 	ld	a, 11 (ix)
   2F07 77            [ 7] 8114 	ld	(hl), a
                           8115 ;src/main.c:1820: spr[i].power_maxV = maxV;
   2F08 21 0E 00      [10] 8116 	ld	hl, #0x000e
   2F0B 09            [11] 8117 	add	hl, bc
   2F0C DD 7E 0C      [19] 8118 	ld	a, 12 (ix)
   2F0F 77            [ 7] 8119 	ld	(hl), a
   2F10 DD E1         [14] 8120 	pop	ix
   2F12 C9            [10] 8121 	ret
                           8122 ;src/main.c:1830: void SetEnemies() {
                           8123 ;	---------------------------------
                           8124 ; Function SetEnemies
                           8125 ; ---------------------------------
   2F13                    8126 _SetEnemies::
                           8127 ;src/main.c:1831: switch (nMap) {
   2F13 3E 0B         [ 7] 8128 	ld	a, #0x0b
   2F15 FD 21r00r00   [14] 8129 	ld	iy, #_nMap
   2F19 FD 96 00      [19] 8130 	sub	a, 0 (iy)
   2F1C DArF2r37      [10] 8131 	jp	C, 00113$
   2F1F FD 4E 00      [19] 8132 	ld	c, 0 (iy)
   2F22 06 00         [ 7] 8133 	ld	b, #0x00
   2F24 21r2Br2F      [10] 8134 	ld	hl, #00126$
   2F27 09            [11] 8135 	add	hl, bc
   2F28 09            [11] 8136 	add	hl, bc
   2F29 09            [11] 8137 	add	hl, bc
   2F2A E9            [ 4] 8138 	jp	(hl)
   2F2B                    8139 00126$:
   2F2B C3r4Fr2F      [10] 8140 	jp	00101$
   2F2E C3r06r30      [10] 8141 	jp	00102$
   2F31 C3rBEr30      [10] 8142 	jp	00103$
   2F34 C3r77r31      [10] 8143 	jp	00104$
   2F37 C3r30r32      [10] 8144 	jp	00105$
   2F3A C3rEAr32      [10] 8145 	jp	00106$
   2F3D C3rA3r33      [10] 8146 	jp	00107$
   2F40 C3r5Dr34      [10] 8147 	jp	00108$
   2F43 C3r15r35      [10] 8148 	jp	00109$
   2F46 C3rCEr35      [10] 8149 	jp	00110$
   2F49 C3r86r36      [10] 8150 	jp	00111$
   2F4C C3r3Cr37      [10] 8151 	jp	00112$
                           8152 ;src/main.c:1833: case 0: {			 
   2F4F                    8153 00101$:
                           8154 ;src/main.c:1835: SetEnemyParams(2, SENTINEL,	M_linear_X, 	D_left,     1, 73, 158,   2,  73);						
   2F4F 21 02 49      [10] 8155 	ld	hl, #0x4902
   2F52 E5            [11] 8156 	push	hl
   2F53 21 49 9E      [10] 8157 	ld	hl, #0x9e49
   2F56 E5            [11] 8158 	push	hl
   2F57 21 02 01      [10] 8159 	ld	hl, #0x0102
   2F5A E5            [11] 8160 	push	hl
   2F5B 26 00         [ 7] 8161 	ld	h, #0x00
   2F5D E5            [11] 8162 	push	hl
   2F5E 3E 02         [ 7] 8163 	ld	a, #0x02
   2F60 F5            [11] 8164 	push	af
   2F61 33            [ 6] 8165 	inc	sp
   2F62 CDrA1r2E      [17] 8166 	call	_SetEnemyParams
   2F65 21 09 00      [10] 8167 	ld	hl, #9
   2F68 39            [11] 8168 	add	hl, sp
   2F69 F9            [ 6] 8169 	ld	sp, hl
                           8170 ;src/main.c:1836: SetEnemyParams(3, SENTINEL,	M_linear_X, 	D_right,    1,  3, 110,   2,  73);
   2F6A 21 02 49      [10] 8171 	ld	hl, #0x4902
   2F6D E5            [11] 8172 	push	hl
   2F6E 21 03 6E      [10] 8173 	ld	hl, #0x6e03
   2F71 E5            [11] 8174 	push	hl
   2F72 26 01         [ 7] 8175 	ld	h, #0x01
   2F74 E5            [11] 8176 	push	hl
   2F75 21 02 00      [10] 8177 	ld	hl, #0x0002
   2F78 E5            [11] 8178 	push	hl
   2F79 3E 03         [ 7] 8179 	ld	a, #0x03
   2F7B F5            [11] 8180 	push	af
   2F7C 33            [ 6] 8181 	inc	sp
   2F7D CDrA1r2E      [17] 8182 	call	_SetEnemyParams
   2F80 21 09 00      [10] 8183 	ld	hl, #9
   2F83 39            [11] 8184 	add	hl, sp
   2F84 F9            [ 6] 8185 	ld	sp, hl
                           8186 ;src/main.c:1837: SetEnemyParams(4, SENTINEL,	M_linear_X, 	D_left,     1, 73,  62,  40,  73);
   2F85 21 28 49      [10] 8187 	ld	hl, #0x4928
   2F88 E5            [11] 8188 	push	hl
   2F89 21 49 3E      [10] 8189 	ld	hl, #0x3e49
   2F8C E5            [11] 8190 	push	hl
   2F8D 21 02 01      [10] 8191 	ld	hl, #0x0102
   2F90 E5            [11] 8192 	push	hl
   2F91 26 00         [ 7] 8193 	ld	h, #0x00
   2F93 E5            [11] 8194 	push	hl
   2F94 3E 04         [ 7] 8195 	ld	a, #0x04
   2F96 F5            [11] 8196 	push	af
   2F97 33            [ 6] 8197 	inc	sp
   2F98 CDrA1r2E      [17] 8198 	call	_SetEnemyParams
   2F9B 21 09 00      [10] 8199 	ld	hl, #9
   2F9E 39            [11] 8200 	add	hl, sp
   2F9F F9            [ 6] 8201 	ld	sp, hl
                           8202 ;src/main.c:1838: SetEnemyParams(5, SENTINEL,	M_linear_X, 	D_right,    1,  2,  62,   2,  35);
   2FA0 21 02 23      [10] 8203 	ld	hl, #0x2302
   2FA3 E5            [11] 8204 	push	hl
   2FA4 26 3E         [ 7] 8205 	ld	h, #0x3e
   2FA6 E5            [11] 8206 	push	hl
   2FA7 21 03 01      [10] 8207 	ld	hl, #0x0103
   2FAA E5            [11] 8208 	push	hl
   2FAB 21 02 00      [10] 8209 	ld	hl, #0x0002
   2FAE E5            [11] 8210 	push	hl
   2FAF 3E 05         [ 7] 8211 	ld	a, #0x05
   2FB1 F5            [11] 8212 	push	af
   2FB2 33            [ 6] 8213 	inc	sp
   2FB3 CDrA1r2E      [17] 8214 	call	_SetEnemyParams
   2FB6 21 09 00      [10] 8215 	ld	hl, #9
   2FB9 39            [11] 8216 	add	hl, sp
   2FBA F9            [ 6] 8217 	ld	sp, hl
                           8218 ;src/main.c:1840: spr[0].x = spr[0].px = 6; 
   2FBB 21r3Dr00      [10] 8219 	ld	hl, #(_spr + 0x0004)
   2FBE 36 06         [10] 8220 	ld	(hl), #0x06
   2FC0 21r3Br00      [10] 8221 	ld	hl, #(_spr + 0x0002)
   2FC3 36 06         [10] 8222 	ld	(hl), #0x06
                           8223 ;src/main.c:1841: spr[0].y = spr[0].py = 178;			
   2FC5 21r3Er00      [10] 8224 	ld	hl, #(_spr + 0x0005)
   2FC8 36 B2         [10] 8225 	ld	(hl), #0xb2
   2FCA 21r3Cr00      [10] 8226 	ld	hl, #(_spr + 0x0003)
   2FCD 36 B2         [10] 8227 	ld	(hl), #0xb2
                           8228 ;src/main.c:1843: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk0_end);
   2FCF 21r79r02      [10] 8229 	ld	hl, #(_mappk0 + 0x0279)
   2FD2 E5            [11] 8230 	push	hl
   2FD3 21 00 16      [10] 8231 	ld	hl, #0x1600
   2FD6 E5            [11] 8232 	push	hl
   2FD7 CDr00r00      [17] 8233 	call	_cpct_zx7b_decrunch_s
                           8234 ;src/main.c:1845: lName = "1;1@@GARDENS";
   2FDA 21r10r38      [10] 8235 	ld	hl, #___str_35+0
   2FDD 22r02r00      [16] 8236 	ld	(_lName), hl
                           8237 ;src/main.c:1847: doorKey[0] = 4;	// toad snot
   2FE0 21r0Fr00      [10] 8238 	ld	hl, #_doorKey
   2FE3 36 04         [10] 8239 	ld	(hl), #0x04
                           8240 ;src/main.c:1848: doorKey[1] = 5;	// diamond dust
   2FE5 21r10r00      [10] 8241 	ld	hl, #(_doorKey + 0x0001)
   2FE8 36 05         [10] 8242 	ld	(hl), #0x05
                           8243 ;src/main.c:1849: doorKey[2] = 4;	// toad snot
   2FEA 21r11r00      [10] 8244 	ld	hl, #(_doorKey + 0x0002)
   2FED 36 04         [10] 8245 	ld	(hl), #0x04
                           8246 ;src/main.c:1850: doorKey[3] = 5;	// diamond dust
   2FEF 21r12r00      [10] 8247 	ld	hl, #(_doorKey + 0x0003)
   2FF2 36 05         [10] 8248 	ld	(hl), #0x05
                           8249 ;src/main.c:1851: doorKey[4] = 4; // toad snot
   2FF4 21r13r00      [10] 8250 	ld	hl, #(_doorKey + 0x0004)
   2FF7 36 04         [10] 8251 	ld	(hl), #0x04
                           8252 ;src/main.c:1853: storeX = 51;
   2FF9 21r19r00      [10] 8253 	ld	hl,#_storeX + 0
   2FFC 36 33         [10] 8254 	ld	(hl), #0x33
                           8255 ;src/main.c:1854: storeY = 11;
   2FFE 21r1Ar00      [10] 8256 	ld	hl,#_storeY + 0
   3001 36 0B         [10] 8257 	ld	(hl), #0x0b
                           8258 ;src/main.c:1855: break;
   3003 C3rF2r37      [10] 8259 	jp	00113$
                           8260 ;src/main.c:1858: case 1: {
   3006                    8261 00102$:
                           8262 ;src/main.c:1860: SetEnemyParams(2, NOBODY,	M_linear_X, 	D_left,     1,  0,   0,   0,   0);
   3006 21 00 00      [10] 8263 	ld	hl, #0x0000
   3009 E5            [11] 8264 	push	hl
   300A 2E 00         [ 7] 8265 	ld	l, #0x00
   300C E5            [11] 8266 	push	hl
   300D 21 02 01      [10] 8267 	ld	hl, #0x0102
   3010 E5            [11] 8268 	push	hl
   3011 21 09 00      [10] 8269 	ld	hl, #0x0009
   3014 E5            [11] 8270 	push	hl
   3015 3E 02         [ 7] 8271 	ld	a, #0x02
   3017 F5            [11] 8272 	push	af
   3018 33            [ 6] 8273 	inc	sp
   3019 CDrA1r2E      [17] 8274 	call	_SetEnemyParams
   301C 21 09 00      [10] 8275 	ld	hl, #9
   301F 39            [11] 8276 	add	hl, sp
   3020 F9            [ 6] 8277 	ld	sp, hl
                           8278 ;src/main.c:1861: SetEnemyParams(3, SENTINEL,	M_linear_X, 	D_right,    1,  2, 114,   2,  73);						
   3021 21 02 49      [10] 8279 	ld	hl, #0x4902
   3024 E5            [11] 8280 	push	hl
   3025 26 72         [ 7] 8281 	ld	h, #0x72
   3027 E5            [11] 8282 	push	hl
   3028 21 03 01      [10] 8283 	ld	hl, #0x0103
   302B E5            [11] 8284 	push	hl
   302C 21 02 00      [10] 8285 	ld	hl, #0x0002
   302F E5            [11] 8286 	push	hl
   3030 3E 03         [ 7] 8287 	ld	a, #0x03
   3032 F5            [11] 8288 	push	af
   3033 33            [ 6] 8289 	inc	sp
   3034 CDrA1r2E      [17] 8290 	call	_SetEnemyParams
   3037 21 09 00      [10] 8291 	ld	hl, #9
   303A 39            [11] 8292 	add	hl, sp
   303B F9            [ 6] 8293 	ld	sp, hl
                           8294 ;src/main.c:1862: SetEnemyParams(4, KNIGHT, 	M_linear_XY,    D_right,    1, 10,  62,   0,   0);
   303C 21 00 00      [10] 8295 	ld	hl, #0x0000
   303F E5            [11] 8296 	push	hl
   3040 21 0A 3E      [10] 8297 	ld	hl, #0x3e0a
   3043 E5            [11] 8298 	push	hl
   3044 21 03 01      [10] 8299 	ld	hl, #0x0103
   3047 E5            [11] 8300 	push	hl
   3048 26 02         [ 7] 8301 	ld	h, #0x02
   304A E5            [11] 8302 	push	hl
   304B 3E 04         [ 7] 8303 	ld	a, #0x04
   304D F5            [11] 8304 	push	af
   304E 33            [ 6] 8305 	inc	sp
   304F CDrA1r2E      [17] 8306 	call	_SetEnemyParams
   3052 21 09 00      [10] 8307 	ld	hl, #9
   3055 39            [11] 8308 	add	hl, sp
   3056 F9            [ 6] 8309 	ld	sp, hl
                           8310 ;src/main.c:1863: SetEnemyParams(5, KNIGHT,	M_linear_XY,	D_down,     1,  2,  38,   0,   0);
   3057 21 00 00      [10] 8311 	ld	hl, #0x0000
   305A E5            [11] 8312 	push	hl
   305B 21 02 26      [10] 8313 	ld	hl, #0x2602
   305E E5            [11] 8314 	push	hl
   305F 21 01 01      [10] 8315 	ld	hl, #0x0101
   3062 E5            [11] 8316 	push	hl
   3063 21 03 02      [10] 8317 	ld	hl, #0x0203
   3066 E5            [11] 8318 	push	hl
   3067 3E 05         [ 7] 8319 	ld	a, #0x05
   3069 F5            [11] 8320 	push	af
   306A 33            [ 6] 8321 	inc	sp
   306B CDrA1r2E      [17] 8322 	call	_SetEnemyParams
   306E 21 09 00      [10] 8323 	ld	hl, #9
   3071 39            [11] 8324 	add	hl, sp
   3072 F9            [ 6] 8325 	ld	sp, hl
                           8326 ;src/main.c:1865: spr[0].x = spr[0].px = 58; 
   3073 21r3Dr00      [10] 8327 	ld	hl, #(_spr + 0x0004)
   3076 36 3A         [10] 8328 	ld	(hl), #0x3a
   3078 21r3Br00      [10] 8329 	ld	hl, #(_spr + 0x0002)
   307B 36 3A         [10] 8330 	ld	(hl), #0x3a
                           8331 ;src/main.c:1866: spr[0].y = spr[0].py = 178;	
   307D 21r3Er00      [10] 8332 	ld	hl, #(_spr + 0x0005)
   3080 36 B2         [10] 8333 	ld	(hl), #0xb2
   3082 21r3Cr00      [10] 8334 	ld	hl, #(_spr + 0x0003)
   3085 36 B2         [10] 8335 	ld	(hl), #0xb2
                           8336 ;src/main.c:1868: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk1_end);
   3087 21rA0r02      [10] 8337 	ld	hl, #(_mappk1 + 0x02a0)
   308A E5            [11] 8338 	push	hl
   308B 21 00 16      [10] 8339 	ld	hl, #0x1600
   308E E5            [11] 8340 	push	hl
   308F CDr00r00      [17] 8341 	call	_cpct_zx7b_decrunch_s
                           8342 ;src/main.c:1870: lName = "1;2@@GARDENS";
   3092 21r1Dr38      [10] 8343 	ld	hl, #___str_36+0
   3095 22r02r00      [16] 8344 	ld	(_lName), hl
                           8345 ;src/main.c:1872: doorKey[0] = 4;	// toad snot
   3098 21r0Fr00      [10] 8346 	ld	hl, #_doorKey
   309B 36 04         [10] 8347 	ld	(hl), #0x04
                           8348 ;src/main.c:1873: doorKey[1] = 6;	// newt eye
   309D 21r10r00      [10] 8349 	ld	hl, #(_doorKey + 0x0001)
   30A0 36 06         [10] 8350 	ld	(hl), #0x06
                           8351 ;src/main.c:1874: doorKey[2] = 5; // diamond dust
   30A2 21r11r00      [10] 8352 	ld	hl, #(_doorKey + 0x0002)
   30A5 36 05         [10] 8353 	ld	(hl), #0x05
                           8354 ;src/main.c:1875: doorKey[3] = 6; // newt eye
   30A7 21r12r00      [10] 8355 	ld	hl, #(_doorKey + 0x0003)
   30AA 36 06         [10] 8356 	ld	(hl), #0x06
                           8357 ;src/main.c:1876: doorKey[4] = 4; // toad snot
   30AC 21r13r00      [10] 8358 	ld	hl, #(_doorKey + 0x0004)
   30AF 36 04         [10] 8359 	ld	(hl), #0x04
                           8360 ;src/main.c:1878: storeX = 51;
   30B1 21r19r00      [10] 8361 	ld	hl,#_storeX + 0
   30B4 36 33         [10] 8362 	ld	(hl), #0x33
                           8363 ;src/main.c:1879: storeY = 55;
   30B6 21r1Ar00      [10] 8364 	ld	hl,#_storeY + 0
   30B9 36 37         [10] 8365 	ld	(hl), #0x37
                           8366 ;src/main.c:1880: break;
   30BB C3rF2r37      [10] 8367 	jp	00113$
                           8368 ;src/main.c:1883: case 2: {			 
   30BE                    8369 00103$:
                           8370 ;src/main.c:1885: SetEnemyParams(2, GHOST,	M_linear_XY, 	D_right,    1,  3, 120,   0,   0);						
   30BE 21 00 00      [10] 8371 	ld	hl, #0x0000
   30C1 E5            [11] 8372 	push	hl
   30C2 21 03 78      [10] 8373 	ld	hl, #0x7803
   30C5 E5            [11] 8374 	push	hl
   30C6 26 01         [ 7] 8375 	ld	h, #0x01
   30C8 E5            [11] 8376 	push	hl
   30C9 21 04 02      [10] 8377 	ld	hl, #0x0204
   30CC E5            [11] 8378 	push	hl
   30CD 3E 02         [ 7] 8379 	ld	a, #0x02
   30CF F5            [11] 8380 	push	af
   30D0 33            [ 6] 8381 	inc	sp
   30D1 CDrA1r2E      [17] 8382 	call	_SetEnemyParams
   30D4 21 09 00      [10] 8383 	ld	hl, #9
   30D7 39            [11] 8384 	add	hl, sp
   30D8 F9            [ 6] 8385 	ld	sp, hl
                           8386 ;src/main.c:1886: SetEnemyParams(3, GHOST,	M_linear_XY, 	D_left,     1, 73,  99,   0,   0);
   30D9 21 00 00      [10] 8387 	ld	hl, #0x0000
   30DC E5            [11] 8388 	push	hl
   30DD 21 49 63      [10] 8389 	ld	hl, #0x6349
   30E0 E5            [11] 8390 	push	hl
   30E1 21 02 01      [10] 8391 	ld	hl, #0x0102
   30E4 E5            [11] 8392 	push	hl
   30E5 21 04 02      [10] 8393 	ld	hl, #0x0204
   30E8 E5            [11] 8394 	push	hl
   30E9 3E 03         [ 7] 8395 	ld	a, #0x03
   30EB F5            [11] 8396 	push	af
   30EC 33            [ 6] 8397 	inc	sp
   30ED CDrA1r2E      [17] 8398 	call	_SetEnemyParams
   30F0 21 09 00      [10] 8399 	ld	hl, #9
   30F3 39            [11] 8400 	add	hl, sp
   30F4 F9            [ 6] 8401 	ld	sp, hl
                           8402 ;src/main.c:1887: SetEnemyParams(4, BAT,	 	M_linear_X,    	D_right,    1, 22,  58,  22,  60);																		
   30F5 21 16 3C      [10] 8403 	ld	hl, #0x3c16
   30F8 E5            [11] 8404 	push	hl
   30F9 26 3A         [ 7] 8405 	ld	h, #0x3a
   30FB E5            [11] 8406 	push	hl
   30FC 21 03 01      [10] 8407 	ld	hl, #0x0103
   30FF E5            [11] 8408 	push	hl
   3100 21 05 00      [10] 8409 	ld	hl, #0x0005
   3103 E5            [11] 8410 	push	hl
   3104 3E 04         [ 7] 8411 	ld	a, #0x04
   3106 F5            [11] 8412 	push	af
   3107 33            [ 6] 8413 	inc	sp
   3108 CDrA1r2E      [17] 8414 	call	_SetEnemyParams
   310B 21 09 00      [10] 8415 	ld	hl, #9
   310E 39            [11] 8416 	add	hl, sp
   310F F9            [ 6] 8417 	ld	sp, hl
                           8418 ;src/main.c:1888: SetEnemyParams(5, WITCH,	M_linear_X,		D_left,     1,  3,  78,   2,  73);
   3110 21 02 49      [10] 8419 	ld	hl, #0x4902
   3113 E5            [11] 8420 	push	hl
   3114 21 03 4E      [10] 8421 	ld	hl, #0x4e03
   3117 E5            [11] 8422 	push	hl
   3118 21 02 01      [10] 8423 	ld	hl, #0x0102
   311B E5            [11] 8424 	push	hl
   311C 21 06 00      [10] 8425 	ld	hl, #0x0006
   311F E5            [11] 8426 	push	hl
   3120 3E 05         [ 7] 8427 	ld	a, #0x05
   3122 F5            [11] 8428 	push	af
   3123 33            [ 6] 8429 	inc	sp
   3124 CDrA1r2E      [17] 8430 	call	_SetEnemyParams
   3127 21 09 00      [10] 8431 	ld	hl, #9
   312A 39            [11] 8432 	add	hl, sp
   312B F9            [ 6] 8433 	ld	sp, hl
                           8434 ;src/main.c:1890: spr[0].x = spr[0].px = 58; 
   312C 21r3Dr00      [10] 8435 	ld	hl, #(_spr + 0x0004)
   312F 36 3A         [10] 8436 	ld	(hl), #0x3a
   3131 21r3Br00      [10] 8437 	ld	hl, #(_spr + 0x0002)
   3134 36 3A         [10] 8438 	ld	(hl), #0x3a
                           8439 ;src/main.c:1891: spr[0].y = spr[0].py = 178;			
   3136 21r3Er00      [10] 8440 	ld	hl, #(_spr + 0x0005)
   3139 36 B2         [10] 8441 	ld	(hl), #0xb2
   313B 21r3Cr00      [10] 8442 	ld	hl, #(_spr + 0x0003)
   313E 36 B2         [10] 8443 	ld	(hl), #0xb2
                           8444 ;src/main.c:1893: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk2_end);
   3140 21rFFrFF      [10] 8445 	ld	hl, #(_mappk2 - 0x0001)
   3143 E5            [11] 8446 	push	hl
   3144 21 00 16      [10] 8447 	ld	hl, #0x1600
   3147 E5            [11] 8448 	push	hl
   3148 CDr00r00      [17] 8449 	call	_cpct_zx7b_decrunch_s
                           8450 ;src/main.c:1895: lName = "2;1@CEMETERY";
   314B 21r2Ar38      [10] 8451 	ld	hl, #___str_37+0
   314E 22r02r00      [16] 8452 	ld	(_lName), hl
                           8453 ;src/main.c:1897: doorKey[0] = 4;	// toad snot
   3151 21r0Fr00      [10] 8454 	ld	hl, #_doorKey
   3154 36 04         [10] 8455 	ld	(hl), #0x04
                           8456 ;src/main.c:1898: doorKey[1] = 5;	// diamond dust
   3156 21r10r00      [10] 8457 	ld	hl, #(_doorKey + 0x0001)
   3159 36 05         [10] 8458 	ld	(hl), #0x05
                           8459 ;src/main.c:1899: doorKey[2] = 6; // newt eye
   315B 21r11r00      [10] 8460 	ld	hl, #(_doorKey + 0x0002)
   315E 36 06         [10] 8461 	ld	(hl), #0x06
                           8462 ;src/main.c:1900: doorKey[3] = 7;	// mammoth poop
   3160 21r12r00      [10] 8463 	ld	hl, #(_doorKey + 0x0003)
   3163 36 07         [10] 8464 	ld	(hl), #0x07
                           8465 ;src/main.c:1901: doorKey[4] = 8; // kraken ink
   3165 21r13r00      [10] 8466 	ld	hl, #(_doorKey + 0x0004)
   3168 36 08         [10] 8467 	ld	(hl), #0x08
                           8468 ;src/main.c:1903: storeX = 3;
   316A 21r19r00      [10] 8469 	ld	hl,#_storeX + 0
   316D 36 03         [10] 8470 	ld	(hl), #0x03
                           8471 ;src/main.c:1904: storeY = 11;
   316F 21r1Ar00      [10] 8472 	ld	hl,#_storeY + 0
   3172 36 0B         [10] 8473 	ld	(hl), #0x0b
                           8474 ;src/main.c:1905: break;
   3174 C3rF2r37      [10] 8475 	jp	00113$
                           8476 ;src/main.c:1908: case 3: {			 
   3177                    8477 00104$:
                           8478 ;src/main.c:1910: SetEnemyParams(2, GHOST,	M_linear_XY, 	D_left,     1,  2, 180,   0,   0);
   3177 21 00 00      [10] 8479 	ld	hl, #0x0000
   317A E5            [11] 8480 	push	hl
   317B 21 02 B4      [10] 8481 	ld	hl, #0xb402
   317E E5            [11] 8482 	push	hl
   317F 26 01         [ 7] 8483 	ld	h, #0x01
   3181 E5            [11] 8484 	push	hl
   3182 21 04 02      [10] 8485 	ld	hl, #0x0204
   3185 E5            [11] 8486 	push	hl
   3186 3E 02         [ 7] 8487 	ld	a, #0x02
   3188 F5            [11] 8488 	push	af
   3189 33            [ 6] 8489 	inc	sp
   318A CDrA1r2E      [17] 8490 	call	_SetEnemyParams
   318D 21 09 00      [10] 8491 	ld	hl, #9
   3190 39            [11] 8492 	add	hl, sp
   3191 F9            [ 6] 8493 	ld	sp, hl
                           8494 ;src/main.c:1911: SetEnemyParams(3, GHOST,	M_linear_XY, 	D_right,    1,  2, 136,   0,   0);
   3192 21 00 00      [10] 8495 	ld	hl, #0x0000
   3195 E5            [11] 8496 	push	hl
   3196 21 02 88      [10] 8497 	ld	hl, #0x8802
   3199 E5            [11] 8498 	push	hl
   319A 21 03 01      [10] 8499 	ld	hl, #0x0103
   319D E5            [11] 8500 	push	hl
   319E 21 04 02      [10] 8501 	ld	hl, #0x0204
   31A1 E5            [11] 8502 	push	hl
   31A2 3E 03         [ 7] 8503 	ld	a, #0x03
   31A4 F5            [11] 8504 	push	af
   31A5 33            [ 6] 8505 	inc	sp
   31A6 CDrA1r2E      [17] 8506 	call	_SetEnemyParams
   31A9 21 09 00      [10] 8507 	ld	hl, #9
   31AC 39            [11] 8508 	add	hl, sp
   31AD F9            [ 6] 8509 	ld	sp, hl
                           8510 ;src/main.c:1912: SetEnemyParams(4, GHOST,	M_linear_XY, 	D_left,     1, 70,  40,   0,   0);
   31AE 21 00 00      [10] 8511 	ld	hl, #0x0000
   31B1 E5            [11] 8512 	push	hl
   31B2 21 46 28      [10] 8513 	ld	hl, #0x2846
   31B5 E5            [11] 8514 	push	hl
   31B6 21 02 01      [10] 8515 	ld	hl, #0x0102
   31B9 E5            [11] 8516 	push	hl
   31BA 21 04 02      [10] 8517 	ld	hl, #0x0204
   31BD E5            [11] 8518 	push	hl
   31BE 3E 04         [ 7] 8519 	ld	a, #0x04
   31C0 F5            [11] 8520 	push	af
   31C1 33            [ 6] 8521 	inc	sp
   31C2 CDrA1r2E      [17] 8522 	call	_SetEnemyParams
   31C5 21 09 00      [10] 8523 	ld	hl, #9
   31C8 39            [11] 8524 	add	hl, sp
   31C9 F9            [ 6] 8525 	ld	sp, hl
                           8526 ;src/main.c:1913: SetEnemyParams(5, GHOST,	M_linear_XY,	D_left,     1,  2,  40,   0,   0);
   31CA 21 00 00      [10] 8527 	ld	hl, #0x0000
   31CD E5            [11] 8528 	push	hl
   31CE 21 02 28      [10] 8529 	ld	hl, #0x2802
   31D1 E5            [11] 8530 	push	hl
   31D2 26 01         [ 7] 8531 	ld	h, #0x01
   31D4 E5            [11] 8532 	push	hl
   31D5 21 04 02      [10] 8533 	ld	hl, #0x0204
   31D8 E5            [11] 8534 	push	hl
   31D9 3E 05         [ 7] 8535 	ld	a, #0x05
   31DB F5            [11] 8536 	push	af
   31DC 33            [ 6] 8537 	inc	sp
   31DD CDrA1r2E      [17] 8538 	call	_SetEnemyParams
   31E0 21 09 00      [10] 8539 	ld	hl, #9
   31E3 39            [11] 8540 	add	hl, sp
   31E4 F9            [ 6] 8541 	ld	sp, hl
                           8542 ;src/main.c:1915: spr[0].x = spr[0].px = 36; 
   31E5 21r3Dr00      [10] 8543 	ld	hl, #(_spr + 0x0004)
   31E8 36 24         [10] 8544 	ld	(hl), #0x24
   31EA 21r3Br00      [10] 8545 	ld	hl, #(_spr + 0x0002)
   31ED 36 24         [10] 8546 	ld	(hl), #0x24
                           8547 ;src/main.c:1916: spr[0].y = spr[0].py = 178;			
   31EF 21r3Er00      [10] 8548 	ld	hl, #(_spr + 0x0005)
   31F2 36 B2         [10] 8549 	ld	(hl), #0xb2
   31F4 21r3Cr00      [10] 8550 	ld	hl, #(_spr + 0x0003)
   31F7 36 B2         [10] 8551 	ld	(hl), #0xb2
                           8552 ;src/main.c:1918: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk3_end);
   31F9 21rFFrFF      [10] 8553 	ld	hl, #(_mappk3 - 0x0001)
   31FC E5            [11] 8554 	push	hl
   31FD 21 00 16      [10] 8555 	ld	hl, #0x1600
   3200 E5            [11] 8556 	push	hl
   3201 CDr00r00      [17] 8557 	call	_cpct_zx7b_decrunch_s
                           8558 ;src/main.c:1920: lName = "2;2@CEMETERY";
   3204 21r37r38      [10] 8559 	ld	hl, #___str_38+0
   3207 22r02r00      [16] 8560 	ld	(_lName), hl
                           8561 ;src/main.c:1922: doorKey[0] = 5;	// diamond dust
   320A 21r0Fr00      [10] 8562 	ld	hl, #_doorKey
   320D 36 05         [10] 8563 	ld	(hl), #0x05
                           8564 ;src/main.c:1923: doorKey[1] = 7; // mammooth poop
   320F 21r10r00      [10] 8565 	ld	hl, #(_doorKey + 0x0001)
   3212 36 07         [10] 8566 	ld	(hl), #0x07
                           8567 ;src/main.c:1924: doorKey[2] = 6; // newt eye
   3214 21r11r00      [10] 8568 	ld	hl, #(_doorKey + 0x0002)
   3217 36 06         [10] 8569 	ld	(hl), #0x06
                           8570 ;src/main.c:1925: doorKey[3] = 7; // mammooth poop
   3219 21r12r00      [10] 8571 	ld	hl, #(_doorKey + 0x0003)
   321C 36 07         [10] 8572 	ld	(hl), #0x07
                           8573 ;src/main.c:1926: doorKey[4] = 5; // diamond dust
   321E 21r13r00      [10] 8574 	ld	hl, #(_doorKey + 0x0004)
   3221 36 05         [10] 8575 	ld	(hl), #0x05
                           8576 ;src/main.c:1928: storeX = 41;
   3223 21r19r00      [10] 8577 	ld	hl,#_storeX + 0
   3226 36 29         [10] 8578 	ld	(hl), #0x29
                           8579 ;src/main.c:1929: storeY = 71;
   3228 21r1Ar00      [10] 8580 	ld	hl,#_storeY + 0
   322B 36 47         [10] 8581 	ld	(hl), #0x47
                           8582 ;src/main.c:1930: break;
   322D C3rF2r37      [10] 8583 	jp	00113$
                           8584 ;src/main.c:1933: case 4: {			 
   3230                    8585 00105$:
                           8586 ;src/main.c:1935: SetEnemyParams(2, BAT,		M_linear_X, 	D_left,     1, 73, 134,  16,  73);							
   3230 21 10 49      [10] 8587 	ld	hl, #0x4910
   3233 E5            [11] 8588 	push	hl
   3234 21 49 86      [10] 8589 	ld	hl, #0x8649
   3237 E5            [11] 8590 	push	hl
   3238 21 02 01      [10] 8591 	ld	hl, #0x0102
   323B E5            [11] 8592 	push	hl
   323C 21 05 00      [10] 8593 	ld	hl, #0x0005
   323F E5            [11] 8594 	push	hl
   3240 3E 02         [ 7] 8595 	ld	a, #0x02
   3242 F5            [11] 8596 	push	af
   3243 33            [ 6] 8597 	inc	sp
   3244 CDrA1r2E      [17] 8598 	call	_SetEnemyParams
   3247 21 09 00      [10] 8599 	ld	hl, #9
   324A 39            [11] 8600 	add	hl, sp
   324B F9            [ 6] 8601 	ld	sp, hl
                           8602 ;src/main.c:1936: SetEnemyParams(3, BAT,		M_linear_X, 	D_right,    1,  3,  94,   2,  73);		
   324C 21 02 49      [10] 8603 	ld	hl, #0x4902
   324F E5            [11] 8604 	push	hl
   3250 21 03 5E      [10] 8605 	ld	hl, #0x5e03
   3253 E5            [11] 8606 	push	hl
   3254 26 01         [ 7] 8607 	ld	h, #0x01
   3256 E5            [11] 8608 	push	hl
   3257 21 05 00      [10] 8609 	ld	hl, #0x0005
   325A E5            [11] 8610 	push	hl
   325B 3E 03         [ 7] 8611 	ld	a, #0x03
   325D F5            [11] 8612 	push	af
   325E 33            [ 6] 8613 	inc	sp
   325F CDrA1r2E      [17] 8614 	call	_SetEnemyParams
   3262 21 09 00      [10] 8615 	ld	hl, #9
   3265 39            [11] 8616 	add	hl, sp
   3266 F9            [ 6] 8617 	ld	sp, hl
                           8618 ;src/main.c:1937: SetEnemyParams(4, KNIGHT,	M_linear_XY, 	D_down,    	1, 17,  50,   0,   0);
   3267 21 00 00      [10] 8619 	ld	hl, #0x0000
   326A E5            [11] 8620 	push	hl
   326B 21 11 32      [10] 8621 	ld	hl, #0x3211
   326E E5            [11] 8622 	push	hl
   326F 21 01 01      [10] 8623 	ld	hl, #0x0101
   3272 E5            [11] 8624 	push	hl
   3273 21 03 02      [10] 8625 	ld	hl, #0x0203
   3276 E5            [11] 8626 	push	hl
   3277 3E 04         [ 7] 8627 	ld	a, #0x04
   3279 F5            [11] 8628 	push	af
   327A 33            [ 6] 8629 	inc	sp
   327B CDrA1r2E      [17] 8630 	call	_SetEnemyParams
   327E 21 09 00      [10] 8631 	ld	hl, #9
   3281 39            [11] 8632 	add	hl, sp
   3282 F9            [ 6] 8633 	ld	sp, hl
                           8634 ;src/main.c:1938: SetEnemyParams(5, KNIGHT,	M_linear_XY, 	D_up,     	1, 57, 156,   0,   0);
   3283 21 00 00      [10] 8635 	ld	hl, #0x0000
   3286 E5            [11] 8636 	push	hl
   3287 21 39 9C      [10] 8637 	ld	hl, #0x9c39
   328A E5            [11] 8638 	push	hl
   328B 21 00 01      [10] 8639 	ld	hl, #0x0100
   328E E5            [11] 8640 	push	hl
   328F 21 03 02      [10] 8641 	ld	hl, #0x0203
   3292 E5            [11] 8642 	push	hl
   3293 3E 05         [ 7] 8643 	ld	a, #0x05
   3295 F5            [11] 8644 	push	af
   3296 33            [ 6] 8645 	inc	sp
   3297 CDrA1r2E      [17] 8646 	call	_SetEnemyParams
   329A 21 09 00      [10] 8647 	ld	hl, #9
   329D 39            [11] 8648 	add	hl, sp
   329E F9            [ 6] 8649 	ld	sp, hl
                           8650 ;src/main.c:1940: spr[0].x = spr[0].px = 6; 
   329F 21r3Dr00      [10] 8651 	ld	hl, #(_spr + 0x0004)
   32A2 36 06         [10] 8652 	ld	(hl), #0x06
   32A4 21r3Br00      [10] 8653 	ld	hl, #(_spr + 0x0002)
   32A7 36 06         [10] 8654 	ld	(hl), #0x06
                           8655 ;src/main.c:1941: spr[0].y = spr[0].py = 175;			
   32A9 21r3Er00      [10] 8656 	ld	hl, #(_spr + 0x0005)
   32AC 36 AF         [10] 8657 	ld	(hl), #0xaf
   32AE 21r3Cr00      [10] 8658 	ld	hl, #(_spr + 0x0003)
   32B1 36 AF         [10] 8659 	ld	(hl), #0xaf
                           8660 ;src/main.c:1943: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk4_end);
   32B3 21rFFrFF      [10] 8661 	ld	hl, #(_mappk4 - 0x0001)
   32B6 E5            [11] 8662 	push	hl
   32B7 21 00 16      [10] 8663 	ld	hl, #0x1600
   32BA E5            [11] 8664 	push	hl
   32BB CDr00r00      [17] 8665 	call	_cpct_zx7b_decrunch_s
                           8666 ;src/main.c:1945: lName = "3;1@@CELLARS";	
   32BE 21r44r38      [10] 8667 	ld	hl, #___str_39+0
   32C1 22r02r00      [16] 8668 	ld	(_lName), hl
                           8669 ;src/main.c:1947: doorKey[0] = 4; // toad snot
   32C4 21r0Fr00      [10] 8670 	ld	hl, #_doorKey
   32C7 36 04         [10] 8671 	ld	(hl), #0x04
                           8672 ;src/main.c:1948: doorKey[1] = 9; // mermaid tear
   32C9 21r10r00      [10] 8673 	ld	hl, #(_doorKey + 0x0001)
   32CC 36 09         [10] 8674 	ld	(hl), #0x09
                           8675 ;src/main.c:1949: doorKey[2] = 10;// martian mushroom
   32CE 21r11r00      [10] 8676 	ld	hl, #(_doorKey + 0x0002)
   32D1 36 0A         [10] 8677 	ld	(hl), #0x0a
                           8678 ;src/main.c:1950: doorKey[3] = 9; // mermaid tear
   32D3 21r12r00      [10] 8679 	ld	hl, #(_doorKey + 0x0003)
   32D6 36 09         [10] 8680 	ld	(hl), #0x09
                           8681 ;src/main.c:1951: doorKey[4] = 4; // toad snot
   32D8 21r13r00      [10] 8682 	ld	hl, #(_doorKey + 0x0004)
   32DB 36 04         [10] 8683 	ld	(hl), #0x04
                           8684 ;src/main.c:1953: storeX = 5;
   32DD 21r19r00      [10] 8685 	ld	hl,#_storeX + 0
   32E0 36 05         [10] 8686 	ld	(hl), #0x05
                           8687 ;src/main.c:1954: storeY = 103;		
   32E2 21r1Ar00      [10] 8688 	ld	hl,#_storeY + 0
   32E5 36 67         [10] 8689 	ld	(hl), #0x67
                           8690 ;src/main.c:1955: break;
   32E7 C3rF2r37      [10] 8691 	jp	00113$
                           8692 ;src/main.c:1958: case 5: {			 
   32EA                    8693 00106$:
                           8694 ;src/main.c:1960: SetEnemyParams(2, SENTINEL,	M_linear_X, 	D_left,     1,  3, 142,   2,  73);
   32EA 21 02 49      [10] 8695 	ld	hl, #0x4902
   32ED E5            [11] 8696 	push	hl
   32EE 21 03 8E      [10] 8697 	ld	hl, #0x8e03
   32F1 E5            [11] 8698 	push	hl
   32F2 21 02 01      [10] 8699 	ld	hl, #0x0102
   32F5 E5            [11] 8700 	push	hl
   32F6 26 00         [ 7] 8701 	ld	h, #0x00
   32F8 E5            [11] 8702 	push	hl
   32F9 3E 02         [ 7] 8703 	ld	a, #0x02
   32FB F5            [11] 8704 	push	af
   32FC 33            [ 6] 8705 	inc	sp
   32FD CDrA1r2E      [17] 8706 	call	_SetEnemyParams
   3300 21 09 00      [10] 8707 	ld	hl, #9
   3303 39            [11] 8708 	add	hl, sp
   3304 F9            [ 6] 8709 	ld	sp, hl
                           8710 ;src/main.c:1961: SetEnemyParams(3, SENTINEL,	M_linear_X, 	D_right,    1, 73, 102,   2,  73);						
   3305 21 02 49      [10] 8711 	ld	hl, #0x4902
   3308 E5            [11] 8712 	push	hl
   3309 21 49 66      [10] 8713 	ld	hl, #0x6649
   330C E5            [11] 8714 	push	hl
   330D 21 03 01      [10] 8715 	ld	hl, #0x0103
   3310 E5            [11] 8716 	push	hl
   3311 21 02 00      [10] 8717 	ld	hl, #0x0002
   3314 E5            [11] 8718 	push	hl
   3315 3E 03         [ 7] 8719 	ld	a, #0x03
   3317 F5            [11] 8720 	push	af
   3318 33            [ 6] 8721 	inc	sp
   3319 CDrA1r2E      [17] 8722 	call	_SetEnemyParams
   331C 21 09 00      [10] 8723 	ld	hl, #9
   331F 39            [11] 8724 	add	hl, sp
   3320 F9            [ 6] 8725 	ld	sp, hl
                           8726 ;src/main.c:1962: SetEnemyParams(4, KNIGHT,	M_linear_Y, 	D_down,     1, 38,  50,  50, 178);
   3321 21 32 B2      [10] 8727 	ld	hl, #0xb232
   3324 E5            [11] 8728 	push	hl
   3325 21 26 32      [10] 8729 	ld	hl, #0x3226
   3328 E5            [11] 8730 	push	hl
   3329 21 01 01      [10] 8731 	ld	hl, #0x0101
   332C E5            [11] 8732 	push	hl
   332D 2E 03         [ 7] 8733 	ld	l, #0x03
   332F E5            [11] 8734 	push	hl
   3330 3E 04         [ 7] 8735 	ld	a, #0x04
   3332 F5            [11] 8736 	push	af
   3333 33            [ 6] 8737 	inc	sp
   3334 CDrA1r2E      [17] 8738 	call	_SetEnemyParams
   3337 21 09 00      [10] 8739 	ld	hl, #9
   333A 39            [11] 8740 	add	hl, sp
   333B F9            [ 6] 8741 	ld	sp, hl
                           8742 ;src/main.c:1963: SetEnemyParams(5, WITCH,	M_linear_X,		D_left,     1,  3,  62,   2,  73);
   333C 21 02 49      [10] 8743 	ld	hl, #0x4902
   333F E5            [11] 8744 	push	hl
   3340 21 03 3E      [10] 8745 	ld	hl, #0x3e03
   3343 E5            [11] 8746 	push	hl
   3344 21 02 01      [10] 8747 	ld	hl, #0x0102
   3347 E5            [11] 8748 	push	hl
   3348 21 06 00      [10] 8749 	ld	hl, #0x0006
   334B E5            [11] 8750 	push	hl
   334C 3E 05         [ 7] 8751 	ld	a, #0x05
   334E F5            [11] 8752 	push	af
   334F 33            [ 6] 8753 	inc	sp
   3350 CDrA1r2E      [17] 8754 	call	_SetEnemyParams
   3353 21 09 00      [10] 8755 	ld	hl, #9
   3356 39            [11] 8756 	add	hl, sp
   3357 F9            [ 6] 8757 	ld	sp, hl
                           8758 ;src/main.c:1965: spr[0].x = spr[0].px = 34; 
   3358 21r3Dr00      [10] 8759 	ld	hl, #(_spr + 0x0004)
   335B 36 22         [10] 8760 	ld	(hl), #0x22
   335D 21r3Br00      [10] 8761 	ld	hl, #(_spr + 0x0002)
   3360 36 22         [10] 8762 	ld	(hl), #0x22
                           8763 ;src/main.c:1966: spr[0].y = spr[0].py = 176;			
   3362 21r3Er00      [10] 8764 	ld	hl, #(_spr + 0x0005)
   3365 36 B0         [10] 8765 	ld	(hl), #0xb0
   3367 21r3Cr00      [10] 8766 	ld	hl, #(_spr + 0x0003)
   336A 36 B0         [10] 8767 	ld	(hl), #0xb0
                           8768 ;src/main.c:1968: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk5_end);
   336C 21rFFrFF      [10] 8769 	ld	hl, #(_mappk5 - 0x0001)
   336F E5            [11] 8770 	push	hl
   3370 21 00 16      [10] 8771 	ld	hl, #0x1600
   3373 E5            [11] 8772 	push	hl
   3374 CDr00r00      [17] 8773 	call	_cpct_zx7b_decrunch_s
                           8774 ;src/main.c:1970: lName = "3;2@@CELLARS";
   3377 21r51r38      [10] 8775 	ld	hl, #___str_40+0
   337A 22r02r00      [16] 8776 	ld	(_lName), hl
                           8777 ;src/main.c:1972: doorKey[0] = 7; // mammooth poop
   337D 21r0Fr00      [10] 8778 	ld	hl, #_doorKey
   3380 36 07         [10] 8779 	ld	(hl), #0x07
                           8780 ;src/main.c:1973: doorKey[1] = 8; // kraken ink
   3382 21r10r00      [10] 8781 	ld	hl, #(_doorKey + 0x0001)
   3385 36 08         [10] 8782 	ld	(hl), #0x08
                           8783 ;src/main.c:1974: doorKey[2] = 9; // mermaid tear
   3387 21r11r00      [10] 8784 	ld	hl, #(_doorKey + 0x0002)
   338A 36 09         [10] 8785 	ld	(hl), #0x09
                           8786 ;src/main.c:1975: doorKey[3] = 6; // newt eye
   338C 21r12r00      [10] 8787 	ld	hl, #(_doorKey + 0x0003)
   338F 36 06         [10] 8788 	ld	(hl), #0x06
                           8789 ;src/main.c:1976: doorKey[4] = 5; // diamond dust
   3391 21r13r00      [10] 8790 	ld	hl, #(_doorKey + 0x0004)
   3394 36 05         [10] 8791 	ld	(hl), #0x05
                           8792 ;src/main.c:1978: storeX = 3;
   3396 21r19r00      [10] 8793 	ld	hl,#_storeX + 0
   3399 36 03         [10] 8794 	ld	(hl), #0x03
                           8795 ;src/main.c:1979: storeY = 143;
   339B 21r1Ar00      [10] 8796 	ld	hl,#_storeY + 0
   339E 36 8F         [10] 8797 	ld	(hl), #0x8f
                           8798 ;src/main.c:1980: break;
   33A0 C3rF2r37      [10] 8799 	jp	00113$
                           8800 ;src/main.c:1983: case 6: {			 
   33A3                    8801 00107$:
                           8802 ;src/main.c:1985: SetEnemyParams(2, KNIGHT,	M_linear_XY, 	D_up,     	1,  2, 174,   0,   0);
   33A3 21 00 00      [10] 8803 	ld	hl, #0x0000
   33A6 E5            [11] 8804 	push	hl
   33A7 21 02 AE      [10] 8805 	ld	hl, #0xae02
   33AA E5            [11] 8806 	push	hl
   33AB 21 00 01      [10] 8807 	ld	hl, #0x0100
   33AE E5            [11] 8808 	push	hl
   33AF 21 03 02      [10] 8809 	ld	hl, #0x0203
   33B2 E5            [11] 8810 	push	hl
   33B3 3E 02         [ 7] 8811 	ld	a, #0x02
   33B5 F5            [11] 8812 	push	af
   33B6 33            [ 6] 8813 	inc	sp
   33B7 CDrA1r2E      [17] 8814 	call	_SetEnemyParams
   33BA 21 09 00      [10] 8815 	ld	hl, #9
   33BD 39            [11] 8816 	add	hl, sp
   33BE F9            [ 6] 8817 	ld	sp, hl
                           8818 ;src/main.c:1986: SetEnemyParams(3, KNIGHT,	M_linear_XY, 	D_left,    	1, 60, 116,   0,   0);
   33BF 21 00 00      [10] 8819 	ld	hl, #0x0000
   33C2 E5            [11] 8820 	push	hl
   33C3 21 3C 74      [10] 8821 	ld	hl, #0x743c
   33C6 E5            [11] 8822 	push	hl
   33C7 21 02 01      [10] 8823 	ld	hl, #0x0102
   33CA E5            [11] 8824 	push	hl
   33CB 21 03 02      [10] 8825 	ld	hl, #0x0203
   33CE E5            [11] 8826 	push	hl
   33CF 3E 03         [ 7] 8827 	ld	a, #0x03
   33D1 F5            [11] 8828 	push	af
   33D2 33            [ 6] 8829 	inc	sp
   33D3 CDrA1r2E      [17] 8830 	call	_SetEnemyParams
   33D6 21 09 00      [10] 8831 	ld	hl, #9
   33D9 39            [11] 8832 	add	hl, sp
   33DA F9            [ 6] 8833 	ld	sp, hl
                           8834 ;src/main.c:1987: SetEnemyParams(4, SENTINEL,	M_linear_XY, 	D_left,     1, 73,  96,   0,   0);
   33DB 21 00 00      [10] 8835 	ld	hl, #0x0000
   33DE E5            [11] 8836 	push	hl
   33DF 21 49 60      [10] 8837 	ld	hl, #0x6049
   33E2 E5            [11] 8838 	push	hl
   33E3 21 02 01      [10] 8839 	ld	hl, #0x0102
   33E6 E5            [11] 8840 	push	hl
   33E7 26 02         [ 7] 8841 	ld	h, #0x02
   33E9 E5            [11] 8842 	push	hl
   33EA 3E 04         [ 7] 8843 	ld	a, #0x04
   33EC F5            [11] 8844 	push	af
   33ED 33            [ 6] 8845 	inc	sp
   33EE CDrA1r2E      [17] 8846 	call	_SetEnemyParams
   33F1 21 09 00      [10] 8847 	ld	hl, #9
   33F4 39            [11] 8848 	add	hl, sp
   33F5 F9            [ 6] 8849 	ld	sp, hl
                           8850 ;src/main.c:1988: SetEnemyParams(5, WITCH,	M_linear_X,		D_left,     1,  3,  60,   2,  73);
   33F6 21 02 49      [10] 8851 	ld	hl, #0x4902
   33F9 E5            [11] 8852 	push	hl
   33FA 21 03 3C      [10] 8853 	ld	hl, #0x3c03
   33FD E5            [11] 8854 	push	hl
   33FE 21 02 01      [10] 8855 	ld	hl, #0x0102
   3401 E5            [11] 8856 	push	hl
   3402 21 06 00      [10] 8857 	ld	hl, #0x0006
   3405 E5            [11] 8858 	push	hl
   3406 3E 05         [ 7] 8859 	ld	a, #0x05
   3408 F5            [11] 8860 	push	af
   3409 33            [ 6] 8861 	inc	sp
   340A CDrA1r2E      [17] 8862 	call	_SetEnemyParams
   340D 21 09 00      [10] 8863 	ld	hl, #9
   3410 39            [11] 8864 	add	hl, sp
   3411 F9            [ 6] 8865 	ld	sp, hl
                           8866 ;src/main.c:1990: spr[0].x = spr[0].px = 67; 
   3412 21r3Dr00      [10] 8867 	ld	hl, #(_spr + 0x0004)
   3415 36 43         [10] 8868 	ld	(hl), #0x43
   3417 21r3Br00      [10] 8869 	ld	hl, #(_spr + 0x0002)
   341A 36 43         [10] 8870 	ld	(hl), #0x43
                           8871 ;src/main.c:1991: spr[0].y = spr[0].py = 176;			
   341C 21r3Er00      [10] 8872 	ld	hl, #(_spr + 0x0005)
   341F 36 B0         [10] 8873 	ld	(hl), #0xb0
   3421 21r3Cr00      [10] 8874 	ld	hl, #(_spr + 0x0003)
   3424 36 B0         [10] 8875 	ld	(hl), #0xb0
                           8876 ;src/main.c:1993: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk6_end);
   3426 21rFFrFF      [10] 8877 	ld	hl, #(_mappk6 - 0x0001)
   3429 E5            [11] 8878 	push	hl
   342A 21 00 16      [10] 8879 	ld	hl, #0x1600
   342D E5            [11] 8880 	push	hl
   342E CDr00r00      [17] 8881 	call	_cpct_zx7b_decrunch_s
                           8882 ;src/main.c:1995: lName = "4;1@@@CASTLE";	
   3431 21r5Er38      [10] 8883 	ld	hl, #___str_41+0
   3434 22r02r00      [16] 8884 	ld	(_lName), hl
                           8885 ;src/main.c:1997: doorKey[0] = 10; // martian mushroom
   3437 21r0Fr00      [10] 8886 	ld	hl, #_doorKey
   343A 36 0A         [10] 8887 	ld	(hl), #0x0a
                           8888 ;src/main.c:1998: doorKey[1] = 6; // newt eye
   343C 21r10r00      [10] 8889 	ld	hl, #(_doorKey + 0x0001)
   343F 36 06         [10] 8890 	ld	(hl), #0x06
                           8891 ;src/main.c:1999: doorKey[2] = 11; // dragon blood
   3441 21r11r00      [10] 8892 	ld	hl, #(_doorKey + 0x0002)
   3444 36 0B         [10] 8893 	ld	(hl), #0x0b
                           8894 ;src/main.c:2000: doorKey[3] = 6; // newt eye
   3446 21r12r00      [10] 8895 	ld	hl, #(_doorKey + 0x0003)
   3449 36 06         [10] 8896 	ld	(hl), #0x06
                           8897 ;src/main.c:2001: doorKey[4] = 10; // martian mushroom
   344B 21r13r00      [10] 8898 	ld	hl, #(_doorKey + 0x0004)
   344E 36 0A         [10] 8899 	ld	(hl), #0x0a
                           8900 ;src/main.c:2003: storeX = 3;
   3450 21r19r00      [10] 8901 	ld	hl,#_storeX + 0
   3453 36 03         [10] 8902 	ld	(hl), #0x03
                           8903 ;src/main.c:2004: storeY = 11;		
   3455 21r1Ar00      [10] 8904 	ld	hl,#_storeY + 0
   3458 36 0B         [10] 8905 	ld	(hl), #0x0b
                           8906 ;src/main.c:2005: break;
   345A C3rF2r37      [10] 8907 	jp	00113$
                           8908 ;src/main.c:2008: case 7: {			 
   345D                    8909 00108$:
                           8910 ;src/main.c:2010: SetEnemyParams(2, NOBODY,	M_linear_XY, 	D_left,     1,  0,   0,   0,   0);
   345D 21 00 00      [10] 8911 	ld	hl, #0x0000
   3460 E5            [11] 8912 	push	hl
   3461 2E 00         [ 7] 8913 	ld	l, #0x00
   3463 E5            [11] 8914 	push	hl
   3464 21 02 01      [10] 8915 	ld	hl, #0x0102
   3467 E5            [11] 8916 	push	hl
   3468 21 09 02      [10] 8917 	ld	hl, #0x0209
   346B E5            [11] 8918 	push	hl
   346C 3E 02         [ 7] 8919 	ld	a, #0x02
   346E F5            [11] 8920 	push	af
   346F 33            [ 6] 8921 	inc	sp
   3470 CDrA1r2E      [17] 8922 	call	_SetEnemyParams
   3473 21 09 00      [10] 8923 	ld	hl, #9
   3476 39            [11] 8924 	add	hl, sp
   3477 F9            [ 6] 8925 	ld	sp, hl
                           8926 ;src/main.c:2011: SetEnemyParams(3, GHOST,	M_linear_XY, 	D_up,       1,  3, 176,   0,   0);
   3478 21 00 00      [10] 8927 	ld	hl, #0x0000
   347B E5            [11] 8928 	push	hl
   347C 21 03 B0      [10] 8929 	ld	hl, #0xb003
   347F E5            [11] 8930 	push	hl
   3480 21 00 01      [10] 8931 	ld	hl, #0x0100
   3483 E5            [11] 8932 	push	hl
   3484 21 04 02      [10] 8933 	ld	hl, #0x0204
   3487 E5            [11] 8934 	push	hl
   3488 3E 03         [ 7] 8935 	ld	a, #0x03
   348A F5            [11] 8936 	push	af
   348B 33            [ 6] 8937 	inc	sp
   348C CDrA1r2E      [17] 8938 	call	_SetEnemyParams
   348F 21 09 00      [10] 8939 	ld	hl, #9
   3492 39            [11] 8940 	add	hl, sp
   3493 F9            [ 6] 8941 	ld	sp, hl
                           8942 ;src/main.c:2012: SetEnemyParams(4, KNIGHT,	M_linear_XY, 	D_right,    1,  3,  44,   0,   0);
   3494 21 00 00      [10] 8943 	ld	hl, #0x0000
   3497 E5            [11] 8944 	push	hl
   3498 21 03 2C      [10] 8945 	ld	hl, #0x2c03
   349B E5            [11] 8946 	push	hl
   349C 26 01         [ 7] 8947 	ld	h, #0x01
   349E E5            [11] 8948 	push	hl
   349F 26 02         [ 7] 8949 	ld	h, #0x02
   34A1 E5            [11] 8950 	push	hl
   34A2 3E 04         [ 7] 8951 	ld	a, #0x04
   34A4 F5            [11] 8952 	push	af
   34A5 33            [ 6] 8953 	inc	sp
   34A6 CDrA1r2E      [17] 8954 	call	_SetEnemyParams
   34A9 21 09 00      [10] 8955 	ld	hl, #9
   34AC 39            [11] 8956 	add	hl, sp
   34AD F9            [ 6] 8957 	ld	sp, hl
                           8958 ;src/main.c:2013: SetEnemyParams(5, KNIGHT,	M_linear_XY, 	D_down,     1, 73,  44,   0,   0);
   34AE 21 00 00      [10] 8959 	ld	hl, #0x0000
   34B1 E5            [11] 8960 	push	hl
   34B2 21 49 2C      [10] 8961 	ld	hl, #0x2c49
   34B5 E5            [11] 8962 	push	hl
   34B6 21 01 01      [10] 8963 	ld	hl, #0x0101
   34B9 E5            [11] 8964 	push	hl
   34BA 21 03 02      [10] 8965 	ld	hl, #0x0203
   34BD E5            [11] 8966 	push	hl
   34BE 3E 05         [ 7] 8967 	ld	a, #0x05
   34C0 F5            [11] 8968 	push	af
   34C1 33            [ 6] 8969 	inc	sp
   34C2 CDrA1r2E      [17] 8970 	call	_SetEnemyParams
   34C5 21 09 00      [10] 8971 	ld	hl, #9
   34C8 39            [11] 8972 	add	hl, sp
   34C9 F9            [ 6] 8973 	ld	sp, hl
                           8974 ;src/main.c:2015: spr[0].x = spr[0].px = 36; 
   34CA 21r3Dr00      [10] 8975 	ld	hl, #(_spr + 0x0004)
   34CD 36 24         [10] 8976 	ld	(hl), #0x24
   34CF 21r3Br00      [10] 8977 	ld	hl, #(_spr + 0x0002)
   34D2 36 24         [10] 8978 	ld	(hl), #0x24
                           8979 ;src/main.c:2016: spr[0].y = spr[0].py = 176;			
   34D4 21r3Er00      [10] 8980 	ld	hl, #(_spr + 0x0005)
   34D7 36 B0         [10] 8981 	ld	(hl), #0xb0
   34D9 21r3Cr00      [10] 8982 	ld	hl, #(_spr + 0x0003)
   34DC 36 B0         [10] 8983 	ld	(hl), #0xb0
                           8984 ;src/main.c:2018: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk7_end);
   34DE 21rFFrFF      [10] 8985 	ld	hl, #(_mappk7 - 0x0001)
   34E1 E5            [11] 8986 	push	hl
   34E2 21 00 16      [10] 8987 	ld	hl, #0x1600
   34E5 E5            [11] 8988 	push	hl
   34E6 CDr00r00      [17] 8989 	call	_cpct_zx7b_decrunch_s
                           8990 ;src/main.c:2020: lName = "4;2@@@CASTLE";
   34E9 21r6Br38      [10] 8991 	ld	hl, #___str_42+0
   34EC 22r02r00      [16] 8992 	ld	(_lName), hl
                           8993 ;src/main.c:2022: doorKey[0] = 5; // diamond dust
   34EF 21r0Fr00      [10] 8994 	ld	hl, #_doorKey
   34F2 36 05         [10] 8995 	ld	(hl), #0x05
                           8996 ;src/main.c:2023: doorKey[1] = 11; // dragon blood
   34F4 21r10r00      [10] 8997 	ld	hl, #(_doorKey + 0x0001)
   34F7 36 0B         [10] 8998 	ld	(hl), #0x0b
                           8999 ;src/main.c:2024: doorKey[2] = 7; // mammooth poop
   34F9 21r11r00      [10] 9000 	ld	hl, #(_doorKey + 0x0002)
   34FC 36 07         [10] 9001 	ld	(hl), #0x07
                           9002 ;src/main.c:2025: doorKey[3] = 11; // dragon blood
   34FE 21r12r00      [10] 9003 	ld	hl, #(_doorKey + 0x0003)
   3501 36 0B         [10] 9004 	ld	(hl), #0x0b
                           9005 ;src/main.c:2026: doorKey[4] = 5; // diamond dust
   3503 21r13r00      [10] 9006 	ld	hl, #(_doorKey + 0x0004)
   3506 36 05         [10] 9007 	ld	(hl), #0x05
                           9008 ;src/main.c:2028: storeX = 33;
   3508 21r19r00      [10] 9009 	ld	hl,#_storeX + 0
   350B 36 21         [10] 9010 	ld	(hl), #0x21
                           9011 ;src/main.c:2029: storeY = 95;
   350D 21r1Ar00      [10] 9012 	ld	hl,#_storeY + 0
   3510 36 5F         [10] 9013 	ld	(hl), #0x5f
                           9014 ;src/main.c:2030: break;
   3512 C3rF2r37      [10] 9015 	jp	00113$
                           9016 ;src/main.c:2033: case 8: {			 
   3515                    9017 00109$:
                           9018 ;src/main.c:2035: SetEnemyParams(2, NOBODY,	M_linear_X, 	D_left,     1,  0,   0,   0,   0);
   3515 21 00 00      [10] 9019 	ld	hl, #0x0000
   3518 E5            [11] 9020 	push	hl
   3519 2E 00         [ 7] 9021 	ld	l, #0x00
   351B E5            [11] 9022 	push	hl
   351C 21 02 01      [10] 9023 	ld	hl, #0x0102
   351F E5            [11] 9024 	push	hl
   3520 21 09 00      [10] 9025 	ld	hl, #0x0009
   3523 E5            [11] 9026 	push	hl
   3524 3E 02         [ 7] 9027 	ld	a, #0x02
   3526 F5            [11] 9028 	push	af
   3527 33            [ 6] 9029 	inc	sp
   3528 CDrA1r2E      [17] 9030 	call	_SetEnemyParams
   352B 21 09 00      [10] 9031 	ld	hl, #9
   352E 39            [11] 9032 	add	hl, sp
   352F F9            [ 6] 9033 	ld	sp, hl
                           9034 ;src/main.c:2036: SetEnemyParams(3, GHOST,	M_chaser,		D_right,    7,  2, 114,   0,   0);						
   3530 21 00 00      [10] 9035 	ld	hl, #0x0000
   3533 E5            [11] 9036 	push	hl
   3534 21 02 72      [10] 9037 	ld	hl, #0x7202
   3537 E5            [11] 9038 	push	hl
   3538 21 03 07      [10] 9039 	ld	hl, #0x0703
   353B E5            [11] 9040 	push	hl
   353C 21 04 03      [10] 9041 	ld	hl, #0x0304
   353F E5            [11] 9042 	push	hl
   3540 3E 03         [ 7] 9043 	ld	a, #0x03
   3542 F5            [11] 9044 	push	af
   3543 33            [ 6] 9045 	inc	sp
   3544 CDrA1r2E      [17] 9046 	call	_SetEnemyParams
   3547 21 09 00      [10] 9047 	ld	hl, #9
   354A 39            [11] 9048 	add	hl, sp
   354B F9            [ 6] 9049 	ld	sp, hl
                           9050 ;src/main.c:2037: SetEnemyParams(4, KNIGHT, 	M_linear_XY,    D_right,    1, 10,  68,   0,   0);
   354C 21 00 00      [10] 9051 	ld	hl, #0x0000
   354F E5            [11] 9052 	push	hl
   3550 21 0A 44      [10] 9053 	ld	hl, #0x440a
   3553 E5            [11] 9054 	push	hl
   3554 21 03 01      [10] 9055 	ld	hl, #0x0103
   3557 E5            [11] 9056 	push	hl
   3558 26 02         [ 7] 9057 	ld	h, #0x02
   355A E5            [11] 9058 	push	hl
   355B 3E 04         [ 7] 9059 	ld	a, #0x04
   355D F5            [11] 9060 	push	af
   355E 33            [ 6] 9061 	inc	sp
   355F CDrA1r2E      [17] 9062 	call	_SetEnemyParams
   3562 21 09 00      [10] 9063 	ld	hl, #9
   3565 39            [11] 9064 	add	hl, sp
   3566 F9            [ 6] 9065 	ld	sp, hl
                           9066 ;src/main.c:2038: SetEnemyParams(5, KNIGHT,	M_linear_XY,	D_down,     1,  2,  38,   0,   0);
   3567 21 00 00      [10] 9067 	ld	hl, #0x0000
   356A E5            [11] 9068 	push	hl
   356B 21 02 26      [10] 9069 	ld	hl, #0x2602
   356E E5            [11] 9070 	push	hl
   356F 21 01 01      [10] 9071 	ld	hl, #0x0101
   3572 E5            [11] 9072 	push	hl
   3573 21 03 02      [10] 9073 	ld	hl, #0x0203
   3576 E5            [11] 9074 	push	hl
   3577 3E 05         [ 7] 9075 	ld	a, #0x05
   3579 F5            [11] 9076 	push	af
   357A 33            [ 6] 9077 	inc	sp
   357B CDrA1r2E      [17] 9078 	call	_SetEnemyParams
   357E 21 09 00      [10] 9079 	ld	hl, #9
   3581 39            [11] 9080 	add	hl, sp
   3582 F9            [ 6] 9081 	ld	sp, hl
                           9082 ;src/main.c:2040: spr[0].x = spr[0].px = 34; 
   3583 21r3Dr00      [10] 9083 	ld	hl, #(_spr + 0x0004)
   3586 36 22         [10] 9084 	ld	(hl), #0x22
   3588 21r3Br00      [10] 9085 	ld	hl, #(_spr + 0x0002)
   358B 36 22         [10] 9086 	ld	(hl), #0x22
                           9087 ;src/main.c:2041: spr[0].y = spr[0].py = 176;			
   358D 21r3Er00      [10] 9088 	ld	hl, #(_spr + 0x0005)
   3590 36 B0         [10] 9089 	ld	(hl), #0xb0
   3592 21r3Cr00      [10] 9090 	ld	hl, #(_spr + 0x0003)
   3595 36 B0         [10] 9091 	ld	(hl), #0xb0
                           9092 ;src/main.c:2043: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk8_end);
   3597 21rFFrFF      [10] 9093 	ld	hl, #(_mappk8 - 0x0001)
   359A E5            [11] 9094 	push	hl
   359B 21 00 16      [10] 9095 	ld	hl, #0x1600
   359E E5            [11] 9096 	push	hl
   359F CDr00r00      [17] 9097 	call	_cpct_zx7b_decrunch_s
                           9098 ;src/main.c:2045: lName = "5;1@@@TOWER";	
   35A2 21r78r38      [10] 9099 	ld	hl, #___str_43+0
   35A5 22r02r00      [16] 9100 	ld	(_lName), hl
                           9101 ;src/main.c:2047: doorKey[0] = 8; // kraken ink
   35A8 21r0Fr00      [10] 9102 	ld	hl, #_doorKey
   35AB 36 08         [10] 9103 	ld	(hl), #0x08
                           9104 ;src/main.c:2048: doorKey[1] = 9; // mermaid tear
   35AD 21r10r00      [10] 9105 	ld	hl, #(_doorKey + 0x0001)
   35B0 36 09         [10] 9106 	ld	(hl), #0x09
                           9107 ;src/main.c:2049: doorKey[2] = 10; // martian mushroom
   35B2 21r11r00      [10] 9108 	ld	hl, #(_doorKey + 0x0002)
   35B5 36 0A         [10] 9109 	ld	(hl), #0x0a
                           9110 ;src/main.c:2050: doorKey[3] = 11; // dragon blood
   35B7 21r12r00      [10] 9111 	ld	hl, #(_doorKey + 0x0003)
   35BA 36 0B         [10] 9112 	ld	(hl), #0x0b
                           9113 ;src/main.c:2051: doorKey[4] = 12; // dodo egg
   35BC 21r13r00      [10] 9114 	ld	hl, #(_doorKey + 0x0004)
   35BF 36 0C         [10] 9115 	ld	(hl), #0x0c
                           9116 ;src/main.c:2053: storeX = 25;
   35C1 21r19r00      [10] 9117 	ld	hl,#_storeX + 0
   35C4 36 19         [10] 9118 	ld	(hl), #0x19
                           9119 ;src/main.c:2054: storeY = 95;		
   35C6 21r1Ar00      [10] 9120 	ld	hl,#_storeY + 0
   35C9 36 5F         [10] 9121 	ld	(hl), #0x5f
                           9122 ;src/main.c:2055: break;
   35CB C3rF2r37      [10] 9123 	jp	00113$
                           9124 ;src/main.c:2058: case 9: {			 
   35CE                    9125 00110$:
                           9126 ;src/main.c:2060: SetEnemyParams(2, BAT,		M_linear_X, 	D_left,     1, 73, 111,  41,  73);
   35CE 21 29 49      [10] 9127 	ld	hl, #0x4929
   35D1 E5            [11] 9128 	push	hl
   35D2 21 49 6F      [10] 9129 	ld	hl, #0x6f49
   35D5 E5            [11] 9130 	push	hl
   35D6 21 02 01      [10] 9131 	ld	hl, #0x0102
   35D9 E5            [11] 9132 	push	hl
   35DA 21 05 00      [10] 9133 	ld	hl, #0x0005
   35DD E5            [11] 9134 	push	hl
   35DE 3E 02         [ 7] 9135 	ld	a, #0x02
   35E0 F5            [11] 9136 	push	af
   35E1 33            [ 6] 9137 	inc	sp
   35E2 CDrA1r2E      [17] 9138 	call	_SetEnemyParams
   35E5 21 09 00      [10] 9139 	ld	hl, #9
   35E8 39            [11] 9140 	add	hl, sp
   35E9 F9            [ 6] 9141 	ld	sp, hl
                           9142 ;src/main.c:2061: SetEnemyParams(3, BAT,		M_linear_X,		D_right,    1,  2, 111,   2,  34);				
   35EA 21 02 22      [10] 9143 	ld	hl, #0x2202
   35ED E5            [11] 9144 	push	hl
   35EE 26 6F         [ 7] 9145 	ld	h, #0x6f
   35F0 E5            [11] 9146 	push	hl
   35F1 21 03 01      [10] 9147 	ld	hl, #0x0103
   35F4 E5            [11] 9148 	push	hl
   35F5 21 05 00      [10] 9149 	ld	hl, #0x0005
   35F8 E5            [11] 9150 	push	hl
   35F9 3E 03         [ 7] 9151 	ld	a, #0x03
   35FB F5            [11] 9152 	push	af
   35FC 33            [ 6] 9153 	inc	sp
   35FD CDrA1r2E      [17] 9154 	call	_SetEnemyParams
   3600 21 09 00      [10] 9155 	ld	hl, #9
   3603 39            [11] 9156 	add	hl, sp
   3604 F9            [ 6] 9157 	ld	sp, hl
                           9158 ;src/main.c:2062: SetEnemyParams(4, SENTINEL, M_linear_Y,    	D_down,     1, 27,  44,  44, 175);
   3605 21 2C AF      [10] 9159 	ld	hl, #0xaf2c
   3608 E5            [11] 9160 	push	hl
   3609 21 1B 2C      [10] 9161 	ld	hl, #0x2c1b
   360C E5            [11] 9162 	push	hl
   360D 21 01 01      [10] 9163 	ld	hl, #0x0101
   3610 E5            [11] 9164 	push	hl
   3611 2E 02         [ 7] 9165 	ld	l, #0x02
   3613 E5            [11] 9166 	push	hl
   3614 3E 04         [ 7] 9167 	ld	a, #0x04
   3616 F5            [11] 9168 	push	af
   3617 33            [ 6] 9169 	inc	sp
   3618 CDrA1r2E      [17] 9170 	call	_SetEnemyParams
   361B 21 09 00      [10] 9171 	ld	hl, #9
   361E 39            [11] 9172 	add	hl, sp
   361F F9            [ 6] 9173 	ld	sp, hl
                           9174 ;src/main.c:2063: SetEnemyParams(5, SENTINEL,	M_linear_Y,		D_up,       1, 49, 160,  44, 175);
   3620 21 2C AF      [10] 9175 	ld	hl, #0xaf2c
   3623 E5            [11] 9176 	push	hl
   3624 21 31 A0      [10] 9177 	ld	hl, #0xa031
   3627 E5            [11] 9178 	push	hl
   3628 21 00 01      [10] 9179 	ld	hl, #0x0100
   362B E5            [11] 9180 	push	hl
   362C 2E 02         [ 7] 9181 	ld	l, #0x02
   362E E5            [11] 9182 	push	hl
   362F 3E 05         [ 7] 9183 	ld	a, #0x05
   3631 F5            [11] 9184 	push	af
   3632 33            [ 6] 9185 	inc	sp
   3633 CDrA1r2E      [17] 9186 	call	_SetEnemyParams
   3636 21 09 00      [10] 9187 	ld	hl, #9
   3639 39            [11] 9188 	add	hl, sp
   363A F9            [ 6] 9189 	ld	sp, hl
                           9190 ;src/main.c:2065: spr[0].x = spr[0].px = 34; 
   363B 21r3Dr00      [10] 9191 	ld	hl, #(_spr + 0x0004)
   363E 36 22         [10] 9192 	ld	(hl), #0x22
   3640 21r3Br00      [10] 9193 	ld	hl, #(_spr + 0x0002)
   3643 36 22         [10] 9194 	ld	(hl), #0x22
                           9195 ;src/main.c:2066: spr[0].y = spr[0].py = 176;			
   3645 21r3Er00      [10] 9196 	ld	hl, #(_spr + 0x0005)
   3648 36 B0         [10] 9197 	ld	(hl), #0xb0
   364A 21r3Cr00      [10] 9198 	ld	hl, #(_spr + 0x0003)
   364D 36 B0         [10] 9199 	ld	(hl), #0xb0
                           9200 ;src/main.c:2068: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk9_end);
   364F 21rFFrFF      [10] 9201 	ld	hl, #(_mappk9 - 0x0001)
   3652 E5            [11] 9202 	push	hl
   3653 21 00 16      [10] 9203 	ld	hl, #0x1600
   3656 E5            [11] 9204 	push	hl
   3657 CDr00r00      [17] 9205 	call	_cpct_zx7b_decrunch_s
                           9206 ;src/main.c:2070: lName = "5;2@@@TOWER";	
   365A 21r84r38      [10] 9207 	ld	hl, #___str_44+0
   365D 22r02r00      [16] 9208 	ld	(_lName), hl
                           9209 ;src/main.c:2072: doorKey[0] = 10; // martian mushroom
   3660 21r0Fr00      [10] 9210 	ld	hl, #_doorKey
   3663 36 0A         [10] 9211 	ld	(hl), #0x0a
                           9212 ;src/main.c:2073: doorKey[1] = 5; // diamond dust
   3665 21r10r00      [10] 9213 	ld	hl, #(_doorKey + 0x0001)
   3668 36 05         [10] 9214 	ld	(hl), #0x05
                           9215 ;src/main.c:2074: doorKey[2] = 12; // dodo egg
   366A 21r11r00      [10] 9216 	ld	hl, #(_doorKey + 0x0002)
   366D 36 0C         [10] 9217 	ld	(hl), #0x0c
                           9218 ;src/main.c:2075: doorKey[3] = 4; // toad snot
   366F 21r12r00      [10] 9219 	ld	hl, #(_doorKey + 0x0003)
   3672 36 04         [10] 9220 	ld	(hl), #0x04
                           9221 ;src/main.c:2076: doorKey[4] = 13; // unicorn blood
   3674 21r13r00      [10] 9222 	ld	hl, #(_doorKey + 0x0004)
   3677 36 0D         [10] 9223 	ld	(hl), #0x0d
                           9224 ;src/main.c:2078: storeX = 41;
   3679 21r19r00      [10] 9225 	ld	hl,#_storeX + 0
   367C 36 29         [10] 9226 	ld	(hl), #0x29
                           9227 ;src/main.c:2079: storeY = 43;		
   367E 21r1Ar00      [10] 9228 	ld	hl,#_storeY + 0
   3681 36 2B         [10] 9229 	ld	(hl), #0x2b
                           9230 ;src/main.c:2080: break;
   3683 C3rF2r37      [10] 9231 	jp	00113$
                           9232 ;src/main.c:2083: case 10: {			 
   3686                    9233 00111$:
                           9234 ;src/main.c:2085: SetEnemyParams(2, SENTINEL,	M_linear_X, 	D_left,     1,  2, 156,   2,  73);
   3686 21 02 49      [10] 9235 	ld	hl, #0x4902
   3689 E5            [11] 9236 	push	hl
   368A 26 9C         [ 7] 9237 	ld	h, #0x9c
   368C E5            [11] 9238 	push	hl
   368D 26 01         [ 7] 9239 	ld	h, #0x01
   368F E5            [11] 9240 	push	hl
   3690 26 00         [ 7] 9241 	ld	h, #0x00
   3692 E5            [11] 9242 	push	hl
   3693 3E 02         [ 7] 9243 	ld	a, #0x02
   3695 F5            [11] 9244 	push	af
   3696 33            [ 6] 9245 	inc	sp
   3697 CDrA1r2E      [17] 9246 	call	_SetEnemyParams
   369A 21 09 00      [10] 9247 	ld	hl, #9
   369D 39            [11] 9248 	add	hl, sp
   369E F9            [ 6] 9249 	ld	sp, hl
                           9250 ;src/main.c:2086: SetEnemyParams(3, GHOST,	M_chaser, 		D_right,    4,  2, 114,   0,   0);
   369F 21 00 00      [10] 9251 	ld	hl, #0x0000
   36A2 E5            [11] 9252 	push	hl
   36A3 21 02 72      [10] 9253 	ld	hl, #0x7202
   36A6 E5            [11] 9254 	push	hl
   36A7 21 03 04      [10] 9255 	ld	hl, #0x0403
   36AA E5            [11] 9256 	push	hl
   36AB 21 04 03      [10] 9257 	ld	hl, #0x0304
   36AE E5            [11] 9258 	push	hl
   36AF 3E 03         [ 7] 9259 	ld	a, #0x03
   36B1 F5            [11] 9260 	push	af
   36B2 33            [ 6] 9261 	inc	sp
   36B3 CDrA1r2E      [17] 9262 	call	_SetEnemyParams
   36B6 21 09 00      [10] 9263 	ld	hl, #9
   36B9 39            [11] 9264 	add	hl, sp
   36BA F9            [ 6] 9265 	ld	sp, hl
                           9266 ;src/main.c:2087: SetEnemyParams(4, KNIGHT,	M_linear_Y, 	D_right,    1, 17,  40,  40, 145);
   36BB 21 28 91      [10] 9267 	ld	hl, #0x9128
   36BE E5            [11] 9268 	push	hl
   36BF 21 11 28      [10] 9269 	ld	hl, #0x2811
   36C2 E5            [11] 9270 	push	hl
   36C3 21 03 01      [10] 9271 	ld	hl, #0x0103
   36C6 E5            [11] 9272 	push	hl
   36C7 2E 03         [ 7] 9273 	ld	l, #0x03
   36C9 E5            [11] 9274 	push	hl
   36CA 3E 04         [ 7] 9275 	ld	a, #0x04
   36CC F5            [11] 9276 	push	af
   36CD 33            [ 6] 9277 	inc	sp
   36CE CDrA1r2E      [17] 9278 	call	_SetEnemyParams
   36D1 21 09 00      [10] 9279 	ld	hl, #9
   36D4 39            [11] 9280 	add	hl, sp
   36D5 F9            [ 6] 9281 	ld	sp, hl
                           9282 ;src/main.c:2088: SetEnemyParams(5, KNIGHT,	M_linear_Y, 	D_left,     1, 59,  40,  40, 145);
   36D6 21 28 91      [10] 9283 	ld	hl, #0x9128
   36D9 E5            [11] 9284 	push	hl
   36DA 21 3B 28      [10] 9285 	ld	hl, #0x283b
   36DD E5            [11] 9286 	push	hl
   36DE 21 02 01      [10] 9287 	ld	hl, #0x0102
   36E1 E5            [11] 9288 	push	hl
   36E2 2E 03         [ 7] 9289 	ld	l, #0x03
   36E4 E5            [11] 9290 	push	hl
   36E5 3E 05         [ 7] 9291 	ld	a, #0x05
   36E7 F5            [11] 9292 	push	af
   36E8 33            [ 6] 9293 	inc	sp
   36E9 CDrA1r2E      [17] 9294 	call	_SetEnemyParams
   36EC 21 09 00      [10] 9295 	ld	hl, #9
   36EF 39            [11] 9296 	add	hl, sp
   36F0 F9            [ 6] 9297 	ld	sp, hl
                           9298 ;src/main.c:2090: spr[0].x = spr[0].px = 54; 
   36F1 21r3Dr00      [10] 9299 	ld	hl, #(_spr + 0x0004)
   36F4 36 36         [10] 9300 	ld	(hl), #0x36
   36F6 21r3Br00      [10] 9301 	ld	hl, #(_spr + 0x0002)
   36F9 36 36         [10] 9302 	ld	(hl), #0x36
                           9303 ;src/main.c:2091: spr[0].y = spr[0].py = 176;			
   36FB 21r3Er00      [10] 9304 	ld	hl, #(_spr + 0x0005)
   36FE 36 B0         [10] 9305 	ld	(hl), #0xb0
   3700 21r3Cr00      [10] 9306 	ld	hl, #(_spr + 0x0003)
   3703 36 B0         [10] 9307 	ld	(hl), #0xb0
                           9308 ;src/main.c:2093: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk10_end);
   3705 21rADr01      [10] 9309 	ld	hl, #(_mappk10 + 0x01ad)
   3708 E5            [11] 9310 	push	hl
   3709 21 00 16      [10] 9311 	ld	hl, #0x1600
   370C E5            [11] 9312 	push	hl
   370D CDr00r00      [17] 9313 	call	_cpct_zx7b_decrunch_s
                           9314 ;src/main.c:2095: lName = "6;1@@LIBRARY";
   3710 21r90r38      [10] 9315 	ld	hl, #___str_45+0
   3713 22r02r00      [16] 9316 	ld	(_lName), hl
                           9317 ;src/main.c:2097: doorKey[0] = 11; // dragon blood
   3716 21r0Fr00      [10] 9318 	ld	hl, #_doorKey
   3719 36 0B         [10] 9319 	ld	(hl), #0x0b
                           9320 ;src/main.c:2098: doorKey[1] = 8; // kraken ink
   371B 21r10r00      [10] 9321 	ld	hl, #(_doorKey + 0x0001)
   371E 36 08         [10] 9322 	ld	(hl), #0x08
                           9323 ;src/main.c:2099: doorKey[2] = 9; // dodo egg
   3720 21r11r00      [10] 9324 	ld	hl, #(_doorKey + 0x0002)
   3723 36 09         [10] 9325 	ld	(hl), #0x09
                           9326 ;src/main.c:2100: doorKey[3] = 10; // martian mushroom
   3725 21r12r00      [10] 9327 	ld	hl, #(_doorKey + 0x0003)
   3728 36 0A         [10] 9328 	ld	(hl), #0x0a
                           9329 ;src/main.c:2101: doorKey[4] = 15; // mordor lava
   372A 21r13r00      [10] 9330 	ld	hl, #(_doorKey + 0x0004)
   372D 36 0F         [10] 9331 	ld	(hl), #0x0f
                           9332 ;src/main.c:2103: storeX = 3;
   372F 21r19r00      [10] 9333 	ld	hl,#_storeX + 0
   3732 36 03         [10] 9334 	ld	(hl), #0x03
                           9335 ;src/main.c:2104: storeY = 143;
   3734 21r1Ar00      [10] 9336 	ld	hl,#_storeY + 0
   3737 36 8F         [10] 9337 	ld	(hl), #0x8f
                           9338 ;src/main.c:2105: break;
   3739 C3rF2r37      [10] 9339 	jp	00113$
                           9340 ;src/main.c:2108: case 11: {			 
   373C                    9341 00112$:
                           9342 ;src/main.c:2110: SetEnemyParams(2, GHOST,	M_linear_X, 	D_left,     1,  2, 132,   2,  72);
   373C 21 02 48      [10] 9343 	ld	hl, #0x4802
   373F E5            [11] 9344 	push	hl
   3740 26 84         [ 7] 9345 	ld	h, #0x84
   3742 E5            [11] 9346 	push	hl
   3743 26 01         [ 7] 9347 	ld	h, #0x01
   3745 E5            [11] 9348 	push	hl
   3746 21 04 00      [10] 9349 	ld	hl, #0x0004
   3749 E5            [11] 9350 	push	hl
   374A 3E 02         [ 7] 9351 	ld	a, #0x02
   374C F5            [11] 9352 	push	af
   374D 33            [ 6] 9353 	inc	sp
   374E CDrA1r2E      [17] 9354 	call	_SetEnemyParams
   3751 21 09 00      [10] 9355 	ld	hl, #9
   3754 39            [11] 9356 	add	hl, sp
   3755 F9            [ 6] 9357 	ld	sp, hl
                           9358 ;src/main.c:2111: SetEnemyParams(3, GHOST,	M_chaser, 		D_right,    5,  2, 114,   0,   0);
   3756 21 00 00      [10] 9359 	ld	hl, #0x0000
   3759 E5            [11] 9360 	push	hl
   375A 21 02 72      [10] 9361 	ld	hl, #0x7202
   375D E5            [11] 9362 	push	hl
   375E 21 03 05      [10] 9363 	ld	hl, #0x0503
   3761 E5            [11] 9364 	push	hl
   3762 21 04 03      [10] 9365 	ld	hl, #0x0304
   3765 E5            [11] 9366 	push	hl
   3766 3E 03         [ 7] 9367 	ld	a, #0x03
   3768 F5            [11] 9368 	push	af
   3769 33            [ 6] 9369 	inc	sp
   376A CDrA1r2E      [17] 9370 	call	_SetEnemyParams
   376D 21 09 00      [10] 9371 	ld	hl, #9
   3770 39            [11] 9372 	add	hl, sp
   3771 F9            [ 6] 9373 	ld	sp, hl
                           9374 ;src/main.c:2112: SetEnemyParams(4, KNIGHT,	M_linear_XY, 	D_down,     1, 21,  38,   0,   0);
   3772 21 00 00      [10] 9375 	ld	hl, #0x0000
   3775 E5            [11] 9376 	push	hl
   3776 21 15 26      [10] 9377 	ld	hl, #0x2615
   3779 E5            [11] 9378 	push	hl
   377A 21 01 01      [10] 9379 	ld	hl, #0x0101
   377D E5            [11] 9380 	push	hl
   377E 21 03 02      [10] 9381 	ld	hl, #0x0203
   3781 E5            [11] 9382 	push	hl
   3782 3E 04         [ 7] 9383 	ld	a, #0x04
   3784 F5            [11] 9384 	push	af
   3785 33            [ 6] 9385 	inc	sp
   3786 CDrA1r2E      [17] 9386 	call	_SetEnemyParams
   3789 21 09 00      [10] 9387 	ld	hl, #9
   378C 39            [11] 9388 	add	hl, sp
   378D F9            [ 6] 9389 	ld	sp, hl
                           9390 ;src/main.c:2113: SetEnemyParams(5, KNIGHT,	M_linear_XY, 	D_down,     1, 55,  38,   0,   0);
   378E 21 00 00      [10] 9391 	ld	hl, #0x0000
   3791 E5            [11] 9392 	push	hl
   3792 21 37 26      [10] 9393 	ld	hl, #0x2637
   3795 E5            [11] 9394 	push	hl
   3796 21 01 01      [10] 9395 	ld	hl, #0x0101
   3799 E5            [11] 9396 	push	hl
   379A 21 03 02      [10] 9397 	ld	hl, #0x0203
   379D E5            [11] 9398 	push	hl
   379E 3E 05         [ 7] 9399 	ld	a, #0x05
   37A0 F5            [11] 9400 	push	af
   37A1 33            [ 6] 9401 	inc	sp
   37A2 CDrA1r2E      [17] 9402 	call	_SetEnemyParams
   37A5 21 09 00      [10] 9403 	ld	hl, #9
   37A8 39            [11] 9404 	add	hl, sp
   37A9 F9            [ 6] 9405 	ld	sp, hl
                           9406 ;src/main.c:2115: spr[0].x = spr[0].px = 34; 
   37AA 21r3Dr00      [10] 9407 	ld	hl, #(_spr + 0x0004)
   37AD 36 22         [10] 9408 	ld	(hl), #0x22
   37AF 21r3Br00      [10] 9409 	ld	hl, #(_spr + 0x0002)
   37B2 36 22         [10] 9410 	ld	(hl), #0x22
                           9411 ;src/main.c:2116: spr[0].y = spr[0].py = 176;			
   37B4 21r3Er00      [10] 9412 	ld	hl, #(_spr + 0x0005)
   37B7 36 B0         [10] 9413 	ld	(hl), #0xb0
   37B9 21r3Cr00      [10] 9414 	ld	hl, #(_spr + 0x0003)
   37BC 36 B0         [10] 9415 	ld	(hl), #0xb0
                           9416 ;src/main.c:2118: cpct_zx7b_decrunch_s(UNPACKED_MAP_END, mappk11_end);
   37BE 21r0Br02      [10] 9417 	ld	hl, #(_mappk11 + 0x020b)
   37C1 E5            [11] 9418 	push	hl
   37C2 21 00 16      [10] 9419 	ld	hl, #0x1600
   37C5 E5            [11] 9420 	push	hl
   37C6 CDr00r00      [17] 9421 	call	_cpct_zx7b_decrunch_s
                           9422 ;src/main.c:2120: lName = "6;2@@LIBRARY";
   37C9 21r9Dr38      [10] 9423 	ld	hl, #___str_46+0
   37CC 22r02r00      [16] 9424 	ld	(_lName), hl
                           9425 ;src/main.c:2122: doorKey[0] = 13; // unicorn blood
   37CF 21r0Fr00      [10] 9426 	ld	hl, #_doorKey
   37D2 36 0D         [10] 9427 	ld	(hl), #0x0d
                           9428 ;src/main.c:2123: doorKey[1] = 15; // mordor lava
   37D4 21r10r00      [10] 9429 	ld	hl, #(_doorKey + 0x0001)
   37D7 36 0F         [10] 9430 	ld	(hl), #0x0f
                           9431 ;src/main.c:2124: doorKey[2] = 14; // troll fat
   37D9 21r11r00      [10] 9432 	ld	hl, #(_doorKey + 0x0002)
   37DC 36 0E         [10] 9433 	ld	(hl), #0x0e
                           9434 ;src/main.c:2125: doorKey[3] = 15; // mordor lava
   37DE 21r12r00      [10] 9435 	ld	hl, #(_doorKey + 0x0003)
   37E1 36 0F         [10] 9436 	ld	(hl), #0x0f
                           9437 ;src/main.c:2126: doorKey[4] = 13; // unicorn blood
   37E3 21r13r00      [10] 9438 	ld	hl, #(_doorKey + 0x0004)
   37E6 36 0D         [10] 9439 	ld	(hl), #0x0d
                           9440 ;src/main.c:2128: storeX = 73;
   37E8 21r19r00      [10] 9441 	ld	hl,#_storeX + 0
   37EB 36 49         [10] 9442 	ld	(hl), #0x49
                           9443 ;src/main.c:2129: storeY = 11;
   37ED 21r1Ar00      [10] 9444 	ld	hl,#_storeY + 0
   37F0 36 0B         [10] 9445 	ld	(hl), #0x0b
                           9446 ;src/main.c:2132: }
   37F2                    9447 00113$:
                           9448 ;src/main.c:2134: if (TwoPlayers) {
   37F2 3Ar04r00      [13] 9449 	ld	a,(#_TwoPlayers + 0)
   37F5 B7            [ 4] 9450 	or	a, a
   37F6 C8            [11] 9451 	ret	Z
                           9452 ;src/main.c:2135: spr[1].x = spr[1].px = spr[0].x + 6; 
   37F7 01r4Ar00      [10] 9453 	ld	bc, #_spr + 17
   37FA 11r4Cr00      [10] 9454 	ld	de, #_spr + 19
   37FD 3Ar3Br00      [13] 9455 	ld	a, (#_spr + 2)
   3800 C6 06         [ 7] 9456 	add	a, #0x06
   3802 12            [ 7] 9457 	ld	(de), a
   3803 02            [ 7] 9458 	ld	(bc), a
                           9459 ;src/main.c:2136: spr[1].y = spr[1].py = spr[0].y;
   3804 01r4Br00      [10] 9460 	ld	bc, #_spr + 18
   3807 11r4Dr00      [10] 9461 	ld	de, #_spr + 20
   380A 3Ar3Cr00      [13] 9462 	ld	a, (#_spr + 3)
   380D 12            [ 7] 9463 	ld	(de), a
   380E 02            [ 7] 9464 	ld	(bc), a
   380F C9            [10] 9465 	ret
   3810                    9466 ___str_35:
   3810 31 3B 31 40 40 47  9467 	.ascii "1;1@@GARDENS"
        41 52 44 45 4E 53
   381C 00                 9468 	.db 0x00
   381D                    9469 ___str_36:
   381D 31 3B 32 40 40 47  9470 	.ascii "1;2@@GARDENS"
        41 52 44 45 4E 53
   3829 00                 9471 	.db 0x00
   382A                    9472 ___str_37:
   382A 32 3B 31 40 43 45  9473 	.ascii "2;1@CEMETERY"
        4D 45 54 45 52 59
   3836 00                 9474 	.db 0x00
   3837                    9475 ___str_38:
   3837 32 3B 32 40 43 45  9476 	.ascii "2;2@CEMETERY"
        4D 45 54 45 52 59
   3843 00                 9477 	.db 0x00
   3844                    9478 ___str_39:
   3844 33 3B 31 40 40 43  9479 	.ascii "3;1@@CELLARS"
        45 4C 4C 41 52 53
   3850 00                 9480 	.db 0x00
   3851                    9481 ___str_40:
   3851 33 3B 32 40 40 43  9482 	.ascii "3;2@@CELLARS"
        45 4C 4C 41 52 53
   385D 00                 9483 	.db 0x00
   385E                    9484 ___str_41:
   385E 34 3B 31 40 40 40  9485 	.ascii "4;1@@@CASTLE"
        43 41 53 54 4C 45
   386A 00                 9486 	.db 0x00
   386B                    9487 ___str_42:
   386B 34 3B 32 40 40 40  9488 	.ascii "4;2@@@CASTLE"
        43 41 53 54 4C 45
   3877 00                 9489 	.db 0x00
   3878                    9490 ___str_43:
   3878 35 3B 31 40 40 40  9491 	.ascii "5;1@@@TOWER"
        54 4F 57 45 52
   3883 00                 9492 	.db 0x00
   3884                    9493 ___str_44:
   3884 35 3B 32 40 40 40  9494 	.ascii "5;2@@@TOWER"
        54 4F 57 45 52
   388F 00                 9495 	.db 0x00
   3890                    9496 ___str_45:
   3890 36 3B 31 40 40 4C  9497 	.ascii "6;1@@LIBRARY"
        49 42 52 41 52 59
   389C 00                 9498 	.db 0x00
   389D                    9499 ___str_46:
   389D 36 3B 32 40 40 4C  9500 	.ascii "6;2@@LIBRARY"
        49 42 52 41 52 59
   38A9 00                 9501 	.db 0x00
                           9502 ;src/main.c:2142: void CheckEnemyCollision(u8 player, TSpr *pSpr) 
                           9503 ;	---------------------------------
                           9504 ; Function CheckEnemyCollision
                           9505 ; ---------------------------------
   38AA                    9506 _CheckEnemyCollision::
   38AA DD E5         [15] 9507 	push	ix
   38AC DD 21 00 00   [14] 9508 	ld	ix,#0
   38B0 DD 39         [15] 9509 	add	ix,sp
   38B2 21 F8 FF      [10] 9510 	ld	hl, #-8
   38B5 39            [11] 9511 	add	hl, sp
   38B6 F9            [ 6] 9512 	ld	sp, hl
                           9513 ;src/main.c:2144: if ((spr[player].x + SPR_W) > pSpr->x && spr[player].x < (pSpr->x + SPR_W) &&
   38B7 01r39r00      [10] 9514 	ld	bc, #_spr+0
   38BA DD 5E 04      [19] 9515 	ld	e,4 (ix)
   38BD 16 00         [ 7] 9516 	ld	d,#0x00
   38BF 6B            [ 4] 9517 	ld	l, e
   38C0 62            [ 4] 9518 	ld	h, d
   38C1 29            [11] 9519 	add	hl, hl
   38C2 19            [11] 9520 	add	hl, de
   38C3 29            [11] 9521 	add	hl, hl
   38C4 19            [11] 9522 	add	hl, de
   38C5 29            [11] 9523 	add	hl, hl
   38C6 19            [11] 9524 	add	hl, de
   38C7 09            [11] 9525 	add	hl,bc
   38C8 5D            [ 4] 9526 	ld	e,l
   38C9 54            [ 4] 9527 	ld	d,h
   38CA 23            [ 6] 9528 	inc	hl
   38CB 23            [ 6] 9529 	inc	hl
   38CC 4E            [ 7] 9530 	ld	c, (hl)
   38CD 06 00         [ 7] 9531 	ld	b, #0x00
   38CF 21 05 00      [10] 9532 	ld	hl, #0x0005
   38D2 09            [11] 9533 	add	hl,bc
   38D3 DD 75 FA      [19] 9534 	ld	-6 (ix), l
   38D6 DD 74 FB      [19] 9535 	ld	-5 (ix), h
   38D9 DD 7E 05      [19] 9536 	ld	a, 5 (ix)
   38DC DD 77 FE      [19] 9537 	ld	-2 (ix), a
   38DF DD 7E 06      [19] 9538 	ld	a, 6 (ix)
   38E2 DD 77 FF      [19] 9539 	ld	-1 (ix), a
   38E5 DD 6E FE      [19] 9540 	ld	l,-2 (ix)
   38E8 DD 66 FF      [19] 9541 	ld	h,-1 (ix)
   38EB 23            [ 6] 9542 	inc	hl
   38EC 23            [ 6] 9543 	inc	hl
   38ED 6E            [ 7] 9544 	ld	l, (hl)
   38EE 26 00         [ 7] 9545 	ld	h, #0x00
                           9546 ;src/main.c:2145: (spr[player].y + SPR_H) > pSpr->y && spr[player].y < (pSpr->y + SPR_H)) {
   38F0 13            [ 6] 9547 	inc	de
   38F1 13            [ 6] 9548 	inc	de
   38F2 13            [ 6] 9549 	inc	de
   38F3 33            [ 6] 9550 	inc	sp
   38F4 33            [ 6] 9551 	inc	sp
   38F5 D5            [11] 9552 	push	de
                           9553 ;src/main.c:2144: if ((spr[player].x + SPR_W) > pSpr->x && spr[player].x < (pSpr->x + SPR_W) &&
   38F6 7D            [ 4] 9554 	ld	a, l
   38F7 DD 96 FA      [19] 9555 	sub	a, -6 (ix)
   38FA 7C            [ 4] 9556 	ld	a, h
   38FB DD 9E FB      [19] 9557 	sbc	a, -5 (ix)
   38FE E2r03r39      [10] 9558 	jp	PO, 00153$
   3901 EE 80         [ 7] 9559 	xor	a, #0x80
   3903                    9560 00153$:
   3903 F2r70r39      [10] 9561 	jp	P, 00110$
   3906 11 05 00      [10] 9562 	ld	de, #0x0005
   3909 19            [11] 9563 	add	hl, de
   390A 79            [ 4] 9564 	ld	a, c
   390B 95            [ 4] 9565 	sub	a, l
   390C 78            [ 4] 9566 	ld	a, b
   390D 9C            [ 4] 9567 	sbc	a, h
   390E E2r13r39      [10] 9568 	jp	PO, 00154$
   3911 EE 80         [ 7] 9569 	xor	a, #0x80
   3913                    9570 00154$:
   3913 F2r70r39      [10] 9571 	jp	P, 00110$
                           9572 ;src/main.c:2145: (spr[player].y + SPR_H) > pSpr->y && spr[player].y < (pSpr->y + SPR_H)) {
   3916 E1            [10] 9573 	pop	hl
   3917 E5            [11] 9574 	push	hl
   3918 5E            [ 7] 9575 	ld	e, (hl)
   3919 16 00         [ 7] 9576 	ld	d, #0x00
   391B 21 0C 00      [10] 9577 	ld	hl, #0x000c
   391E 19            [11] 9578 	add	hl,de
   391F DD 75 FC      [19] 9579 	ld	-4 (ix), l
   3922 DD 74 FD      [19] 9580 	ld	-3 (ix), h
   3925 DD 6E FE      [19] 9581 	ld	l,-2 (ix)
   3928 DD 66 FF      [19] 9582 	ld	h,-1 (ix)
   392B 23            [ 6] 9583 	inc	hl
   392C 23            [ 6] 9584 	inc	hl
   392D 23            [ 6] 9585 	inc	hl
   392E 6E            [ 7] 9586 	ld	l, (hl)
   392F 26 00         [ 7] 9587 	ld	h, #0x00
   3931 7D            [ 4] 9588 	ld	a, l
   3932 DD 96 FC      [19] 9589 	sub	a, -4 (ix)
   3935 7C            [ 4] 9590 	ld	a, h
   3936 DD 9E FD      [19] 9591 	sbc	a, -3 (ix)
   3939 E2r3Er39      [10] 9592 	jp	PO, 00155$
   393C EE 80         [ 7] 9593 	xor	a, #0x80
   393E                    9594 00155$:
   393E F2r70r39      [10] 9595 	jp	P, 00110$
   3941 D5            [11] 9596 	push	de
   3942 11 0C 00      [10] 9597 	ld	de, #0x000c
   3945 19            [11] 9598 	add	hl, de
   3946 D1            [10] 9599 	pop	de
   3947 7B            [ 4] 9600 	ld	a, e
   3948 95            [ 4] 9601 	sub	a, l
   3949 7A            [ 4] 9602 	ld	a, d
   394A 9C            [ 4] 9603 	sbc	a, h
   394B E2r50r39      [10] 9604 	jp	PO, 00156$
   394E EE 80         [ 7] 9605 	xor	a, #0x80
   3950                    9606 00156$:
   3950 F2r70r39      [10] 9607 	jp	P, 00110$
                           9608 ;src/main.c:2147: ExplodeSprite(player, pSpr->num);			
   3953 DD 6E FE      [19] 9609 	ld	l,-2 (ix)
   3956 DD 66 FF      [19] 9610 	ld	h,-1 (ix)
   3959 46            [ 7] 9611 	ld	b, (hl)
   395A C5            [11] 9612 	push	bc
   395B 33            [ 6] 9613 	inc	sp
   395C DD 7E 04      [19] 9614 	ld	a, 4 (ix)
   395F F5            [11] 9615 	push	af
   3960 33            [ 6] 9616 	inc	sp
   3961 CDr3Er1C      [17] 9617 	call	_ExplodeSprite
   3964 F1            [10] 9618 	pop	af
                           9619 ;src/main.c:2148: GameOver(player);
   3965 DD 7E 04      [19] 9620 	ld	a, 4 (ix)
   3968 F5            [11] 9621 	push	af
   3969 33            [ 6] 9622 	inc	sp
   396A CDr29r41      [17] 9623 	call	_GameOver
   396D 33            [ 6] 9624 	inc	sp
   396E 18 76         [12] 9625 	jr	00115$
   3970                    9626 00110$:
                           9627 ;src/main.c:2151: else if (sht.active) {
   3970 3ArA6r00      [13] 9628 	ld	a, (#_sht + 4)
   3973 B7            [ 4] 9629 	or	a, a
   3974 28 70         [12] 9630 	jr	Z,00115$
                           9631 ;src/main.c:2152: if ((sht.x + SHT_W) > (spr[player].x) && sht.x < (spr[player].x + SPR_W))
   3976 21rA2r00      [10] 9632 	ld	hl, #_sht + 0
   3979 5E            [ 7] 9633 	ld	e, (hl)
   397A 16 00         [ 7] 9634 	ld	d, #0x00
   397C 21 04 00      [10] 9635 	ld	hl, #0x0004
   397F 19            [11] 9636 	add	hl, de
   3980 79            [ 4] 9637 	ld	a, c
   3981 95            [ 4] 9638 	sub	a, l
   3982 78            [ 4] 9639 	ld	a, b
   3983 9C            [ 4] 9640 	sbc	a, h
   3984 E2r89r39      [10] 9641 	jp	PO, 00157$
   3987 EE 80         [ 7] 9642 	xor	a, #0x80
   3989                    9643 00157$:
   3989 F2rE6r39      [10] 9644 	jp	P, 00115$
   398C 7B            [ 4] 9645 	ld	a, e
   398D DD 96 FA      [19] 9646 	sub	a, -6 (ix)
   3990 7A            [ 4] 9647 	ld	a, d
   3991 DD 9E FB      [19] 9648 	sbc	a, -5 (ix)
   3994 E2r99r39      [10] 9649 	jp	PO, 00158$
   3997 EE 80         [ 7] 9650 	xor	a, #0x80
   3999                    9651 00158$:
   3999 F2rE6r39      [10] 9652 	jp	P, 00115$
                           9653 ;src/main.c:2153: if ((sht.y + SHT_H) > (spr[player].y) && (sht.y) < (spr[player].y + SPR_H))	{
   399C 21rA3r00      [10] 9654 	ld	hl, #_sht + 1
   399F 4E            [ 7] 9655 	ld	c, (hl)
   39A0 06 00         [ 7] 9656 	ld	b, #0x00
   39A2 21 08 00      [10] 9657 	ld	hl, #0x0008
   39A5 09            [11] 9658 	add	hl,bc
   39A6 EB            [ 4] 9659 	ex	de,hl
   39A7 E1            [10] 9660 	pop	hl
   39A8 E5            [11] 9661 	push	hl
   39A9 6E            [ 7] 9662 	ld	l, (hl)
   39AA 26 00         [ 7] 9663 	ld	h, #0x00
   39AC 7D            [ 4] 9664 	ld	a, l
   39AD 93            [ 4] 9665 	sub	a, e
   39AE 7C            [ 4] 9666 	ld	a, h
   39AF 9A            [ 4] 9667 	sbc	a, d
   39B0 E2rB5r39      [10] 9668 	jp	PO, 00159$
   39B3 EE 80         [ 7] 9669 	xor	a, #0x80
   39B5                    9670 00159$:
   39B5 F2rE6r39      [10] 9671 	jp	P, 00115$
   39B8 11 0C 00      [10] 9672 	ld	de, #0x000c
   39BB 19            [11] 9673 	add	hl, de
   39BC 79            [ 4] 9674 	ld	a, c
   39BD 95            [ 4] 9675 	sub	a, l
   39BE 78            [ 4] 9676 	ld	a, b
   39BF 9C            [ 4] 9677 	sbc	a, h
   39C0 E2rC5r39      [10] 9678 	jp	PO, 00160$
   39C3 EE 80         [ 7] 9679 	xor	a, #0x80
   39C5                    9680 00160$:
   39C5 F2rE6r39      [10] 9681 	jp	P, 00115$
                           9682 ;src/main.c:2155: DeleteShot();
   39C8 CDrEFr27      [17] 9683 	call	_DeleteShot
                           9684 ;src/main.c:2156: ExplodeSprite(player, pSpr->num);			
   39CB DD 6E FE      [19] 9685 	ld	l,-2 (ix)
   39CE DD 66 FF      [19] 9686 	ld	h,-1 (ix)
   39D1 46            [ 7] 9687 	ld	b, (hl)
   39D2 C5            [11] 9688 	push	bc
   39D3 33            [ 6] 9689 	inc	sp
   39D4 DD 7E 04      [19] 9690 	ld	a, 4 (ix)
   39D7 F5            [11] 9691 	push	af
   39D8 33            [ 6] 9692 	inc	sp
   39D9 CDr3Er1C      [17] 9693 	call	_ExplodeSprite
   39DC F1            [10] 9694 	pop	af
                           9695 ;src/main.c:2157: GameOver(player);
   39DD DD 7E 04      [19] 9696 	ld	a, 4 (ix)
   39E0 F5            [11] 9697 	push	af
   39E1 33            [ 6] 9698 	inc	sp
   39E2 CDr29r41      [17] 9699 	call	_GameOver
   39E5 33            [ 6] 9700 	inc	sp
   39E6                    9701 00115$:
   39E6 DD F9         [10] 9702 	ld	sp, ix
   39E8 DD E1         [14] 9703 	pop	ix
   39EA C9            [10] 9704 	ret
                           9705 ;src/main.c:2164: void EnemyLoop(TSpr *pSpr) __z88dk_fastcall {
                           9706 ;	---------------------------------
                           9707 ; Function EnemyLoop
                           9708 ; ---------------------------------
   39EB                    9709 _EnemyLoop::
                           9710 ;src/main.c:2165: if (pSpr->ident == NOBODY) 
   39EB 4D            [ 4] 9711 	ld	c,l
   39EC 44            [ 4] 9712 	ld	b,h
   39ED 23            [ 6] 9713 	inc	hl
   39EE 7E            [ 7] 9714 	ld	a, (hl)
   39EF D6 09         [ 7] 9715 	sub	a, #0x09
   39F1 C8            [11] 9716 	ret	Z
                           9717 ;src/main.c:2166: return; 
   39F2 18 00         [12] 9718 	jr	00102$
   39F4                    9719 00102$:
                           9720 ;src/main.c:2168: MoveEnemy(pSpr);
   39F4 C5            [11] 9721 	push	bc
   39F5 C5            [11] 9722 	push	bc
   39F6 CDr11r2A      [17] 9723 	call	_MoveEnemy
   39F9 F1            [10] 9724 	pop	af
   39FA C1            [10] 9725 	pop	bc
                           9726 ;src/main.c:2170: SelectFrame(pSpr); 
   39FB C5            [11] 9727 	push	bc
   39FC 69            [ 4] 9728 	ld	l, c
   39FD 60            [ 4] 9729 	ld	h, b
   39FE CDr82r19      [17] 9730 	call	_SelectFrame
   3A01 C1            [10] 9731 	pop	bc
                           9732 ;src/main.c:2171: WalkAnim(pSpr, pSpr->dir);
   3A02 C5            [11] 9733 	push	bc
   3A03 FD E1         [14] 9734 	pop	iy
   3A05 FD 56 07      [19] 9735 	ld	d, 7 (iy)
   3A08 C5            [11] 9736 	push	bc
   3A09 D5            [11] 9737 	push	de
   3A0A 33            [ 6] 9738 	inc	sp
   3A0B C5            [11] 9739 	push	bc
   3A0C CDr1Dr21      [17] 9740 	call	_WalkAnim
   3A0F F1            [10] 9741 	pop	af
   3A10 33            [ 6] 9742 	inc	sp
   3A11 C1            [10] 9743 	pop	bc
                           9744 ;src/main.c:2173: DeleteSprite(pSpr);
   3A12 C5            [11] 9745 	push	bc
   3A13 69            [ 4] 9746 	ld	l, c
   3A14 60            [ 4] 9747 	ld	h, b
   3A15 CDrCDr18      [17] 9748 	call	_DeleteSprite
   3A18 C1            [10] 9749 	pop	bc
                           9750 ;src/main.c:2174: pSpr->px = pSpr->x; // save the current X coordinate
   3A19 21 04 00      [10] 9751 	ld	hl, #0x0004
   3A1C 09            [11] 9752 	add	hl,bc
   3A1D EB            [ 4] 9753 	ex	de,hl
   3A1E 69            [ 4] 9754 	ld	l, c
   3A1F 60            [ 4] 9755 	ld	h, b
   3A20 23            [ 6] 9756 	inc	hl
   3A21 23            [ 6] 9757 	inc	hl
   3A22 7E            [ 7] 9758 	ld	a, (hl)
   3A23 12            [ 7] 9759 	ld	(de), a
                           9760 ;src/main.c:2175: pSpr->py = pSpr->y; // save the current Y coordinate
   3A24 21 05 00      [10] 9761 	ld	hl, #0x0005
   3A27 09            [11] 9762 	add	hl,bc
   3A28 EB            [ 4] 9763 	ex	de,hl
   3A29 69            [ 4] 9764 	ld	l, c
   3A2A 60            [ 4] 9765 	ld	h, b
   3A2B 23            [ 6] 9766 	inc	hl
   3A2C 23            [ 6] 9767 	inc	hl
   3A2D 23            [ 6] 9768 	inc	hl
   3A2E 7E            [ 7] 9769 	ld	a, (hl)
   3A2F 12            [ 7] 9770 	ld	(de), a
                           9771 ;src/main.c:2176: PrintSprite(pSpr);
   3A30 C5            [11] 9772 	push	bc
   3A31 69            [ 4] 9773 	ld	l, c
   3A32 60            [ 4] 9774 	ld	h, b
   3A33 CDr9Er18      [17] 9775 	call	_PrintSprite
   3A36 C1            [10] 9776 	pop	bc
                           9777 ;src/main.c:2178: CheckEnemyCollision(0, pSpr);
   3A37 C5            [11] 9778 	push	bc
   3A38 C5            [11] 9779 	push	bc
   3A39 AF            [ 4] 9780 	xor	a, a
   3A3A F5            [11] 9781 	push	af
   3A3B 33            [ 6] 9782 	inc	sp
   3A3C CDrAAr38      [17] 9783 	call	_CheckEnemyCollision
   3A3F F1            [10] 9784 	pop	af
   3A40 33            [ 6] 9785 	inc	sp
   3A41 C1            [10] 9786 	pop	bc
                           9787 ;src/main.c:2179: if (TwoPlayers)
   3A42 3Ar04r00      [13] 9788 	ld	a,(#_TwoPlayers + 0)
   3A45 B7            [ 4] 9789 	or	a, a
   3A46 C8            [11] 9790 	ret	Z
                           9791 ;src/main.c:2180: CheckEnemyCollision(1, pSpr);
   3A47 C5            [11] 9792 	push	bc
   3A48 3E 01         [ 7] 9793 	ld	a, #0x01
   3A4A F5            [11] 9794 	push	af
   3A4B 33            [ 6] 9795 	inc	sp
   3A4C CDrAAr38      [17] 9796 	call	_CheckEnemyCollision
   3A4F F1            [10] 9797 	pop	af
   3A50 33            [ 6] 9798 	inc	sp
   3A51 C9            [10] 9799 	ret
                           9800 ;src/main.c:2196: void PrintStartMenu() {
                           9801 ;	---------------------------------
                           9802 ; Function PrintStartMenu
                           9803 ; ---------------------------------
   3A52                    9804 _PrintStartMenu::
                           9805 ;src/main.c:2197: ClearScreen();
   3A52 CDr20r02      [17] 9806 	call	_ClearScreen
                           9807 ;src/main.c:2200: cpct_drawSprite(g_logo_0, cpctm_screenPtr(CPCT_VMEM_START, 0, 0), G_LOGO_0_W, G_LOGO_0_H);
   3A55 21 28 23      [10] 9808 	ld	hl, #0x2328
   3A58 E5            [11] 9809 	push	hl
   3A59 21 00 C0      [10] 9810 	ld	hl, #0xc000
   3A5C E5            [11] 9811 	push	hl
   3A5D 21r00r00      [10] 9812 	ld	hl, #_g_logo_0
   3A60 E5            [11] 9813 	push	hl
   3A61 CDr00r00      [17] 9814 	call	_cpct_drawSprite
                           9815 ;src/main.c:2201: cpct_drawSprite(g_logo_1, cpctm_screenPtr(CPCT_VMEM_START, G_LOGO_0_W, 0), G_LOGO_0_W, G_LOGO_0_H);
   3A64 21 28 23      [10] 9816 	ld	hl, #0x2328
   3A67 E5            [11] 9817 	push	hl
   3A68 26 C0         [ 7] 9818 	ld	h, #0xc0
   3A6A E5            [11] 9819 	push	hl
   3A6B 21r00r00      [10] 9820 	ld	hl, #_g_logo_1
   3A6E E5            [11] 9821 	push	hl
   3A6F CDr00r00      [17] 9822 	call	_cpct_drawSprite
                           9823 ;src/main.c:2203: PrintText("1@@1@PLAYER@GAME", 10, 50, 0);
   3A72 21 32 00      [10] 9824 	ld	hl, #0x0032
   3A75 E5            [11] 9825 	push	hl
   3A76 3E 0A         [ 7] 9826 	ld	a, #0x0a
   3A78 F5            [11] 9827 	push	af
   3A79 33            [ 6] 9828 	inc	sp
   3A7A 21r81r3B      [10] 9829 	ld	hl, #___str_47
   3A7D E5            [11] 9830 	push	hl
   3A7E CDr7Ar03      [17] 9831 	call	_PrintText
   3A81 F1            [10] 9832 	pop	af
                           9833 ;src/main.c:2204: PrintText("2@@2@PLAYER@GAME", 10, 60, 0);
   3A82 33            [ 6] 9834 	inc	sp
   3A83 21 3C 00      [10] 9835 	ld	hl,#0x003c
   3A86 E3            [19] 9836 	ex	(sp),hl
   3A87 3E 0A         [ 7] 9837 	ld	a, #0x0a
   3A89 F5            [11] 9838 	push	af
   3A8A 33            [ 6] 9839 	inc	sp
   3A8B 21r92r3B      [10] 9840 	ld	hl, #___str_48
   3A8E E5            [11] 9841 	push	hl
   3A8F CDr7Ar03      [17] 9842 	call	_PrintText
   3A92 F1            [10] 9843 	pop	af
                           9844 ;src/main.c:2205: PrintText("3@@REDEFINE@CONTROLS", 10, 70, 0);
   3A93 33            [ 6] 9845 	inc	sp
   3A94 21 46 00      [10] 9846 	ld	hl,#0x0046
   3A97 E3            [19] 9847 	ex	(sp),hl
   3A98 3E 0A         [ 7] 9848 	ld	a, #0x0a
   3A9A F5            [11] 9849 	push	af
   3A9B 33            [ 6] 9850 	inc	sp
   3A9C 21rA3r3B      [10] 9851 	ld	hl, #___str_49
   3A9F E5            [11] 9852 	push	hl
   3AA0 CDr7Ar03      [17] 9853 	call	_PrintText
   3AA3 F1            [10] 9854 	pop	af
   3AA4 F1            [10] 9855 	pop	af
   3AA5 33            [ 6] 9856 	inc	sp
                           9857 ;src/main.c:2206: if (turboMode)
   3AA6 3Ar1Er00      [13] 9858 	ld	a,(#_turboMode + 0)
   3AA9 B7            [ 4] 9859 	or	a, a
   3AAA 28 14         [12] 9860 	jr	Z,00102$
                           9861 ;src/main.c:2207: PrintText("4@@TURBO@MODE:@ON", 10, 80, 0);
   3AAC 21 50 00      [10] 9862 	ld	hl, #0x0050
   3AAF E5            [11] 9863 	push	hl
   3AB0 3E 0A         [ 7] 9864 	ld	a, #0x0a
   3AB2 F5            [11] 9865 	push	af
   3AB3 33            [ 6] 9866 	inc	sp
   3AB4 21rB8r3B      [10] 9867 	ld	hl, #___str_50
   3AB7 E5            [11] 9868 	push	hl
   3AB8 CDr7Ar03      [17] 9869 	call	_PrintText
   3ABB F1            [10] 9870 	pop	af
   3ABC F1            [10] 9871 	pop	af
   3ABD 33            [ 6] 9872 	inc	sp
   3ABE 18 12         [12] 9873 	jr	00103$
   3AC0                    9874 00102$:
                           9875 ;src/main.c:2209: PrintText("4@@TURBO@MODE:@OFF", 10, 80, 0);
   3AC0 21 50 00      [10] 9876 	ld	hl, #0x0050
   3AC3 E5            [11] 9877 	push	hl
   3AC4 3E 0A         [ 7] 9878 	ld	a, #0x0a
   3AC6 F5            [11] 9879 	push	af
   3AC7 33            [ 6] 9880 	inc	sp
   3AC8 21rCAr3B      [10] 9881 	ld	hl, #___str_51
   3ACB E5            [11] 9882 	push	hl
   3ACC CDr7Ar03      [17] 9883 	call	_PrintText
   3ACF F1            [10] 9884 	pop	af
   3AD0 F1            [10] 9885 	pop	af
   3AD1 33            [ 6] 9886 	inc	sp
   3AD2                    9887 00103$:
                           9888 ;src/main.c:2213: cpct_getScreenPtr(CPCT_VMEM_START, 6, 187), SPR_W, SPR_H, g_maskTable);
   3AD2 21 06 BB      [10] 9889 	ld	hl, #0xbb06
   3AD5 E5            [11] 9890 	push	hl
   3AD6 21 00 C0      [10] 9891 	ld	hl, #0xc000
   3AD9 E5            [11] 9892 	push	hl
   3ADA CDr00r00      [17] 9893 	call	_cpct_getScreenPtr
                           9894 ;src/main.c:2212: cpct_drawSpriteMaskedAlignedTable(g_sorcerer1_06, 
   3ADD 01r00r00      [10] 9895 	ld	bc, #_g_sorcerer1_06+0
   3AE0 11r00r01      [10] 9896 	ld	de, #_g_maskTable
   3AE3 D5            [11] 9897 	push	de
   3AE4 11 05 0C      [10] 9898 	ld	de, #0x0c05
   3AE7 D5            [11] 9899 	push	de
   3AE8 E5            [11] 9900 	push	hl
   3AE9 C5            [11] 9901 	push	bc
   3AEA CDr00r00      [17] 9902 	call	_cpct_drawSpriteMaskedAlignedTable
                           9903 ;src/main.c:2215: cpct_getScreenPtr(CPCT_VMEM_START, 68, 187), SPR_W, SPR_H, g_maskTable);
   3AED 21 44 BB      [10] 9904 	ld	hl, #0xbb44
   3AF0 E5            [11] 9905 	push	hl
   3AF1 21 00 C0      [10] 9906 	ld	hl, #0xc000
   3AF4 E5            [11] 9907 	push	hl
   3AF5 CDr00r00      [17] 9908 	call	_cpct_getScreenPtr
                           9909 ;src/main.c:2214: cpct_drawSpriteMaskedAlignedTable(g_sorcerer2_04, 
   3AF8 01r00r00      [10] 9910 	ld	bc, #_g_sorcerer2_04+0
   3AFB 11r00r01      [10] 9911 	ld	de, #_g_maskTable
   3AFE D5            [11] 9912 	push	de
   3AFF 11 05 0C      [10] 9913 	ld	de, #0x0c05
   3B02 D5            [11] 9914 	push	de
   3B03 E5            [11] 9915 	push	hl
   3B04 C5            [11] 9916 	push	bc
   3B05 CDr00r00      [17] 9917 	call	_cpct_drawSpriteMaskedAlignedTable
                           9918 ;src/main.c:2217: PrintText("CODE@=@GFX", 25, 110, 0);
   3B08 21 6E 00      [10] 9919 	ld	hl, #0x006e
   3B0B E5            [11] 9920 	push	hl
   3B0C 3E 19         [ 7] 9921 	ld	a, #0x19
   3B0E F5            [11] 9922 	push	af
   3B0F 33            [ 6] 9923 	inc	sp
   3B10 21rDDr3B      [10] 9924 	ld	hl, #___str_52
   3B13 E5            [11] 9925 	push	hl
   3B14 CDr7Ar03      [17] 9926 	call	_PrintText
   3B17 F1            [10] 9927 	pop	af
                           9928 ;src/main.c:2218: PrintText("SALVAKANTERO", 22, 120, 0);
   3B18 33            [ 6] 9929 	inc	sp
   3B19 21 78 00      [10] 9930 	ld	hl,#0x0078
   3B1C E3            [19] 9931 	ex	(sp),hl
   3B1D 3E 16         [ 7] 9932 	ld	a, #0x16
   3B1F F5            [11] 9933 	push	af
   3B20 33            [ 6] 9934 	inc	sp
   3B21 21rE8r3B      [10] 9935 	ld	hl, #___str_53
   3B24 E5            [11] 9936 	push	hl
   3B25 CDr7Ar03      [17] 9937 	call	_PrintText
   3B28 F1            [10] 9938 	pop	af
                           9939 ;src/main.c:2219: PrintText("MUSIC@=@FX", 25, 135, 0);
   3B29 33            [ 6] 9940 	inc	sp
   3B2A 21 87 00      [10] 9941 	ld	hl,#0x0087
   3B2D E3            [19] 9942 	ex	(sp),hl
   3B2E 3E 19         [ 7] 9943 	ld	a, #0x19
   3B30 F5            [11] 9944 	push	af
   3B31 33            [ 6] 9945 	inc	sp
   3B32 21rF5r3B      [10] 9946 	ld	hl, #___str_54
   3B35 E5            [11] 9947 	push	hl
   3B36 CDr7Ar03      [17] 9948 	call	_PrintText
   3B39 F1            [10] 9949 	pop	af
                           9950 ;src/main.c:2220: PrintText("MCKLAIN", 30, 145, 0);
   3B3A 33            [ 6] 9951 	inc	sp
   3B3B 21 91 00      [10] 9952 	ld	hl,#0x0091
   3B3E E3            [19] 9953 	ex	(sp),hl
   3B3F 3E 1E         [ 7] 9954 	ld	a, #0x1e
   3B41 F5            [11] 9955 	push	af
   3B42 33            [ 6] 9956 	inc	sp
   3B43 21r00r3C      [10] 9957 	ld	hl, #___str_55
   3B46 E5            [11] 9958 	push	hl
   3B47 CDr7Ar03      [17] 9959 	call	_PrintText
   3B4A F1            [10] 9960 	pop	af
                           9961 ;src/main.c:2221: PrintText("BETA@TESTING", 22, 160, 0);
   3B4B 33            [ 6] 9962 	inc	sp
   3B4C 21 A0 00      [10] 9963 	ld	hl,#0x00a0
   3B4F E3            [19] 9964 	ex	(sp),hl
   3B50 3E 16         [ 7] 9965 	ld	a, #0x16
   3B52 F5            [11] 9966 	push	af
   3B53 33            [ 6] 9967 	inc	sp
   3B54 21r08r3C      [10] 9968 	ld	hl, #___str_56
   3B57 E5            [11] 9969 	push	hl
   3B58 CDr7Ar03      [17] 9970 	call	_PrintText
   3B5B F1            [10] 9971 	pop	af
                           9972 ;src/main.c:2222: PrintText("BLACKMORES", 25, 170, 0);
   3B5C 33            [ 6] 9973 	inc	sp
   3B5D 21 AA 00      [10] 9974 	ld	hl,#0x00aa
   3B60 E3            [19] 9975 	ex	(sp),hl
   3B61 3E 19         [ 7] 9976 	ld	a, #0x19
   3B63 F5            [11] 9977 	push	af
   3B64 33            [ 6] 9978 	inc	sp
   3B65 21r15r3C      [10] 9979 	ld	hl, #___str_57
   3B68 E5            [11] 9980 	push	hl
   3B69 CDr7Ar03      [17] 9981 	call	_PrintText
   3B6C F1            [10] 9982 	pop	af
                           9983 ;src/main.c:2224: PrintText("PLAY@ON@RETRO@2020", 13, 190, 0);
   3B6D 33            [ 6] 9984 	inc	sp
   3B6E 21 BE 00      [10] 9985 	ld	hl,#0x00be
   3B71 E3            [19] 9986 	ex	(sp),hl
   3B72 3E 0D         [ 7] 9987 	ld	a, #0x0d
   3B74 F5            [11] 9988 	push	af
   3B75 33            [ 6] 9989 	inc	sp
   3B76 21r20r3C      [10] 9990 	ld	hl, #___str_58
   3B79 E5            [11] 9991 	push	hl
   3B7A CDr7Ar03      [17] 9992 	call	_PrintText
   3B7D F1            [10] 9993 	pop	af
   3B7E F1            [10] 9994 	pop	af
   3B7F 33            [ 6] 9995 	inc	sp
   3B80 C9            [10] 9996 	ret
   3B81                    9997 ___str_47:
   3B81 31 40 40 31 40 50  9998 	.ascii "1@@1@PLAYER@GAME"
        4C 41 59 45 52 40
        47 41 4D 45
   3B91 00                 9999 	.db 0x00
   3B92                   10000 ___str_48:
   3B92 32 40 40 32 40 50 10001 	.ascii "2@@2@PLAYER@GAME"
        4C 41 59 45 52 40
        47 41 4D 45
   3BA2 00                10002 	.db 0x00
   3BA3                   10003 ___str_49:
   3BA3 33 40 40 52 45 44 10004 	.ascii "3@@REDEFINE@CONTROLS"
        45 46 49 4E 45 40
        43 4F 4E 54 52 4F
        4C 53
   3BB7 00                10005 	.db 0x00
   3BB8                   10006 ___str_50:
   3BB8 34 40 40 54 55 52 10007 	.ascii "4@@TURBO@MODE:@ON"
        42 4F 40 4D 4F 44
        45 3A 40 4F 4E
   3BC9 00                10008 	.db 0x00
   3BCA                   10009 ___str_51:
   3BCA 34 40 40 54 55 52 10010 	.ascii "4@@TURBO@MODE:@OFF"
        42 4F 40 4D 4F 44
        45 3A 40 4F 46 46
   3BDC 00                10011 	.db 0x00
   3BDD                   10012 ___str_52:
   3BDD 43 4F 44 45 40 3D 10013 	.ascii "CODE@=@GFX"
        40 47 46 58
   3BE7 00                10014 	.db 0x00
   3BE8                   10015 ___str_53:
   3BE8 53 41 4C 56 41 4B 10016 	.ascii "SALVAKANTERO"
        41 4E 54 45 52 4F
   3BF4 00                10017 	.db 0x00
   3BF5                   10018 ___str_54:
   3BF5 4D 55 53 49 43 40 10019 	.ascii "MUSIC@=@FX"
        3D 40 46 58
   3BFF 00                10020 	.db 0x00
   3C00                   10021 ___str_55:
   3C00 4D 43 4B 4C 41 49 10022 	.ascii "MCKLAIN"
        4E
   3C07 00                10023 	.db 0x00
   3C08                   10024 ___str_56:
   3C08 42 45 54 41 40 54 10025 	.ascii "BETA@TESTING"
        45 53 54 49 4E 47
   3C14 00                10026 	.db 0x00
   3C15                   10027 ___str_57:
   3C15 42 4C 41 43 4B 4D 10028 	.ascii "BLACKMORES"
        4F 52 45 53
   3C1F 00                10029 	.db 0x00
   3C20                   10030 ___str_58:
   3C20 50 4C 41 59 40 4F 10031 	.ascii "PLAY@ON@RETRO@2020"
        4E 40 52 45 54 52
        4F 40 32 30 32 30
   3C32 00                10032 	.db 0x00
                          10033 ;src/main.c:2229: void PrintObjInfo() {
                          10034 ;	---------------------------------
                          10035 ; Function PrintObjInfo
                          10036 ; ---------------------------------
   3C33                   10037 _PrintObjInfo::
                          10038 ;src/main.c:2232: ClearScreen();
   3C33 CDr20r02      [17]10039 	call	_ClearScreen
                          10040 ;src/main.c:2233: PrintText("INGREDIENT@VALUES", 13, 0, 0);
   3C36 21 00 00      [10]10041 	ld	hl, #0x0000
   3C39 E5            [11]10042 	push	hl
   3C3A 3E 0D         [ 7]10043 	ld	a, #0x0d
   3C3C F5            [11]10044 	push	af
   3C3D 33            [ 6]10045 	inc	sp
   3C3E 21r99r3D      [10]10046 	ld	hl, #___str_59
   3C41 E5            [11]10047 	push	hl
   3C42 CDr7Ar03      [17]10048 	call	_PrintText
   3C45 F1            [10]10049 	pop	af
                          10050 ;src/main.c:2235: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 3, 12), cpct_px2byteM0(4, 4), 37, 188);
   3C46 33            [ 6]10051 	inc	sp
   3C47 21 04 04      [10]10052 	ld	hl,#0x0404
   3C4A E3            [19]10053 	ex	(sp),hl
   3C4B CDr00r00      [17]10054 	call	_cpct_px2byteM0
   3C4E 26 00         [ 7]10055 	ld	h, #0x00
   3C50 01 25 BC      [10]10056 	ld	bc, #0xbc25
   3C53 C5            [11]10057 	push	bc
   3C54 E5            [11]10058 	push	hl
   3C55 21 53 E0      [10]10059 	ld	hl, #0xe053
   3C58 E5            [11]10060 	push	hl
   3C59 CDr00r00      [17]10061 	call	_cpct_drawSolidBox
                          10062 ;src/main.c:2236: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 40, 12), cpct_px2byteM0(4, 4), 35, 188);	
   3C5C 21 04 04      [10]10063 	ld	hl, #0x0404
   3C5F E5            [11]10064 	push	hl
   3C60 CDr00r00      [17]10065 	call	_cpct_px2byteM0
   3C63 26 00         [ 7]10066 	ld	h, #0x00
   3C65 01 23 BC      [10]10067 	ld	bc, #0xbc23
   3C68 C5            [11]10068 	push	bc
   3C69 E5            [11]10069 	push	hl
   3C6A 21 78 E0      [10]10070 	ld	hl, #0xe078
   3C6D E5            [11]10071 	push	hl
   3C6E CDr00r00      [17]10072 	call	_cpct_drawSolidBox
                          10073 ;src/main.c:2237: PrintFrame(3,12,72,194);
   3C71 21 48 C2      [10]10074 	ld	hl, #0xc248
   3C74 E5            [11]10075 	push	hl
   3C75 21 03 0C      [10]10076 	ld	hl, #0x0c03
   3C78 E5            [11]10077 	push	hl
   3C79 CDr1Dr04      [17]10078 	call	_PrintFrame
   3C7C F1            [10]10079 	pop	af
   3C7D F1            [10]10080 	pop	af
                          10081 ;src/main.c:2239: for (obj=4; obj<16; obj++) {
   3C7E 01 04 19      [10]10082 	ld	bc,#0x1904
   3C81                   10083 00102$:
                          10084 ;src/main.c:2240: PrintObject(obj, 7, yPos);
   3C81 C5            [11]10085 	push	bc
   3C82 C5            [11]10086 	push	bc
   3C83 33            [ 6]10087 	inc	sp
   3C84 06 07         [ 7]10088 	ld	b, #0x07
   3C86 C5            [11]10089 	push	bc
   3C87 CDrF0r0D      [17]10090 	call	_PrintObject
   3C8A F1            [10]10091 	pop	af
   3C8B 33            [ 6]10092 	inc	sp
   3C8C C1            [10]10093 	pop	bc
                          10094 ;src/main.c:2241: PrintNumber(obj-3, 2, 62, yPos, 0); PrintText("<", 68, yPos, 0);
   3C8D 59            [ 4]10095 	ld	e, c
   3C8E 16 00         [ 7]10096 	ld	d, #0x00
   3C90 7B            [ 4]10097 	ld	a, e
   3C91 C6 FD         [ 7]10098 	add	a, #0xfd
   3C93 5F            [ 4]10099 	ld	e, a
   3C94 7A            [ 4]10100 	ld	a, d
   3C95 CE FF         [ 7]10101 	adc	a, #0xff
   3C97 57            [ 4]10102 	ld	d, a
   3C98 C5            [11]10103 	push	bc
   3C99 AF            [ 4]10104 	xor	a, a
   3C9A F5            [11]10105 	push	af
   3C9B 33            [ 6]10106 	inc	sp
   3C9C C5            [11]10107 	push	bc
   3C9D 33            [ 6]10108 	inc	sp
   3C9E 21 02 3E      [10]10109 	ld	hl, #0x3e02
   3CA1 E5            [11]10110 	push	hl
   3CA2 D5            [11]10111 	push	de
   3CA3 CDrABr02      [17]10112 	call	_PrintNumber
   3CA6 21 06 00      [10]10113 	ld	hl, #6
   3CA9 39            [11]10114 	add	hl, sp
   3CAA F9            [ 6]10115 	ld	sp, hl
   3CAB C1            [10]10116 	pop	bc
   3CAC C5            [11]10117 	push	bc
   3CAD AF            [ 4]10118 	xor	a, a
   3CAE F5            [11]10119 	push	af
   3CAF 33            [ 6]10120 	inc	sp
   3CB0 C5            [11]10121 	push	bc
   3CB1 33            [ 6]10122 	inc	sp
   3CB2 3E 44         [ 7]10123 	ld	a, #0x44
   3CB4 F5            [11]10124 	push	af
   3CB5 33            [ 6]10125 	inc	sp
   3CB6 21rABr3D      [10]10126 	ld	hl, #___str_60
   3CB9 E5            [11]10127 	push	hl
   3CBA CDr7Ar03      [17]10128 	call	_PrintText
   3CBD F1            [10]10129 	pop	af
   3CBE F1            [10]10130 	pop	af
   3CBF 33            [ 6]10131 	inc	sp
   3CC0 C1            [10]10132 	pop	bc
                          10133 ;src/main.c:2242: yPos += 14;
   3CC1 78            [ 4]10134 	ld	a, b
   3CC2 C6 0E         [ 7]10135 	add	a, #0x0e
   3CC4 47            [ 4]10136 	ld	b, a
                          10137 ;src/main.c:2239: for (obj=4; obj<16; obj++) {
   3CC5 0C            [ 4]10138 	inc	c
   3CC6 79            [ 4]10139 	ld	a, c
   3CC7 D6 10         [ 7]10140 	sub	a, #0x10
   3CC9 38 B6         [12]10141 	jr	C,00102$
                          10142 ;src/main.c:2245: PrintText("TOAD@SNOT", 14, 25, 0);
   3CCB 21 19 00      [10]10143 	ld	hl, #0x0019
   3CCE E5            [11]10144 	push	hl
   3CCF 3E 0E         [ 7]10145 	ld	a, #0x0e
   3CD1 F5            [11]10146 	push	af
   3CD2 33            [ 6]10147 	inc	sp
   3CD3 21rADr3D      [10]10148 	ld	hl, #___str_61
   3CD6 E5            [11]10149 	push	hl
   3CD7 CDr7Ar03      [17]10150 	call	_PrintText
   3CDA F1            [10]10151 	pop	af
                          10152 ;src/main.c:2246: PrintText("DIAMOND@DUST", 14, 39, 0);
   3CDB 33            [ 6]10153 	inc	sp
   3CDC 21 27 00      [10]10154 	ld	hl,#0x0027
   3CDF E3            [19]10155 	ex	(sp),hl
   3CE0 3E 0E         [ 7]10156 	ld	a, #0x0e
   3CE2 F5            [11]10157 	push	af
   3CE3 33            [ 6]10158 	inc	sp
   3CE4 21rB7r3D      [10]10159 	ld	hl, #___str_62
   3CE7 E5            [11]10160 	push	hl
   3CE8 CDr7Ar03      [17]10161 	call	_PrintText
   3CEB F1            [10]10162 	pop	af
                          10163 ;src/main.c:2247: PrintText("NEWT@EYE", 14, 53, 0);
   3CEC 33            [ 6]10164 	inc	sp
   3CED 21 35 00      [10]10165 	ld	hl,#0x0035
   3CF0 E3            [19]10166 	ex	(sp),hl
   3CF1 3E 0E         [ 7]10167 	ld	a, #0x0e
   3CF3 F5            [11]10168 	push	af
   3CF4 33            [ 6]10169 	inc	sp
   3CF5 21rC4r3D      [10]10170 	ld	hl, #___str_63
   3CF8 E5            [11]10171 	push	hl
   3CF9 CDr7Ar03      [17]10172 	call	_PrintText
   3CFC F1            [10]10173 	pop	af
                          10174 ;src/main.c:2248: PrintText("MAMMOTH@POOP", 14, 67, 0);
   3CFD 33            [ 6]10175 	inc	sp
   3CFE 21 43 00      [10]10176 	ld	hl,#0x0043
   3D01 E3            [19]10177 	ex	(sp),hl
   3D02 3E 0E         [ 7]10178 	ld	a, #0x0e
   3D04 F5            [11]10179 	push	af
   3D05 33            [ 6]10180 	inc	sp
   3D06 21rCDr3D      [10]10181 	ld	hl, #___str_64
   3D09 E5            [11]10182 	push	hl
   3D0A CDr7Ar03      [17]10183 	call	_PrintText
   3D0D F1            [10]10184 	pop	af
                          10185 ;src/main.c:2249: PrintText("KRAKEN@INK", 14, 81, 0); 
   3D0E 33            [ 6]10186 	inc	sp
   3D0F 21 51 00      [10]10187 	ld	hl,#0x0051
   3D12 E3            [19]10188 	ex	(sp),hl
   3D13 3E 0E         [ 7]10189 	ld	a, #0x0e
   3D15 F5            [11]10190 	push	af
   3D16 33            [ 6]10191 	inc	sp
   3D17 21rDAr3D      [10]10192 	ld	hl, #___str_65
   3D1A E5            [11]10193 	push	hl
   3D1B CDr7Ar03      [17]10194 	call	_PrintText
   3D1E F1            [10]10195 	pop	af
                          10196 ;src/main.c:2250: PrintText("MERMAID@TEAR", 14, 95, 0);
   3D1F 33            [ 6]10197 	inc	sp
   3D20 21 5F 00      [10]10198 	ld	hl,#0x005f
   3D23 E3            [19]10199 	ex	(sp),hl
   3D24 3E 0E         [ 7]10200 	ld	a, #0x0e
   3D26 F5            [11]10201 	push	af
   3D27 33            [ 6]10202 	inc	sp
   3D28 21rE5r3D      [10]10203 	ld	hl, #___str_66
   3D2B E5            [11]10204 	push	hl
   3D2C CDr7Ar03      [17]10205 	call	_PrintText
   3D2F F1            [10]10206 	pop	af
                          10207 ;src/main.c:2251: PrintText("MARTIAN@MUSHROOM", 14, 109, 0);
   3D30 33            [ 6]10208 	inc	sp
   3D31 21 6D 00      [10]10209 	ld	hl,#0x006d
   3D34 E3            [19]10210 	ex	(sp),hl
   3D35 3E 0E         [ 7]10211 	ld	a, #0x0e
   3D37 F5            [11]10212 	push	af
   3D38 33            [ 6]10213 	inc	sp
   3D39 21rF2r3D      [10]10214 	ld	hl, #___str_67
   3D3C E5            [11]10215 	push	hl
   3D3D CDr7Ar03      [17]10216 	call	_PrintText
   3D40 F1            [10]10217 	pop	af
                          10218 ;src/main.c:2252: PrintText("DRAGON@BLOOD", 14, 123, 0);
   3D41 33            [ 6]10219 	inc	sp
   3D42 21 7B 00      [10]10220 	ld	hl,#0x007b
   3D45 E3            [19]10221 	ex	(sp),hl
   3D46 3E 0E         [ 7]10222 	ld	a, #0x0e
   3D48 F5            [11]10223 	push	af
   3D49 33            [ 6]10224 	inc	sp
   3D4A 21r03r3E      [10]10225 	ld	hl, #___str_68
   3D4D E5            [11]10226 	push	hl
   3D4E CDr7Ar03      [17]10227 	call	_PrintText
   3D51 F1            [10]10228 	pop	af
                          10229 ;src/main.c:2253: PrintText("DODO@EGG", 14, 137, 0); 
   3D52 33            [ 6]10230 	inc	sp
   3D53 21 89 00      [10]10231 	ld	hl,#0x0089
   3D56 E3            [19]10232 	ex	(sp),hl
   3D57 3E 0E         [ 7]10233 	ld	a, #0x0e
   3D59 F5            [11]10234 	push	af
   3D5A 33            [ 6]10235 	inc	sp
   3D5B 21r10r3E      [10]10236 	ld	hl, #___str_69
   3D5E E5            [11]10237 	push	hl
   3D5F CDr7Ar03      [17]10238 	call	_PrintText
   3D62 F1            [10]10239 	pop	af
                          10240 ;src/main.c:2254: PrintText("UNICORN@BLOOD", 14, 151, 0);
   3D63 33            [ 6]10241 	inc	sp
   3D64 21 97 00      [10]10242 	ld	hl,#0x0097
   3D67 E3            [19]10243 	ex	(sp),hl
   3D68 3E 0E         [ 7]10244 	ld	a, #0x0e
   3D6A F5            [11]10245 	push	af
   3D6B 33            [ 6]10246 	inc	sp
   3D6C 21r19r3E      [10]10247 	ld	hl, #___str_70
   3D6F E5            [11]10248 	push	hl
   3D70 CDr7Ar03      [17]10249 	call	_PrintText
   3D73 F1            [10]10250 	pop	af
                          10251 ;src/main.c:2255: PrintText("TROLL@FAT", 14, 165, 0); 
   3D74 33            [ 6]10252 	inc	sp
   3D75 21 A5 00      [10]10253 	ld	hl,#0x00a5
   3D78 E3            [19]10254 	ex	(sp),hl
   3D79 3E 0E         [ 7]10255 	ld	a, #0x0e
   3D7B F5            [11]10256 	push	af
   3D7C 33            [ 6]10257 	inc	sp
   3D7D 21r27r3E      [10]10258 	ld	hl, #___str_71
   3D80 E5            [11]10259 	push	hl
   3D81 CDr7Ar03      [17]10260 	call	_PrintText
   3D84 F1            [10]10261 	pop	af
                          10262 ;src/main.c:2256: PrintText("MORDOR@LAVA", 14, 179, 0);
   3D85 33            [ 6]10263 	inc	sp
   3D86 21 B3 00      [10]10264 	ld	hl,#0x00b3
   3D89 E3            [19]10265 	ex	(sp),hl
   3D8A 3E 0E         [ 7]10266 	ld	a, #0x0e
   3D8C F5            [11]10267 	push	af
   3D8D 33            [ 6]10268 	inc	sp
   3D8E 21r31r3E      [10]10269 	ld	hl, #___str_72
   3D91 E5            [11]10270 	push	hl
   3D92 CDr7Ar03      [17]10271 	call	_PrintText
   3D95 F1            [10]10272 	pop	af
   3D96 F1            [10]10273 	pop	af
   3D97 33            [ 6]10274 	inc	sp
   3D98 C9            [10]10275 	ret
   3D99                   10276 ___str_59:
   3D99 49 4E 47 52 45 44 10277 	.ascii "INGREDIENT@VALUES"
        49 45 4E 54 40 56
        41 4C 55 45 53
   3DAA 00                10278 	.db 0x00
   3DAB                   10279 ___str_60:
   3DAB 3C                10280 	.ascii "<"
   3DAC 00                10281 	.db 0x00
   3DAD                   10282 ___str_61:
   3DAD 54 4F 41 44 40 53 10283 	.ascii "TOAD@SNOT"
        4E 4F 54
   3DB6 00                10284 	.db 0x00
   3DB7                   10285 ___str_62:
   3DB7 44 49 41 4D 4F 4E 10286 	.ascii "DIAMOND@DUST"
        44 40 44 55 53 54
   3DC3 00                10287 	.db 0x00
   3DC4                   10288 ___str_63:
   3DC4 4E 45 57 54 40 45 10289 	.ascii "NEWT@EYE"
        59 45
   3DCC 00                10290 	.db 0x00
   3DCD                   10291 ___str_64:
   3DCD 4D 41 4D 4D 4F 54 10292 	.ascii "MAMMOTH@POOP"
        48 40 50 4F 4F 50
   3DD9 00                10293 	.db 0x00
   3DDA                   10294 ___str_65:
   3DDA 4B 52 41 4B 45 4E 10295 	.ascii "KRAKEN@INK"
        40 49 4E 4B
   3DE4 00                10296 	.db 0x00
   3DE5                   10297 ___str_66:
   3DE5 4D 45 52 4D 41 49 10298 	.ascii "MERMAID@TEAR"
        44 40 54 45 41 52
   3DF1 00                10299 	.db 0x00
   3DF2                   10300 ___str_67:
   3DF2 4D 41 52 54 49 41 10301 	.ascii "MARTIAN@MUSHROOM"
        4E 40 4D 55 53 48
        52 4F 4F 4D
   3E02 00                10302 	.db 0x00
   3E03                   10303 ___str_68:
   3E03 44 52 41 47 4F 4E 10304 	.ascii "DRAGON@BLOOD"
        40 42 4C 4F 4F 44
   3E0F 00                10305 	.db 0x00
   3E10                   10306 ___str_69:
   3E10 44 4F 44 4F 40 45 10307 	.ascii "DODO@EGG"
        47 47
   3E18 00                10308 	.db 0x00
   3E19                   10309 ___str_70:
   3E19 55 4E 49 43 4F 52 10310 	.ascii "UNICORN@BLOOD"
        4E 40 42 4C 4F 4F
        44
   3E26 00                10311 	.db 0x00
   3E27                   10312 ___str_71:
   3E27 54 52 4F 4C 4C 40 10313 	.ascii "TROLL@FAT"
        46 41 54
   3E30 00                10314 	.db 0x00
   3E31                   10315 ___str_72:
   3E31 4D 4F 52 44 4F 52 10316 	.ascii "MORDOR@LAVA"
        40 4C 41 56 41
   3E3C 00                10317 	.db 0x00
                          10318 ;src/main.c:2282: void StartMenu() {
                          10319 ;	---------------------------------
                          10320 ; Function StartMenu
                          10321 ; ---------------------------------
   3E3D                   10322 _StartMenu::
   3E3D DD E5         [15]10323 	push	ix
   3E3F DD 21 00 00   [14]10324 	ld	ix,#0
   3E43 DD 39         [15]10325 	add	ix,sp
   3E45 F5            [11]10326 	push	af
                          10327 ;src/main.c:2283: u8 randSeed = 254;
   3E46 DD 36 FE FE   [19]10328 	ld	-2 (ix), #0xfe
                          10329 ;src/main.c:2284: u8 page = 0;
   3E4A DD 36 FF 00   [19]10330 	ld	-1 (ix), #0x00
                          10331 ;src/main.c:2286: while(1) {
   3E4E                   10332 00122$:
                          10333 ;src/main.c:2289: if (++randSeed == 255) {					
   3E4E DD 34 FE      [23]10334 	inc	-2 (ix)
   3E51 DD 7E FE      [19]10335 	ld	a, -2 (ix)
   3E54 3C            [ 4]10336 	inc	a
   3E55 20 27         [12]10337 	jr	NZ,00109$
                          10338 ;src/main.c:2290: if (page == 0) 		PrintStartMenu();	// page 1; menu
   3E57 DD 7E FF      [19]10339 	ld	a, -1 (ix)
   3E5A B7            [ 4]10340 	or	a, a
   3E5B 20 05         [12]10341 	jr	NZ,00104$
   3E5D CDr52r3A      [17]10342 	call	_PrintStartMenu
   3E60 18 0A         [12]10343 	jr	00105$
   3E62                   10344 00104$:
                          10345 ;src/main.c:2291: else if(page == 4)	PrintObjInfo();		// page 2; ingredients info
   3E62 DD 7E FF      [19]10346 	ld	a, -1 (ix)
   3E65 D6 04         [ 7]10347 	sub	a, #0x04
   3E67 20 03         [12]10348 	jr	NZ,00105$
   3E69 CDr33r3C      [17]10349 	call	_PrintObjInfo
   3E6C                   10350 00105$:
                          10351 ;src/main.c:2293: randSeed = 0;
   3E6C DD 36 FE 00   [19]10352 	ld	-2 (ix), #0x00
                          10353 ;src/main.c:2294: if (++page == 8) //12
   3E70 DD 34 FF      [23]10354 	inc	-1 (ix)
   3E73 DD 7E FF      [19]10355 	ld	a, -1 (ix)
   3E76 D6 08         [ 7]10356 	sub	a, #0x08
   3E78 20 04         [12]10357 	jr	NZ,00109$
                          10358 ;src/main.c:2295: page = 0;		
   3E7A DD 36 FF 00   [19]10359 	ld	-1 (ix), #0x00
   3E7E                   10360 00109$:
                          10361 ;src/main.c:2298: cpct_scanKeyboard_f();
   3E7E CDr00r00      [17]10362 	call	_cpct_scanKeyboard_f
                          10363 ;src/main.c:2299: if(cpct_isKeyPressed(Key_1)) { // 1 player
   3E81 21 08 01      [10]10364 	ld	hl, #0x0108
   3E84 CDr00r00      [17]10365 	call	_cpct_isKeyPressed
   3E87 7D            [ 4]10366 	ld	a, l
   3E88 B7            [ 4]10367 	or	a, a
   3E89 28 08         [12]10368 	jr	Z,00119$
                          10369 ;src/main.c:2300: TwoPlayers = FALSE;	
   3E8B 21r04r00      [10]10370 	ld	hl,#_TwoPlayers + 0
   3E8E 36 00         [10]10371 	ld	(hl), #0x00
                          10372 ;src/main.c:2301: break;
   3E90 C3r9Br3F      [10]10373 	jp	00123$
   3E93                   10374 00119$:
                          10375 ;src/main.c:2303: else if(cpct_isKeyPressed(Key_2)) {	// 2 players
   3E93 21 08 02      [10]10376 	ld	hl, #0x0208
   3E96 CDr00r00      [17]10377 	call	_cpct_isKeyPressed
   3E99 7D            [ 4]10378 	ld	a, l
   3E9A B7            [ 4]10379 	or	a, a
   3E9B 28 08         [12]10380 	jr	Z,00116$
                          10381 ;src/main.c:2304: TwoPlayers = TRUE;
   3E9D 21r04r00      [10]10382 	ld	hl,#_TwoPlayers + 0
   3EA0 36 01         [10]10383 	ld	(hl), #0x01
                          10384 ;src/main.c:2305: break;
   3EA2 C3r9Br3F      [10]10385 	jp	00123$
   3EA5                   10386 00116$:
                          10387 ;src/main.c:2307: else if(cpct_isKeyPressed(Key_3)){ // redefine keys
   3EA5 21 07 02      [10]10388 	ld	hl, #0x0207
   3EA8 CDr00r00      [17]10389 	call	_cpct_isKeyPressed
   3EAB 7D            [ 4]10390 	ld	a, l
   3EAC B7            [ 4]10391 	or	a, a
   3EAD CAr6Er3F      [10]10392 	jp	Z, 00113$
                          10393 ;src/main.c:2308: Wait4Key(Key_3);
   3EB0 21 07 02      [10]10394 	ld	hl, #0x0207
   3EB3 E5            [11]10395 	push	hl
   3EB4 CDrB9r0A      [17]10396 	call	_Wait4Key
   3EB7 F1            [10]10397 	pop	af
                          10398 ;src/main.c:2309: randSeed = 0; page = 1;
   3EB8 DD 36 FE 00   [19]10399 	ld	-2 (ix), #0x00
   3EBC DD 36 FF 01   [19]10400 	ld	-1 (ix), #0x01
                          10401 ;src/main.c:2310: PrintStartMenu();
   3EC0 CDr52r3A      [17]10402 	call	_PrintStartMenu
                          10403 ;src/main.c:2312: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 22, 110), cpct_px2byteM0(1, 1), 45, 70);
   3EC3 21 01 01      [10]10404 	ld	hl, #0x0101
   3EC6 E5            [11]10405 	push	hl
   3EC7 CDr00r00      [17]10406 	call	_cpct_px2byteM0
   3ECA 26 00         [ 7]10407 	ld	h, #0x00
   3ECC 01 2D 46      [10]10408 	ld	bc, #0x462d
   3ECF C5            [11]10409 	push	bc
   3ED0 E5            [11]10410 	push	hl
   3ED1 21 26 F4      [10]10411 	ld	hl, #0xf426
   3ED4 E5            [11]10412 	push	hl
   3ED5 CDr00r00      [17]10413 	call	_cpct_drawSolidBox
                          10414 ;src/main.c:2315: ctlUp[0] = 		RedefineKey("@P1@UP");
   3ED8 21rA9r3F      [10]10415 	ld	hl, #___str_73
   3EDB E5            [11]10416 	push	hl
   3EDC CDrD6r0A      [17]10417 	call	_RedefineKey
   3EDF F1            [10]10418 	pop	af
   3EE0 4D            [ 4]10419 	ld	c, l
   3EE1 44            [ 4]10420 	ld	b, h
   3EE2 ED 43r23r00   [20]10421 	ld	(_ctlUp), bc
                          10422 ;src/main.c:2316: ctlDown[0] = 	RedefineKey("P1@DOWN");
   3EE6 21rB0r3F      [10]10423 	ld	hl, #___str_74
   3EE9 E5            [11]10424 	push	hl
   3EEA CDrD6r0A      [17]10425 	call	_RedefineKey
   3EED F1            [10]10426 	pop	af
   3EEE 4D            [ 4]10427 	ld	c, l
   3EEF 44            [ 4]10428 	ld	b, h
   3EF0 ED 43r27r00   [20]10429 	ld	(_ctlDown), bc
                          10430 ;src/main.c:2317: ctlLeft[0] = 	RedefineKey("P1@LEFT");
   3EF4 21rB8r3F      [10]10431 	ld	hl, #___str_75
   3EF7 E5            [11]10432 	push	hl
   3EF8 CDrD6r0A      [17]10433 	call	_RedefineKey
   3EFB F1            [10]10434 	pop	af
   3EFC 4D            [ 4]10435 	ld	c, l
   3EFD 44            [ 4]10436 	ld	b, h
   3EFE ED 43r2Br00   [20]10437 	ld	(_ctlLeft), bc
                          10438 ;src/main.c:2318: ctlRight[0] = 	RedefineKey("P1@RIGHT");
   3F02 21rC0r3F      [10]10439 	ld	hl, #___str_76
   3F05 E5            [11]10440 	push	hl
   3F06 CDrD6r0A      [17]10441 	call	_RedefineKey
   3F09 F1            [10]10442 	pop	af
   3F0A 4D            [ 4]10443 	ld	c, l
   3F0B 44            [ 4]10444 	ld	b, h
   3F0C ED 43r2Fr00   [20]10445 	ld	(_ctlRight), bc
                          10446 ;src/main.c:2320: ctlUp[1] = 		RedefineKey("@P2@UP@@");
   3F10 21rC9r3F      [10]10447 	ld	hl, #___str_77
   3F13 E5            [11]10448 	push	hl
   3F14 CDrD6r0A      [17]10449 	call	_RedefineKey
   3F17 F1            [10]10450 	pop	af
   3F18 4D            [ 4]10451 	ld	c, l
   3F19 44            [ 4]10452 	ld	b, h
   3F1A ED 43r25r00   [20]10453 	ld	((_ctlUp + 0x0002)), bc
                          10454 ;src/main.c:2321: ctlDown[1] = 	RedefineKey("P2@DOWN");
   3F1E 21rD2r3F      [10]10455 	ld	hl, #___str_78
   3F21 E5            [11]10456 	push	hl
   3F22 CDrD6r0A      [17]10457 	call	_RedefineKey
   3F25 F1            [10]10458 	pop	af
   3F26 4D            [ 4]10459 	ld	c, l
   3F27 44            [ 4]10460 	ld	b, h
   3F28 ED 43r29r00   [20]10461 	ld	((_ctlDown + 0x0002)), bc
                          10462 ;src/main.c:2322: ctlLeft[1] = 	RedefineKey("P2@LEFT");
   3F2C 21rDAr3F      [10]10463 	ld	hl, #___str_79
   3F2F E5            [11]10464 	push	hl
   3F30 CDrD6r0A      [17]10465 	call	_RedefineKey
   3F33 F1            [10]10466 	pop	af
   3F34 4D            [ 4]10467 	ld	c, l
   3F35 44            [ 4]10468 	ld	b, h
   3F36 ED 43r2Dr00   [20]10469 	ld	((_ctlLeft + 0x0002)), bc
                          10470 ;src/main.c:2323: ctlRight[1] = 	RedefineKey("P2@RIGHT");	
   3F3A 21rE2r3F      [10]10471 	ld	hl, #___str_80
   3F3D E5            [11]10472 	push	hl
   3F3E CDrD6r0A      [17]10473 	call	_RedefineKey
   3F41 F1            [10]10474 	pop	af
   3F42 4D            [ 4]10475 	ld	c, l
   3F43 44            [ 4]10476 	ld	b, h
   3F44 ED 43r31r00   [20]10477 	ld	((_ctlRight + 0x0002)), bc
                          10478 ;src/main.c:2325: ctlAbort = 		RedefineKey("@ABORT@@");
   3F48 21rEBr3F      [10]10479 	ld	hl, #___str_81
   3F4B E5            [11]10480 	push	hl
   3F4C CDrD6r0A      [17]10481 	call	_RedefineKey
   3F4F F1            [10]10482 	pop	af
   3F50 22r33r00      [16]10483 	ld	(_ctlAbort), hl
                          10484 ;src/main.c:2326: ctlMusic = 		RedefineKey("@MUSIC");
   3F53 21rF4r3F      [10]10485 	ld	hl, #___str_82
   3F56 E5            [11]10486 	push	hl
   3F57 CDrD6r0A      [17]10487 	call	_RedefineKey
   3F5A F1            [10]10488 	pop	af
   3F5B 22r35r00      [16]10489 	ld	(_ctlMusic), hl
                          10490 ;src/main.c:2327: ctlPause =		RedefineKey("@PAUSE");		
   3F5E 21rFBr3F      [10]10491 	ld	hl, #___str_83
   3F61 E5            [11]10492 	push	hl
   3F62 CDrD6r0A      [17]10493 	call	_RedefineKey
   3F65 F1            [10]10494 	pop	af
   3F66 22r37r00      [16]10495 	ld	(_ctlPause), hl
                          10496 ;src/main.c:2328: PrintStartMenu();
   3F69 CDr52r3A      [17]10497 	call	_PrintStartMenu
   3F6C 18 24         [12]10498 	jr	00120$
   3F6E                   10499 00113$:
                          10500 ;src/main.c:2330: else if(cpct_isKeyPressed(Key_4)) {	// turbo mode
   3F6E 21 07 01      [10]10501 	ld	hl, #0x0107
   3F71 CDr00r00      [17]10502 	call	_cpct_isKeyPressed
   3F74 7D            [ 4]10503 	ld	a, l
   3F75 B7            [ 4]10504 	or	a, a
   3F76 28 1A         [12]10505 	jr	Z,00120$
                          10506 ;src/main.c:2331: turboMode = !turboMode;
   3F78 FD 21r1Er00   [14]10507 	ld	iy, #_turboMode
   3F7C FD 7E 00      [19]10508 	ld	a, 0 (iy)
   3F7F D6 01         [ 7]10509 	sub	a,#0x01
   3F81 3E 00         [ 7]10510 	ld	a, #0x00
   3F83 17            [ 4]10511 	rla
   3F84 FD 77 00      [19]10512 	ld	0 (iy), a
                          10513 ;src/main.c:2332: randSeed = 0; page = 1;
   3F87 DD 36 FE 00   [19]10514 	ld	-2 (ix), #0x00
   3F8B DD 36 FF 01   [19]10515 	ld	-1 (ix), #0x01
                          10516 ;src/main.c:2333: PrintStartMenu();
   3F8F CDr52r3A      [17]10517 	call	_PrintStartMenu
   3F92                   10518 00120$:
                          10519 ;src/main.c:2335: Pause(3);
   3F92 21 03 00      [10]10520 	ld	hl, #0x0003
   3F95 CDrFEr01      [17]10521 	call	_Pause
   3F98 C3r4Er3E      [10]10522 	jp	00122$
   3F9B                   10523 00123$:
                          10524 ;src/main.c:2337: cpct_setSeed_lcg_u8(randSeed); // set the seed
   3F9B DD 6E FE      [19]10525 	ld	l, -2 (ix)
   3F9E CDr00r00      [17]10526 	call	_cpct_setSeed_lcg_u8
                          10527 ;src/main.c:2338: ClearScreen();
   3FA1 CDr20r02      [17]10528 	call	_ClearScreen
   3FA4 DD F9         [10]10529 	ld	sp, ix
   3FA6 DD E1         [14]10530 	pop	ix
   3FA8 C9            [10]10531 	ret
   3FA9                   10532 ___str_73:
   3FA9 40 50 31 40 55 50 10533 	.ascii "@P1@UP"
   3FAF 00                10534 	.db 0x00
   3FB0                   10535 ___str_74:
   3FB0 50 31 40 44 4F 57 10536 	.ascii "P1@DOWN"
        4E
   3FB7 00                10537 	.db 0x00
   3FB8                   10538 ___str_75:
   3FB8 50 31 40 4C 45 46 10539 	.ascii "P1@LEFT"
        54
   3FBF 00                10540 	.db 0x00
   3FC0                   10541 ___str_76:
   3FC0 50 31 40 52 49 47 10542 	.ascii "P1@RIGHT"
        48 54
   3FC8 00                10543 	.db 0x00
   3FC9                   10544 ___str_77:
   3FC9 40 50 32 40 55 50 10545 	.ascii "@P2@UP@@"
        40 40
   3FD1 00                10546 	.db 0x00
   3FD2                   10547 ___str_78:
   3FD2 50 32 40 44 4F 57 10548 	.ascii "P2@DOWN"
        4E
   3FD9 00                10549 	.db 0x00
   3FDA                   10550 ___str_79:
   3FDA 50 32 40 4C 45 46 10551 	.ascii "P2@LEFT"
        54
   3FE1 00                10552 	.db 0x00
   3FE2                   10553 ___str_80:
   3FE2 50 32 40 52 49 47 10554 	.ascii "P2@RIGHT"
        48 54
   3FEA 00                10555 	.db 0x00
   3FEB                   10556 ___str_81:
   3FEB 40 41 42 4F 52 54 10557 	.ascii "@ABORT@@"
        40 40
   3FF3 00                10558 	.db 0x00
   3FF4                   10559 ___str_82:
   3FF4 40 4D 55 53 49 43 10560 	.ascii "@MUSIC"
   3FFA 00                10561 	.db 0x00
   3FFB                   10562 ___str_83:
   3FFB 40 50 41 55 53 45 10563 	.ascii "@PAUSE"
   4001 00                10564 	.db 0x00
                          10565 ;src/main.c:2355: void InitValues() {	
                          10566 ;	---------------------------------
                          10567 ; Function InitValues
                          10568 ; ---------------------------------
   4002                   10569 _InitValues::
                          10570 ;src/main.c:2358: ctlUp[0] = Key_W;
   4002 21 07 08      [10]10571 	ld	hl, #0x0807
   4005 22r23r00      [16]10572 	ld	(_ctlUp), hl
                          10573 ;src/main.c:2359: ctlDown[0] = Key_S;
   4008 26 10         [ 7]10574 	ld	h, #0x10
   400A 22r27r00      [16]10575 	ld	(_ctlDown), hl
                          10576 ;src/main.c:2360: ctlLeft[0] = Key_A;
   400D 21 08 20      [10]10577 	ld	hl, #0x2008
   4010 22r2Br00      [16]10578 	ld	(_ctlLeft), hl
                          10579 ;src/main.c:2361: ctlRight[0] = Key_D;
   4013 2E 07         [ 7]10580 	ld	l, #0x07
   4015 22r2Fr00      [16]10581 	ld	(_ctlRight), hl
                          10582 ;src/main.c:2363: ctlUp[1] = Key_F5;
   4018 21 01 10      [10]10583 	ld	hl, #0x1001
   401B 22r25r00      [16]10584 	ld	((_ctlUp + 0x0002)), hl
                          10585 ;src/main.c:2364: ctlDown[1] = Key_F2;
   401E 26 40         [ 7]10586 	ld	h, #0x40
   4020 22r29r00      [16]10587 	ld	((_ctlDown + 0x0002)), hl
                          10588 ;src/main.c:2365: ctlLeft[1] = Key_F1;
   4023 26 20         [ 7]10589 	ld	h, #0x20
   4025 22r2Dr00      [16]10590 	ld	((_ctlLeft + 0x0002)), hl
                          10591 ;src/main.c:2366: ctlRight[1] = Key_F3;
   4028 2E 00         [ 7]10592 	ld	l, #0x00
   402A 22r31r00      [16]10593 	ld	((_ctlRight + 0x0002)), hl
                          10594 ;src/main.c:2368: ctlAbort = Key_X;
   402D 21 07 80      [10]10595 	ld	hl, #0x8007
   4030 22r33r00      [16]10596 	ld	(_ctlAbort), hl
                          10597 ;src/main.c:2369: ctlMusic = Key_M;
   4033 21 04 40      [10]10598 	ld	hl, #0x4004
   4036 22r35r00      [16]10599 	ld	(_ctlMusic), hl
                          10600 ;src/main.c:2370: ctlPause = Key_H;	
   4039 21 05 10      [10]10601 	ld	hl, #0x1005
   403C 22r37r00      [16]10602 	ld	(_ctlPause), hl
                          10603 ;src/main.c:2372: turboMode = FALSE;
   403F 21r1Er00      [10]10604 	ld	hl,#_turboMode + 0
   4042 36 00         [10]10605 	ld	(hl), #0x00
                          10606 ;src/main.c:2373: nTip = 0;
   4044 21r1Fr00      [10]10607 	ld	hl,#_nTip + 0
   4047 36 00         [10]10608 	ld	(hl), #0x00
   4049 C9            [10]10609 	ret
                          10610 ;src/main.c:2378: void ResetData() {
                          10611 ;	---------------------------------
                          10612 ; Function ResetData
                          10613 ; ---------------------------------
   404A                   10614 _ResetData::
                          10615 ;src/main.c:2379: ctMainLoop = 0;
   404A 21 00 00      [10]10616 	ld	hl, #0x0000
   404D 22r21r00      [16]10617 	ld	(_ctMainLoop), hl
                          10618 ;src/main.c:2380: nObj[0] = -1;
   4050 21rA7r00      [10]10619 	ld	hl, #_nObj+0
   4053 36 FF         [10]10620 	ld	(hl), #0xff
                          10621 ;src/main.c:2381: nObj[1] = -1;
   4055 23            [ 6]10622 	inc	hl
   4056 36 FF         [10]10623 	ld	(hl), #0xff
                          10624 ;src/main.c:2382: sht.active = FALSE;
   4058 21rA6r00      [10]10625 	ld	hl, #(_sht + 0x0004)
   405B 36 00         [10]10626 	ld	(hl), #0x00
                          10627 ;src/main.c:2383: ctWizardAnim = 0;
   405D 21r20r00      [10]10628 	ld	hl,#_ctWizardAnim + 0
   4060 36 00         [10]10629 	ld	(hl), #0x00
                          10630 ;src/main.c:2386: spr[0].dir = D_right; 
   4062 21r40r00      [10]10631 	ld	hl, #(_spr + 0x0007)
   4065 36 03         [10]10632 	ld	(hl), #0x03
                          10633 ;src/main.c:2387: spr[0].status = S_stopped;
   4067 21r3Fr00      [10]10634 	ld	hl, #(_spr + 0x0006)
   406A 36 04         [10]10635 	ld	(hl), #0x04
                          10636 ;src/main.c:2388: spr[0].print_minV = TRUE; // the first time must be printed on screen
   406C 21r46r00      [10]10637 	ld	hl, #(_spr + 0x000d)
   406F 36 01         [10]10638 	ld	(hl), #0x01
                          10639 ;src/main.c:2389: spr[0].power_maxV = 0;
   4071 21r47r00      [10]10640 	ld	hl, #(_spr + 0x000e)
   4074 36 00         [10]10641 	ld	(hl), #0x00
                          10642 ;src/main.c:2390: ctInactivity[0] = 0;
   4076 01r1Cr00      [10]10643 	ld	bc, #_ctInactivity+0
   4079 AF            [ 4]10644 	xor	a, a
   407A 02            [ 7]10645 	ld	(bc), a
                          10646 ;src/main.c:2392: spr[1].dir = D_left; 
   407B 21r4Fr00      [10]10647 	ld	hl, #(_spr + 0x0016)
   407E 36 02         [10]10648 	ld	(hl), #0x02
                          10649 ;src/main.c:2393: spr[1].status = S_stopped;	
   4080 21r4Er00      [10]10650 	ld	hl, #(_spr + 0x0015)
   4083 36 04         [10]10651 	ld	(hl), #0x04
                          10652 ;src/main.c:2394: spr[1].print_minV = TRUE; // the first time must be printed on screen
   4085 21r55r00      [10]10653 	ld	hl, #(_spr + 0x001c)
   4088 36 01         [10]10654 	ld	(hl), #0x01
                          10655 ;src/main.c:2395: spr[1].power_maxV = 0;
   408A 21r56r00      [10]10656 	ld	hl, #(_spr + 0x001d)
   408D 36 00         [10]10657 	ld	(hl), #0x00
                          10658 ;src/main.c:2396: ctInactivity[1] = 0;
   408F 03            [ 6]10659 	inc	bc
   4090 AF            [ 4]10660 	xor	a, a
   4091 02            [ 7]10661 	ld	(bc), a
                          10662 ;src/main.c:2398: SetEnemies();
   4092 CDr13r2F      [17]10663 	call	_SetEnemies
                          10664 ;src/main.c:2399: PrintMap();
   4095 CDr95r02      [17]10665 	call	_PrintMap
                          10666 ;src/main.c:2400: RefreshScoreboard();
   4098 CDr80r0C      [17]10667 	call	_RefreshScoreboard
                          10668 ;src/main.c:2401: DeleteObjectInStore();
   409B CDr24r0F      [17]10669 	call	_DeleteObjectInStore
                          10670 ;src/main.c:2404: if (nMap != lastNMap) {
   409E 3Ar00r00      [13]10671 	ld	a,(#_nMap + 0)
   40A1 FD 21r01r00   [14]10672 	ld	iy, #_lastNMap
   40A5 FD 96 00      [19]10673 	sub	a, 0 (iy)
   40A8 C8            [11]10674 	ret	Z
                          10675 ;src/main.c:2405: if (!TwoPlayers) {
   40A9 3Ar04r00      [13]10676 	ld	a,(#_TwoPlayers + 0)
   40AC B7            [ 4]10677 	or	a, a
   40AD 20 1C         [12]10678 	jr	NZ,00102$
                          10679 ;src/main.c:2406: PrintKey();
   40AF CDr0Br16      [17]10680 	call	_PrintKey
                          10681 ;src/main.c:2408: playerKey[0] = 0;
   40B2 21r14r00      [10]10682 	ld	hl, #_playerKey
   40B5 36 00         [10]10683 	ld	(hl), #0x00
                          10684 ;src/main.c:2409: playerKey[1] = 0;
   40B7 21r15r00      [10]10685 	ld	hl, #(_playerKey + 0x0001)
   40BA 36 00         [10]10686 	ld	(hl), #0x00
                          10687 ;src/main.c:2410: playerKey[2] = 0;
   40BC 21r16r00      [10]10688 	ld	hl, #(_playerKey + 0x0002)
   40BF 36 00         [10]10689 	ld	(hl), #0x00
                          10690 ;src/main.c:2411: playerKey[3] = 0;
   40C1 21r17r00      [10]10691 	ld	hl, #(_playerKey + 0x0003)
   40C4 36 00         [10]10692 	ld	(hl), #0x00
                          10693 ;src/main.c:2412: playerKey[4] = 0;
   40C6 21r18r00      [10]10694 	ld	hl, #(_playerKey + 0x0004)
   40C9 36 00         [10]10695 	ld	(hl), #0x00
   40CB                   10696 00102$:
                          10697 ;src/main.c:2414: PrintLevelInfo();	
   40CB CDr94r06      [17]10698 	call	_PrintLevelInfo
                          10699 ;src/main.c:2415: PrintMap();	
   40CE CDr95r02      [17]10700 	call	_PrintMap
                          10701 ;src/main.c:2416: lastNMap = nMap;
   40D1 3Ar00r00      [13]10702 	ld	a,(#_nMap + 0)
   40D4 32r01r00      [13]10703 	ld	(#_lastNMap + 0),a
   40D7 C9            [10]10704 	ret
                          10705 ;src/main.c:2422: void InitGame() {
                          10706 ;	---------------------------------
                          10707 ; Function InitGame
                          10708 ; ---------------------------------
   40D8                   10709 _InitGame::
                          10710 ;src/main.c:2423: StartMenu(); // run the start menu
   40D8 CDr3Dr3E      [17]10711 	call	_StartMenu
                          10712 ;src/main.c:2424: nMap = 0; // initial map number
   40DB 21r00r00      [10]10713 	ld	hl,#_nMap + 0
   40DE 36 00         [10]10714 	ld	(hl), #0x00
                          10715 ;src/main.c:2425: lastNMap = 255;
   40E0 21r01r00      [10]10716 	ld	hl,#_lastNMap + 0
   40E3 36 FF         [10]10717 	ld	(hl), #0xff
                          10718 ;src/main.c:2428: spr[0].num = 0; // sprite number
   40E5 21r39r00      [10]10719 	ld	hl, #_spr
   40E8 36 00         [10]10720 	ld	(hl), #0x00
                          10721 ;src/main.c:2429: spr[0].ident = SORCERER1; // identity
   40EA 21r3Ar00      [10]10722 	ld	hl, #(_spr + 0x0001)
   40ED 36 00         [10]10723 	ld	(hl), #0x00
                          10724 ;src/main.c:2430: spr[0].lives_speed = 3; // lives
   40EF 21r44r00      [10]10725 	ld	hl, #(_spr + 0x000b)
   40F2 36 03         [10]10726 	ld	(hl), #0x03
                          10727 ;src/main.c:2431: score[0] = 0; // score
   40F4 21 00 00      [10]10728 	ld	hl, #0x0000
   40F7 22r05r00      [16]10729 	ld	(_score), hl
                          10730 ;src/main.c:2432: ResetObjData(0);
   40FA 2E 00         [ 7]10731 	ld	l, #0x00
   40FC CDr99r0D      [17]10732 	call	_ResetObjData
                          10733 ;src/main.c:2435: spr[1].num = 1; // sprite number
   40FF 21r48r00      [10]10734 	ld	hl, #(_spr + 0x000f)
   4102 36 01         [10]10735 	ld	(hl), #0x01
                          10736 ;src/main.c:2436: spr[1].ident = SORCERER2; // identity
   4104 21r49r00      [10]10737 	ld	hl, #(_spr + 0x0010)
   4107 36 01         [10]10738 	ld	(hl), #0x01
                          10739 ;src/main.c:2437: spr[1].lives_speed = 3; // lives
   4109 21r53r00      [10]10740 	ld	hl, #(_spr + 0x001a)
   410C 36 03         [10]10741 	ld	(hl), #0x03
                          10742 ;src/main.c:2438: score[1] = 0; // score
   410E 21 00 00      [10]10743 	ld	hl, #0x0000
   4111 22r07r00      [16]10744 	ld	((_score + 0x0002)), hl
                          10745 ;src/main.c:2439: ResetObjData(1);
   4114 2E 01         [ 7]10746 	ld	l, #0x01
   4116 CDr99r0D      [17]10747 	call	_ResetObjData
                          10748 ;src/main.c:2442: spr[6].num = 6; // sprite number
   4119 21r93r00      [10]10749 	ld	hl, #(_spr + 0x005a)
   411C 36 06         [10]10750 	ld	(hl), #0x06
                          10751 ;src/main.c:2443: spr[6].ident = WIZARD; // identity
   411E 21r94r00      [10]10752 	ld	hl, #(_spr + 0x005b)
   4121 36 07         [10]10753 	ld	(hl), #0x07
                          10754 ;src/main.c:2445: InitScoreboard();		
   4123 CDr15r0B      [17]10755 	call	_InitScoreboard
                          10756 ;src/main.c:2446: ResetData();
   4126 C3r4Ar40      [10]10757 	jp  _ResetData
                          10758 ;src/main.c:2451: void GameOver(u8 player) {
                          10759 ;	---------------------------------
                          10760 ; Function GameOver
                          10761 ; ---------------------------------
   4129                   10762 _GameOver::
   4129 DD E5         [15]10763 	push	ix
   412B DD 21 00 00   [14]10764 	ld	ix,#0
   412F DD 39         [15]10765 	add	ix,sp
   4131 F5            [11]10766 	push	af
                          10767 ;src/main.c:2453: if (spr[player].lives_speed > 1 && player != 2) {
   4132 01r39r00      [10]10768 	ld	bc, #_spr+0
   4135 DD 5E 04      [19]10769 	ld	e,4 (ix)
   4138 16 00         [ 7]10770 	ld	d,#0x00
   413A 6B            [ 4]10771 	ld	l, e
   413B 62            [ 4]10772 	ld	h, d
   413C 29            [11]10773 	add	hl, hl
   413D 19            [11]10774 	add	hl, de
   413E 29            [11]10775 	add	hl, hl
   413F 19            [11]10776 	add	hl, de
   4140 29            [11]10777 	add	hl, hl
   4141 19            [11]10778 	add	hl, de
   4142 09            [11]10779 	add	hl,bc
   4143 01 0B 00      [10]10780 	ld	bc,#0x000b
   4146 09            [11]10781 	add	hl,bc
   4147 E3            [19]10782 	ex	(sp), hl
   4148 E1            [10]10783 	pop	hl
   4149 E5            [11]10784 	push	hl
   414A 4E            [ 7]10785 	ld	c, (hl)
   414B 3E 01         [ 7]10786 	ld	a, #0x01
   414D 91            [ 4]10787 	sub	a, c
   414E 30 11         [12]10788 	jr	NC,00113$
   4150 DD 7E 04      [19]10789 	ld	a, 4 (ix)
   4153 D6 02         [ 7]10790 	sub	a, #0x02
   4155 28 0A         [12]10791 	jr	Z,00113$
                          10792 ;src/main.c:2454: spr[player].lives_speed--;
   4157 0D            [ 4]10793 	dec	c
   4158 E1            [10]10794 	pop	hl
   4159 E5            [11]10795 	push	hl
   415A 71            [ 7]10796 	ld	(hl), c
                          10797 ;src/main.c:2455: ResetData();
   415B CDr4Ar40      [17]10798 	call	_ResetData
   415E C3r32r42      [10]10799 	jp	00116$
   4161                   10800 00113$:
                          10801 ;src/main.c:2459: spr[player].lives_speed = 0;
   4161 E1            [10]10802 	pop	hl
   4162 E5            [11]10803 	push	hl
   4163 36 00         [10]10804 	ld	(hl), #0x00
                          10805 ;src/main.c:2460: RefreshScoreboard();
   4165 CDr80r0C      [17]10806 	call	_RefreshScoreboard
                          10807 ;src/main.c:2462: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START,  6, 80), cpct_px2byteM0(4, 4), 34, 60);
   4168 21 04 04      [10]10808 	ld	hl, #0x0404
   416B E5            [11]10809 	push	hl
   416C CDr00r00      [17]10810 	call	_cpct_px2byteM0
   416F 26 00         [ 7]10811 	ld	h, #0x00
   4171 01 22 3C      [10]10812 	ld	bc, #0x3c22
   4174 C5            [11]10813 	push	bc
   4175 E5            [11]10814 	push	hl
   4176 21 26 C3      [10]10815 	ld	hl, #0xc326
   4179 E5            [11]10816 	push	hl
   417A CDr00r00      [17]10817 	call	_cpct_drawSolidBox
                          10818 ;src/main.c:2463: cpct_drawSolidBox(cpctm_screenPtr(CPCT_VMEM_START, 40, 80), cpct_px2byteM0(4, 4), 34, 60);
   417D 21 04 04      [10]10819 	ld	hl, #0x0404
   4180 E5            [11]10820 	push	hl
   4181 CDr00r00      [17]10821 	call	_cpct_px2byteM0
   4184 26 00         [ 7]10822 	ld	h, #0x00
   4186 01 22 3C      [10]10823 	ld	bc, #0x3c22
   4189 C5            [11]10824 	push	bc
   418A E5            [11]10825 	push	hl
   418B 21 48 C3      [10]10826 	ld	hl, #0xc348
   418E E5            [11]10827 	push	hl
   418F CDr00r00      [17]10828 	call	_cpct_drawSolidBox
                          10829 ;src/main.c:2464: PrintFrame(6,80,71,134);
   4192 21 47 86      [10]10830 	ld	hl, #0x8647
   4195 E5            [11]10831 	push	hl
   4196 21 06 50      [10]10832 	ld	hl, #0x5006
   4199 E5            [11]10833 	push	hl
   419A CDr1Dr04      [17]10834 	call	_PrintFrame
   419D F1            [10]10835 	pop	af
   419E F1            [10]10836 	pop	af
                          10837 ;src/main.c:2465: if (TwoPlayers) {
   419F 3Ar04r00      [13]10838 	ld	a,(#_TwoPlayers + 0)
   41A2 B7            [ 4]10839 	or	a, a
   41A3 28 6B         [12]10840 	jr	Z,00107$
                          10841 ;src/main.c:2466: PrintText("G@A@M@E@@O@V@E@R", 16, 91, 0);
   41A5 21 5B 00      [10]10842 	ld	hl, #0x005b
   41A8 E5            [11]10843 	push	hl
   41A9 3E 10         [ 7]10844 	ld	a, #0x10
   41AB F5            [11]10845 	push	af
   41AC 33            [ 6]10846 	inc	sp
   41AD 21r37r42      [10]10847 	ld	hl, #___str_84
   41B0 E5            [11]10848 	push	hl
   41B1 CDr7Ar03      [17]10849 	call	_PrintText
   41B4 F1            [10]10850 	pop	af
   41B5 F1            [10]10851 	pop	af
   41B6 33            [ 6]10852 	inc	sp
                          10853 ;src/main.c:2467: if (player == 0) PrintText("PLAYER@2@WINS>", 19, 106, 0);
   41B7 DD 7E 04      [19]10854 	ld	a, 4 (ix)
   41BA B7            [ 4]10855 	or	a, a
   41BB 20 14         [12]10856 	jr	NZ,00104$
   41BD 21 6A 00      [10]10857 	ld	hl, #0x006a
   41C0 E5            [11]10858 	push	hl
   41C1 3E 13         [ 7]10859 	ld	a, #0x13
   41C3 F5            [11]10860 	push	af
   41C4 33            [ 6]10861 	inc	sp
   41C5 21r48r42      [10]10862 	ld	hl, #___str_85
   41C8 E5            [11]10863 	push	hl
   41C9 CDr7Ar03      [17]10864 	call	_PrintText
   41CC F1            [10]10865 	pop	af
   41CD F1            [10]10866 	pop	af
   41CE 33            [ 6]10867 	inc	sp
   41CF 18 18         [12]10868 	jr	00105$
   41D1                   10869 00104$:
                          10870 ;src/main.c:2468: else if (player == 1) PrintText("PLAYER@1@WINS>", 19, 106, 0);
   41D1 DD 7E 04      [19]10871 	ld	a, 4 (ix)
   41D4 3D            [ 4]10872 	dec	a
   41D5 20 12         [12]10873 	jr	NZ,00105$
   41D7 21 6A 00      [10]10874 	ld	hl, #0x006a
   41DA E5            [11]10875 	push	hl
   41DB 3E 13         [ 7]10876 	ld	a, #0x13
   41DD F5            [11]10877 	push	af
   41DE 33            [ 6]10878 	inc	sp
   41DF 21r57r42      [10]10879 	ld	hl, #___str_86
   41E2 E5            [11]10880 	push	hl
   41E3 CDr7Ar03      [17]10881 	call	_PrintText
   41E6 F1            [10]10882 	pop	af
   41E7 F1            [10]10883 	pop	af
   41E8 33            [ 6]10884 	inc	sp
   41E9                   10885 00105$:
                          10886 ;src/main.c:2469: PrintText("HIGH@SCORE:", 16, 122, 0);
   41E9 21 7A 00      [10]10887 	ld	hl, #0x007a
   41EC E5            [11]10888 	push	hl
   41ED 3E 10         [ 7]10889 	ld	a, #0x10
   41EF F5            [11]10890 	push	af
   41F0 33            [ 6]10891 	inc	sp
   41F1 21r66r42      [10]10892 	ld	hl, #___str_87
   41F4 E5            [11]10893 	push	hl
   41F5 CDr7Ar03      [17]10894 	call	_PrintText
   41F8 F1            [10]10895 	pop	af
                          10896 ;src/main.c:2470: PrintNumber(highScore, 4, 52, 122, 0);			
   41F9 33            [ 6]10897 	inc	sp
   41FA 21 7A 00      [10]10898 	ld	hl,#0x007a
   41FD E3            [19]10899 	ex	(sp),hl
   41FE 21 04 34      [10]10900 	ld	hl, #0x3404
   4201 E5            [11]10901 	push	hl
   4202 2Ar09r00      [16]10902 	ld	hl, (_highScore)
   4205 E5            [11]10903 	push	hl
   4206 CDrABr02      [17]10904 	call	_PrintNumber
   4209 21 06 00      [10]10905 	ld	hl, #6
   420C 39            [11]10906 	add	hl, sp
   420D F9            [ 6]10907 	ld	sp, hl
   420E 18 12         [12]10908 	jr	00108$
   4210                   10909 00107$:
                          10910 ;src/main.c:2473: PrintText("G@A@M@E@@O@V@E@R", 16, 107, 0);
   4210 21 6B 00      [10]10911 	ld	hl, #0x006b
   4213 E5            [11]10912 	push	hl
   4214 3E 10         [ 7]10913 	ld	a, #0x10
   4216 F5            [11]10914 	push	af
   4217 33            [ 6]10915 	inc	sp
   4218 21r37r42      [10]10916 	ld	hl, #___str_84
   421B E5            [11]10917 	push	hl
   421C CDr7Ar03      [17]10918 	call	_PrintText
   421F F1            [10]10919 	pop	af
   4220 F1            [10]10920 	pop	af
   4221 33            [ 6]10921 	inc	sp
   4222                   10922 00108$:
                          10923 ;src/main.c:2474: Pause(500);	
   4222 21 F4 01      [10]10924 	ld	hl, #0x01f4
   4225 CDrFEr01      [17]10925 	call	_Pause
                          10926 ;src/main.c:2476: while (!cpct_isAnyKeyPressed());
   4228                   10927 00109$:
   4228 CDr00r00      [17]10928 	call	_cpct_isAnyKeyPressed
   422B 7D            [ 4]10929 	ld	a, l
   422C B7            [ 4]10930 	or	a, a
   422D 28 F9         [12]10931 	jr	Z,00109$
                          10932 ;src/main.c:2477: InitGame();
   422F CDrD8r40      [17]10933 	call	_InitGame
   4232                   10934 00116$:
   4232 DD F9         [10]10935 	ld	sp, ix
   4234 DD E1         [14]10936 	pop	ix
   4236 C9            [10]10937 	ret
   4237                   10938 ___str_84:
   4237 47 40 41 40 4D 40 10939 	.ascii "G@A@M@E@@O@V@E@R"
        45 40 40 4F 40 56
        40 45 40 52
   4247 00                10940 	.db 0x00
   4248                   10941 ___str_85:
   4248 50 4C 41 59 45 52 10942 	.ascii "PLAYER@2@WINS>"
        40 32 40 57 49 4E
        53 3E
   4256 00                10943 	.db 0x00
   4257                   10944 ___str_86:
   4257 50 4C 41 59 45 52 10945 	.ascii "PLAYER@1@WINS>"
        40 31 40 57 49 4E
        53 3E
   4265 00                10946 	.db 0x00
   4266                   10947 ___str_87:
   4266 48 49 47 48 40 53 10948 	.ascii "HIGH@SCORE:"
        43 4F 52 45 3A
   4271 00                10949 	.db 0x00
                          10950 ;src/main.c:2482: void main(void) {
                          10951 ;	---------------------------------
                          10952 ; Function main
                          10953 ; ---------------------------------
   4272                   10954 _main::
                          10955 ;src/main.c:2484: cpct_disableFirmware();
   4272 CDr00r00      [17]10956 	call	_cpct_disableFirmware
                          10957 ;src/main.c:2487: cpct_setInterruptHandler(Interrupt); 
   4275 21r0Ar02      [10]10958 	ld	hl, #_Interrupt
   4278 CDr00r00      [17]10959 	call	_cpct_setInterruptHandler
                          10960 ;src/main.c:2489: cpct_setVideoMode(0);
   427B 2E 00         [ 7]10961 	ld	l, #0x00
   427D CDr00r00      [17]10962 	call	_cpct_setVideoMode
                          10963 ;src/main.c:2491: cpct_setPalette(g_palette, 16);
   4280 21 10 00      [10]10964 	ld	hl, #0x0010
   4283 E5            [11]10965 	push	hl
   4284 21r00r00      [10]10966 	ld	hl, #_g_palette
   4287 E5            [11]10967 	push	hl
   4288 CDr00r00      [17]10968 	call	_cpct_setPalette
                          10969 ;src/main.c:2493: cpct_setBorder(g_palette[BG_COLOR]);
   428B 21r01r00      [10]10970 	ld	hl, #_g_palette + 1
   428E 46            [ 7]10971 	ld	b, (hl)
   428F C5            [11]10972 	push	bc
   4290 33            [ 6]10973 	inc	sp
   4291 3E 10         [ 7]10974 	ld	a, #0x10
   4293 F5            [11]10975 	push	af
   4294 33            [ 6]10976 	inc	sp
   4295 CDr00r00      [17]10977 	call	_cpct_setPALColour
                          10978 ;src/main.c:2495: cpct_etm_setTileset2x4(g_tileset);	
   4298 21r00r00      [10]10979 	ld	hl, #_g_tileset
   429B CDr00r00      [17]10980 	call	_cpct_etm_setTileset2x4
                          10981 ;src/main.c:2497: InitValues();
   429E CDr02r40      [17]10982 	call	_InitValues
                          10983 ;src/main.c:2499: InitGame();
   42A1 CDrD8r40      [17]10984 	call	_InitGame
                          10985 ;src/main.c:2502: while (1) {
   42A4                   10986 00140$:
                          10987 ;src/main.c:2504: if (ctMainLoop % 8 == 0) {
   42A4 21 08 00      [10]10988 	ld	hl, #0x0008
   42A7 E5            [11]10989 	push	hl
   42A8 2Ar21r00      [16]10990 	ld	hl, (_ctMainLoop)
   42AB E5            [11]10991 	push	hl
   42AC CDr00r00      [17]10992 	call	__modsint
   42AF F1            [10]10993 	pop	af
   42B0 F1            [10]10994 	pop	af
   42B1 7C            [ 4]10995 	ld	a, h
   42B2 B5            [ 4]10996 	or	a,l
   42B3 20 46         [12]10997 	jr	NZ,00108$
                          10998 ;src/main.c:2505: ReprintObject(); // reprint the active object
   42B5 CDrF1r11      [17]10999 	call	_ReprintObject
                          11000 ;src/main.c:2506: PrintObjectInStore(); // reprint the object into the store
   42B8 CDr60r0F      [17]11001 	call	_PrintObjectInStore
                          11002 ;src/main.c:2507: CheckObject(0); // verify collection of object 1
   42BB AF            [ 4]11003 	xor	a, a
   42BC F5            [11]11004 	push	af
   42BD 33            [ 6]11005 	inc	sp
   42BE CDr93r0F      [17]11006 	call	_CheckObject
   42C1 33            [ 6]11007 	inc	sp
                          11008 ;src/main.c:2508: CheckObject(1); // verify collection of object 2
   42C2 3E 01         [ 7]11009 	ld	a, #0x01
   42C4 F5            [11]11010 	push	af
   42C5 33            [ 6]11011 	inc	sp
   42C6 CDr93r0F      [17]11012 	call	_CheckObject
   42C9 33            [ 6]11013 	inc	sp
                          11014 ;src/main.c:2509: MakeWizardAnim(0); // activates the wizard's shot if the player 1 is inactive		
   42CA 2E 00         [ 7]11015 	ld	l, #0x00
   42CC CDrB5r29      [17]11016 	call	_MakeWizardAnim
                          11017 ;src/main.c:2510: if (spr[0].print_minV) CheckActiveTile(0); // check entry into store, door or well of player 1
   42CF 3Ar46r00      [13]11018 	ld	a, (#_spr + 13)
   42D2 B7            [ 4]11019 	or	a, a
   42D3 28 07         [12]11020 	jr	Z,00102$
   42D5 AF            [ 4]11021 	xor	a, a
   42D6 F5            [11]11022 	push	af
   42D7 33            [ 6]11023 	inc	sp
   42D8 CDr67r16      [17]11024 	call	_CheckActiveTile
   42DB 33            [ 6]11025 	inc	sp
   42DC                   11026 00102$:
                          11027 ;src/main.c:2512: if (TwoPlayers) {
   42DC 3Ar04r00      [13]11028 	ld	a,(#_TwoPlayers + 0)
   42DF B7            [ 4]11029 	or	a, a
   42E0 28 16         [12]11030 	jr	Z,00106$
                          11031 ;src/main.c:2513: CheckDuel(); // check that both players collide and have potions
   42E2 CDr5Fr27      [17]11032 	call	_CheckDuel
                          11033 ;src/main.c:2514: MakeWizardAnim(1); // activates the wizard's shot if the player 2 is inactive		
   42E5 2E 01         [ 7]11034 	ld	l, #0x01
   42E7 CDrB5r29      [17]11035 	call	_MakeWizardAnim
                          11036 ;src/main.c:2515: if (spr[1].print_minV) CheckActiveTile(1); // check entry into store, door or well of player 2
   42EA 3Ar55r00      [13]11037 	ld	a, (#_spr + 28)
   42ED B7            [ 4]11038 	or	a, a
   42EE 28 08         [12]11039 	jr	Z,00106$
   42F0 3E 01         [ 7]11040 	ld	a, #0x01
   42F2 F5            [11]11041 	push	af
   42F3 33            [ 6]11042 	inc	sp
   42F4 CDr67r16      [17]11043 	call	_CheckActiveTile
   42F7 33            [ 6]11044 	inc	sp
   42F8                   11045 00106$:
                          11046 ;src/main.c:2517: WizardAnim(); // print the wizard if active
   42F8 CDrFCr28      [17]11047 	call	_WizardAnim
   42FB                   11048 00108$:
                          11049 ;src/main.c:2520: if (!turboMode) cpct_waitVSYNC(); // wait for vertical retrace	
   42FB 3Ar1Er00      [13]11050 	ld	a,(#_turboMode + 0)
   42FE B7            [ 4]11051 	or	a, a
   42FF 20 03         [12]11052 	jr	NZ,00110$
   4301 CDr00r00      [17]11053 	call	_cpct_waitVSYNC
   4304                   11054 00110$:
                          11055 ;src/main.c:2523: switch (ctMainLoop % 3) {
   4304 21 03 00      [10]11056 	ld	hl, #0x0003
   4307 E5            [11]11057 	push	hl
   4308 2Ar21r00      [16]11058 	ld	hl, (_ctMainLoop)
   430B E5            [11]11059 	push	hl
   430C CDr00r00      [17]11060 	call	__modsint
   430F F1            [10]11061 	pop	af
   4310 F1            [10]11062 	pop	af
   4311 4D            [ 4]11063 	ld	c, l
   4312 44            [ 4]11064 	ld	b, h
   4313 79            [ 4]11065 	ld	a, c
   4314 B7            [ 4]11066 	or	a, a
   4315 B0            [ 4]11067 	or	a, b
   4316 28 0E         [12]11068 	jr	Z,00111$
   4318 79            [ 4]11069 	ld	a, c
   4319 3D            [ 4]11070 	dec	a
   431A B0            [ 4]11071 	or	a, b
   431B 28 18         [12]11072 	jr	Z,00112$
   431D 79            [ 4]11073 	ld	a, c
   431E D6 02         [ 7]11074 	sub	a, #0x02
   4320 B0            [ 4]11075 	or	a, b
   4321 28 2F         [12]11076 	jr	Z,00117$
   4323 C3rACr43      [10]11077 	jp	00129$
                          11078 ;src/main.c:2525: case 0: {							
   4326                   11079 00111$:
                          11080 ;src/main.c:2526: PlayerLoop(&spr[0]); // player 1
   4326 21r39r00      [10]11081 	ld	hl, #_spr
   4329 CDrD4r22      [17]11082 	call	_PlayerLoop
                          11083 ;src/main.c:2527: EnemyLoop(&spr[2]);	 // enemy sprite 2 is always processed (fast)
   432C 21r57r00      [10]11084 	ld	hl, #(_spr + 0x001e)
   432F CDrEBr39      [17]11085 	call	_EnemyLoop
                          11086 ;src/main.c:2528: break;
   4332 C3rACr43      [10]11087 	jp	00129$
                          11088 ;src/main.c:2531: case 1:	{			
   4335                   11089 00112$:
                          11090 ;src/main.c:2532: if (TwoPlayers) {
   4335 3Ar04r00      [13]11091 	ld	a,(#_TwoPlayers + 0)
   4338 B7            [ 4]11092 	or	a, a
   4339 28 0F         [12]11093 	jr	Z,00116$
                          11094 ;src/main.c:2533: PlayerLoop(&spr[1]); // player 2
   433B 21r48r00      [10]11095 	ld	hl, #(_spr + 0x000f)
   433E CDrD4r22      [17]11096 	call	_PlayerLoop
                          11097 ;src/main.c:2534: if (!turboMode) cpct_waitVSYNC(); // additional wait for vertical retrace (avoid flickering)
   4341 3Ar1Er00      [13]11098 	ld	a,(#_turboMode + 0)
   4344 B7            [ 4]11099 	or	a, a
   4345 20 03         [12]11100 	jr	NZ,00116$
   4347 CDr00r00      [17]11101 	call	_cpct_waitVSYNC
   434A                   11102 00116$:
                          11103 ;src/main.c:2536: EnemyLoop(&spr[3]);	 // enemy sprite 3 is always processed (fast)
   434A 21r66r00      [10]11104 	ld	hl, #(_spr + 0x002d)
   434D CDrEBr39      [17]11105 	call	_EnemyLoop
                          11106 ;src/main.c:2537: break;
   4350 18 5A         [12]11107 	jr	00129$
                          11108 ;src/main.c:2540: case 2:	{
   4352                   11109 00117$:
                          11110 ;src/main.c:2541: EnemyLoop(&spr[enemyTurn+4]); // enemy sprites 4 and 5 take turns processing (slow)				
   4352 3Ar1Br00      [13]11111 	ld	a,(#_enemyTurn + 0)
   4355 C6 04         [ 7]11112 	add	a, #0x04
   4357 4F            [ 4]11113 	ld	c,a
   4358 06 00         [ 7]11114 	ld	b,#0x00
   435A 69            [ 4]11115 	ld	l, c
   435B 60            [ 4]11116 	ld	h, b
   435C 29            [11]11117 	add	hl, hl
   435D 09            [11]11118 	add	hl, bc
   435E 29            [11]11119 	add	hl, hl
   435F 09            [11]11120 	add	hl, bc
   4360 29            [11]11121 	add	hl, hl
   4361 09            [11]11122 	add	hl, bc
   4362 11r39r00      [10]11123 	ld	de, #_spr
   4365 19            [11]11124 	add	hl, de
   4366 CDrEBr39      [17]11125 	call	_EnemyLoop
                          11126 ;src/main.c:2542: if (++enemyTurn > 1) enemyTurn = 0;
   4369 FD 21r1Br00   [14]11127 	ld	iy, #_enemyTurn
   436D FD 34 00      [23]11128 	inc	0 (iy)
   4370 3E 01         [ 7]11129 	ld	a, #0x01
   4372 FD 96 00      [19]11130 	sub	a, 0 (iy)
   4375 30 04         [12]11131 	jr	NC,00119$
   4377 FD 36 00 00   [19]11132 	ld	0 (iy), #0x00
   437B                   11133 00119$:
                          11134 ;src/main.c:2545: if (sht.active) {				
   437B 3ArA6r00      [13]11135 	ld	a, (#(_sht + 0x0004) + 0)
   437E B7            [ 4]11136 	or	a, a
   437F 28 17         [12]11137 	jr	Z,00124$
                          11138 ;src/main.c:2546: MoveShot(); // update the shot's XY coordinates	
   4381 CDr82r28      [17]11139 	call	_MoveShot
                          11140 ;src/main.c:2549: if (ctWizardAnim > 0) 	
   4384 3Ar20r00      [13]11141 	ld	a,(#_ctWizardAnim + 0)
   4387 B7            [ 4]11142 	or	a, a
   4388 28 08         [12]11143 	jr	Z,00121$
                          11144 ;src/main.c:2550: PrintShot(g_magic_3);	// wizard
   438A 21r00r00      [10]11145 	ld	hl, #_g_magic_3
   438D CDr58r28      [17]11146 	call	_PrintShot
   4390 18 06         [12]11147 	jr	00124$
   4392                   11148 00121$:
                          11149 ;src/main.c:2552: PrintShot(g_magic_2);	// witch
   4392 21r00r00      [10]11150 	ld	hl, #_g_magic_2
   4395 CDr58r28      [17]11151 	call	_PrintShot
   4398                   11152 00124$:
                          11153 ;src/main.c:2556: if (spr[0].power_maxV > 0) spr[0].power_maxV--;
   4398 01r47r00      [10]11154 	ld	bc, #_spr + 14
   439B 0A            [ 7]11155 	ld	a, (bc)
   439C B7            [ 4]11156 	or	a, a
   439D 28 03         [12]11157 	jr	Z,00126$
   439F C6 FF         [ 7]11158 	add	a, #0xff
   43A1 02            [ 7]11159 	ld	(bc), a
   43A2                   11160 00126$:
                          11161 ;src/main.c:2557: if (spr[1].power_maxV > 0) spr[1].power_maxV--;			
   43A2 01r56r00      [10]11162 	ld	bc, #_spr + 29
   43A5 0A            [ 7]11163 	ld	a, (bc)
   43A6 B7            [ 4]11164 	or	a, a
   43A7 28 03         [12]11165 	jr	Z,00129$
   43A9 C6 FF         [ 7]11166 	add	a, #0xff
   43AB 02            [ 7]11167 	ld	(bc), a
                          11168 ;src/main.c:2559: }
   43AC                   11169 00129$:
                          11170 ;src/main.c:2562: ctMainLoop++;
   43AC ED 4Br21r00   [20]11171 	ld	bc, (_ctMainLoop)
   43B0 03            [ 6]11172 	inc	bc
                          11173 ;src/main.c:2561: if (ctMainLoop == 174) {
   43B1 FD 21r21r00   [14]11174 	ld	iy, #_ctMainLoop
   43B5 FD 7E 00      [19]11175 	ld	a, 0 (iy)
   43B8 D6 AE         [ 7]11176 	sub	a, #0xae
   43BA FD B6 01      [19]11177 	or	a, 1 (iy)
   43BD 20 25         [12]11178 	jr	NZ,00137$
                          11179 ;src/main.c:2562: ctMainLoop++;
   43BF ED 43r21r00   [20]11180 	ld	(_ctMainLoop), bc
                          11181 ;src/main.c:2563: SetObject(1); // set the second object
   43C3 2E 01         [ 7]11182 	ld	l, #0x01
   43C5 CDr8Br14      [17]11183 	call	_SetObject
                          11184 ;src/main.c:2565: if (nMap == 0 && !TwoPlayers && nTip<1) 
   43C8 3Ar00r00      [13]11185 	ld	a,(#_nMap + 0)
   43CB B7            [ 4]11186 	or	a, a
   43CC C2rA4r42      [10]11187 	jp	NZ, 00140$
   43CF 3Ar04r00      [13]11188 	ld	a,(#_TwoPlayers + 0)
   43D2 B7            [ 4]11189 	or	a, a
   43D3 C2rA4r42      [10]11190 	jp	NZ, 00140$
   43D6 3Ar1Fr00      [13]11191 	ld	a,(#_nTip + 0)
   43D9 D6 01         [ 7]11192 	sub	a, #0x01
   43DB D2rA4r42      [10]11193 	jp	NC, 00140$
                          11194 ;src/main.c:2566: PrintTip(); // novice help
   43DE CDr79r08      [17]11195 	call	_PrintTip
   43E1 C3rA4r42      [10]11196 	jp	00140$
   43E4                   11197 00137$:
                          11198 ;src/main.c:2568: else if (ctMainLoop++ == 350) {			
   43E4 ED 5Br21r00   [20]11199 	ld	de, (_ctMainLoop)
   43E8 ED 43r21r00   [20]11200 	ld	(_ctMainLoop), bc
   43EC 7B            [ 4]11201 	ld	a, e
   43ED D6 5E         [ 7]11202 	sub	a, #0x5e
   43EF C2rA4r42      [10]11203 	jp	NZ,00140$
   43F2 15            [ 4]11204 	dec	d
   43F3 C2rA4r42      [10]11205 	jp	NZ,00140$
                          11206 ;src/main.c:2569: SetObject(0); // set the first object			
   43F6 2E 00         [ 7]11207 	ld	l, #0x00
   43F8 CDr8Br14      [17]11208 	call	_SetObject
                          11209 ;src/main.c:2570: ctMainLoop = 0; // reset counter
   43FB 21 00 00      [10]11210 	ld	hl, #0x0000
   43FE 22r21r00      [16]11211 	ld	(_ctMainLoop), hl
   4401 C3rA4r42      [10]11212 	jp	00140$
                          11213 	.area _CODE
                          11214 	.area _INITIALIZER
                          11215 	.area _CABS (ABS)
